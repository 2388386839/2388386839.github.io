<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring事件监听机制</title>
      <link href="/2019/09/13/Spring%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/09/13/Spring%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4><span id="前言">前言</span></h4><p>Spring中的事件机制其实就是设计模式中的观察者模式，主要由以下角色构成：</p><ol><li>事件</li><li>事件监听器（监听并处理事件）</li><li>事件发布者（发布事件）</li></ol><p>首先看一下监听器和发布者的接口定义</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ApplicationListener&lt;E extends ApplicationEvent&gt; extends EventListener &#123;</span><br><span class="line">      void onApplicationEvent(E event);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public<span class="built_in"> interface </span>ApplicationEventPublisher &#123;</span><br><span class="line"><span class="built_in">default </span>void publishEvent(ApplicationEvent event) &#123;</span><br><span class="line">publishEvent((Object) event);</span><br><span class="line">&#125;</span><br><span class="line">void publishEvent(Object event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="事件流转流程">事件流转流程</span></h4><h5><span id="初始化事件广播器">初始化事件广播器</span></h5><p>看一下这个方法<code>AbstractApplicationContext.refresh</code>，在IOC源码解析那篇文章已经把这个方法分析完了，所以直接关注事件广播器和事件发布相关的逻辑即可</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">            prepareRefresh();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">                initMessageSource();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 初始化事件广播器</span></span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">                onRefresh();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">                registerListeners();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 发布事件</span></span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - cancelling refresh attempt"</span>, ex);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">                destroyBeans();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> initApplicationEventMulticaster() &#123;</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.applicationEventMulticaster =</span><br><span class="line">                    beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.<span class="keyword">debug</span>(<span class="string">"Using ApplicationEventMulticaster ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">            beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.<span class="keyword">debug</span>(<span class="string">"Unable to locate ApplicationEventMulticaster with name '"</span> +</span><br><span class="line">                        APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class="line">                        <span class="string">"': using default ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到如果没有自定义的事件广播器，默认是使用<code>SimpleApplicationEventMulticaster</code>的</p><h5><span id="发布事件">发布事件</span></h5><p>发布事件是在bean的初始化之后的</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize lifecycle processor for this context.</span></span><br><span class="line">        initLifecycleProcessor();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Propagate refresh to lifecycle processor first.</span></span><br><span class="line">        getLifecycleProcessor().onRefresh();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Participate in LiveBeansView MBean, if active.</span></span><br><span class="line">        LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span>(<span class="params">ApplicationEvent <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">        Assert.notNull(<span class="keyword">event</span>, <span class="string">"Event must not be null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Publishing event in "</span> + getDisplayName() + <span class="string">": "</span> + <span class="keyword">event</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1. 获取到事件广播器，发布事件</span></span><br><span class="line">        getApplicationEventMulticaster().multicastEvent(<span class="keyword">event</span>);</span><br><span class="line">        <span class="comment">//2. 如果存在父容器，父容器也将发布事件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent.publishEvent(<span class="keyword">event</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体的发布逻辑在<code>multicastEvent</code>方法中</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span>(<span class="params">final ApplicationEvent <span class="keyword">event</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//遍历执行listener，getApplicationListeners调用AbstractApplicationEventMulticaster父类方法</span></span><br><span class="line">        <span class="keyword">for</span> (final ApplicationListener listener : getApplicationListeners(<span class="keyword">event</span>)) &#123;</span><br><span class="line">            Executor executor = getTaskExecutor();</span><br><span class="line">            <span class="keyword">if</span> (executor != <span class="literal">null</span>) &#123;</span><br><span class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        listener.onApplicationEvent(<span class="keyword">event</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onApplicationEvent(<span class="keyword">event</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到也没啥特殊的，无非就是起个线程池去调用这些监听器的方法</p><p>而监听器的处理就看各个监听器的具体实现了</p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring扩展点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring扩展点之FactoryBean接口</title>
      <link href="/2019/09/13/ring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BFactoryBean/"/>
      <url>/2019/09/13/ring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BFactoryBean/</url>
      
        <content type="html"><![CDATA[<h4><span id="前言">前言</span></h4><p>首先看一下接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回对象实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回对象类型,</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该工厂管理的对象是否为单例?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由接口定义可以看出来，实现这个接口的bean不是主要功能，<code>getObject()</code>创建的对象才是重点。那么在这我们就可以猜到了，可以是使用<code>FactoryBean</code>创建一些实例化过程比较复杂的bean</p><h4><span id="factorybean的注册"><code>FactoryBean</code>的注册</span></h4><p><code>FactoryBean</code>的处理逻辑在<code>AbstractBeanFactory.doGetBean</code>方法内</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; T doGetBean(</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">String</span> name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> <span class="keyword">Object</span>[] args, <span class="built_in">boolean</span> typeCheckOnly)</span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//获取bean名称</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> beanName = transformedBeanName(name);</span><br><span class="line">        <span class="keyword">Object</span> bean;</span><br><span class="line">  <span class="comment">//省略部分内容</span></span><br><span class="line">            <span class="comment">//这里就是FactoryBean的相关处理，下面会展开说</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line"> <span class="comment">//省略部分内容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) bean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看一下具体的逻辑，这里需要注意Spring关于bean的name有个潜规则，凡是以&amp;开头的bean名称都默认为<code>FactoryBean</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectForBeanInstance(</span><br><span class="line">        <span class="type">Object</span> beanInstance, <span class="type">String</span> name, <span class="type">String</span> beanName, <span class="meta">@Nullable</span> <span class="type">RootBeanDefinition</span> mbd) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果beanName以工厂引用&amp;开头</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">BeanFactoryUtils</span>.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanInstance instanceof <span class="type">NullBean</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果name以&amp;开头，而beanInstance不是FactoryBean类型，则抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (!(beanInstance instanceof <span class="type">FactoryBean</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanIsNotAFactoryException</span>(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果beanInstance不是FactoryBean类型，则直接返回beanInstance</span></span><br><span class="line">    <span class="comment">// 或者name以&amp;开头，也直接返回beanInstance，说明我们就想获取FactoryBean实例</span></span><br><span class="line">    <span class="keyword">if</span> (!(beanInstance instanceof <span class="type">FactoryBean</span>) || <span class="type">BeanFactoryUtils</span>.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">object</span> </span>= getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 此时beanInstance是FactoryBean类型，而name又不是以&amp;开头; 这是我们示例工程的情况，也是最普通、用的最多的情况</span></span><br><span class="line">        <span class="comment">// 将beanInstance强转成FactoryBean类型</span></span><br><span class="line">        <span class="type">FactoryBean</span>&lt;?&gt; factory = (<span class="type">FactoryBean</span>&lt;?&gt;) beanInstance;</span><br><span class="line">        <span class="comment">// 从缓存中获取我们需要的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="literal">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        boolean synthetic = (mbd != <span class="literal">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">        <span class="comment">// 调用FactoryBean的getObject方法创建我们需要的实例对象</span></span><br><span class="line">        <span class="class"><span class="keyword">object</span> </span>= getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectFromFactoryBean(<span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="type">String</span> beanName, boolean shouldPostProcess) &#123;</span><br><span class="line">    <span class="comment">//针对单例的处理</span></span><br><span class="line">    <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        synchronized (getSingletonMutex()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//通过factory.getObject获取</span></span><br><span class="line">                <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="type">Object</span> alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (alreadyThere != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="class"><span class="keyword">object</span> </span>= alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                            <span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        beforeSingletonCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName,</span><br><span class="line">                                    <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            afterSingletonCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">                        <span class="comment">//将获取到的对象放到factoryBeanObjectCache单例缓存map进行存储</span></span><br><span class="line">                        <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, <span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//非单例的处理，直接通过factory.getObejct获取，然后再返回给用户</span></span><br><span class="line">        <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成bean对象的方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Object</span> doGetObjectFromFactoryBean(<span class="keyword">final</span> <span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="keyword">final</span> <span class="type">String</span> beanName)</span><br><span class="line">      <span class="keyword">throws</span> <span class="type">BeanCreationException</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">Object</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="type">System</span>.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="type">AccessControlContext</span> acc = getAccessControlContext();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="class"><span class="keyword">object</span> </span>= <span class="type">AccessController</span>.doPrivileged((<span class="type">PrivilegedExceptionAction</span>&lt;<span class="type">Object</span>&gt;) factory::getObject, acc);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (<span class="type">PrivilegedActionException</span> pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> pae.getException();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="class"><span class="keyword">object</span> </span>= factory.getObject();<span class="comment">//生成对象</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (<span class="type">FactoryBeanNotInitializedException</span> ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(beanName, ex.toString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"FactoryBean threw exception on object creation"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Do not accept a null value for a FactoryBean that's not fully</span></span><br><span class="line">   <span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(</span><br><span class="line">               beanName, <span class="string">"FactoryBean which is currently in creation returned null from getObject"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="class"><span class="keyword">object</span> </span>= <span class="keyword">new</span> <span class="type">NullBean</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;&#125;</span><br></pre></td></tr></table></figure><h4><span id="spring的实现">Spring的实现</span></h4><p>Spring中实现这个接口的bean有很多，但是我们最熟悉也是最重要的就是在我之前文章中提到过得<code>ProxyFactoryBean</code>这个bean是实现AOP技术的重点，简单回顾一下吧<br><img src="/2019/09/13/ring扩展点之FactoryBean/2.png" alt="1"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object getObject() throws BeansException &#123;</span><br><span class="line">initializeAdvisorChain();</span><br><span class="line"><span class="keyword">if</span> (isSingleton()) &#123;</span><br><span class="line"><span class="keyword">return</span> getSingletonInstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.targetName == <span class="literal">null</span>) &#123;</span><br><span class="line">logger.warn(<span class="string">"Using non-singleton proxies with singleton targets is often undesirable. "</span> +</span><br><span class="line"><span class="string">"Enable prototype proxies by setting the 'targetName' property."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newPrototypeInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> synchronized Object getSingletonInstance() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.singletonInstance == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.targetSource = freshTargetSource();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.autodetectInterfaces &amp;&amp; getProxiedInterfaces().length == <span class="number">0</span> &amp;&amp; !isProxyTargetClass()) &#123;</span><br><span class="line"><span class="comment">// Rely on AOP infrastructure to tell us what interfaces to proxy.</span></span><br><span class="line">Class&lt;?&gt; targetClass = getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> new FactoryBeanNotInitializedException(<span class="string">"Cannot determine target class for proxy"</span>);</span><br><span class="line">&#125;</span><br><span class="line">setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, <span class="keyword">this</span>.proxyClassLoader));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Initialize the shared singleton instance.</span></span><br><span class="line"><span class="keyword">super</span>.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">this</span>.singletonInstance = getProxy(createAopProxy());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.singletonInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring扩展点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring扩展点之Aware接口族</title>
      <link href="/2019/09/13/pring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BAware%E6%8E%A5%E5%8F%A3%E6%97%8F/"/>
      <url>/2019/09/13/pring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BAware%E6%8E%A5%E5%8F%A3%E6%97%8F/</url>
      
        <content type="html"><![CDATA[<h4><span id="引言">引言</span></h4><p>Spring中提供了各种Aware接口，方便从上下文中获取当前的运行环境，比较常见的几个子接口有：BeanFactoryAware,BeanNameAware,ApplicationContextAware,EnvironmentAware，BeanClassLoaderAware等，这些Aware的作用都可以从命名得知</p><h4><span id="aware处理"><code>Aware</code>处理</span></h4><p>其中<code>BeanNameAware</code>、<code>BeanClassLoaderAware</code>和<code>BeanFactoryAware</code>这三个是直接在bean的初始化之前就处理了的，具体代码在<code>AbstractAutowireCapableBeanFactory.initializeBean</code>方法中：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> Object initializeBean(<span class="keyword">String </span><span class="keyword">beanName, </span>Object <span class="keyword">bean, </span>RootBeanDefinition mbd) &#123;</span><br><span class="line">    // 判断对象实现的接口类型，处理特定的三种接口类型：<span class="keyword">BeanNameAware、BeanClassLoaderAware和BeanFactoryAware。</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (<span class="keyword">bean </span>instanceof <span class="keyword">BeanNameAware) </span>&#123;</span><br><span class="line">        ((<span class="keyword">BeanNameAware) </span><span class="keyword">bean).setBeanName(beanName);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">bean </span>instanceof <span class="keyword">BeanClassLoaderAware) </span>&#123;</span><br><span class="line">        ((<span class="keyword">BeanClassLoaderAware) </span><span class="keyword">bean).setBeanClassLoader(getBeanClassLoader());</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">bean </span>instanceof <span class="keyword">BeanFactoryAware) </span>&#123;</span><br><span class="line">        ((<span class="keyword">BeanFactoryAware) </span><span class="keyword">bean).setBeanFactory(this);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">    // 开始<span class="keyword">Bean初始化前处理、初始化、初始化后处理</span></span><br><span class="line"><span class="keyword"> </span>   Object wrappedBean = <span class="keyword">bean;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (mbd == null <span class="title">||</span> !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, <span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line"> </span><br><span class="line">    try &#123;</span><br><span class="line">        invokeInitMethods(<span class="keyword">beanName, </span>wrappedBean, mbd)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    catch (Throwable ex) &#123;</span><br><span class="line">        throw new <span class="keyword">BeanCreationException(</span></span><br><span class="line"><span class="keyword"> </span>               (mbd != null ? mbd.getResourceDescription() : null),</span><br><span class="line">                <span class="keyword">beanName, </span><span class="string">"Invocation of init method failed"</span>, ex)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">if</span> (mbd == null <span class="title">||</span> !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, <span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">    return wrappedBean<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这三种之外的那些Aware接口的实现就不太一样了，它们都是利用<code>BeanPostProcessor</code>接口完成的，关于<code>BeanPostProcessor</code>接口的原理可以这篇文章：<a href="https://mp.weixin.qq.com/s/1o9p334-lcOEp9Na2ZE2DA" target="_blank" rel="noopener">Spring扩展点之BeanPostProcessor</a></p><p>如<code>ApplicationContextAware</code>就是利用<code>ApplicationContextAwareProcessor</code>实现的：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">AccessControlContext acc = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">(bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware ||</span><br><span class="line">bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware ||</span><br><span class="line">bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</span><br><span class="line">acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (acc != <span class="literal">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged<span class="function"><span class="params">((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="regexp">//具体实现</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">invokeAwareInterfaces(bean);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">return null;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">&#125;, acc);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">else &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    //</span>具体实现</span></span></span><br><span class="line"><span class="function"><span class="params">invokeAwareInterfaces(bean);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">return</span> bean;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">private <span class="literal">void</span> invokeAwareInterfaces(Object bean) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((EnvironmentAware) bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(<span class="keyword">this</span>.embeddedValueResolver);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((ResourceLoaderAware) bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((MessageSourceAware) bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">((ApplicationContextAware) bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>而<code>ApplicationContextAwareProcessor</code>的注册奥秘在<code>AbstractApplicationContext.prepareBeanFactory</code>方法中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.setBeanClassLoader</span>(<span class="selector-tag">getClassLoader</span>());</span><br><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.addPropertyEditorRegistrar</span>(<span class="selector-tag">new</span> <span class="selector-tag">ResourceEditorRegistrar</span>(<span class="selector-tag">this</span>));</span><br><span class="line"> <span class="selector-tag">beanFactory</span><span class="selector-class">.addBeanPostProcessor</span>(<span class="selector-tag">new</span> <span class="selector-tag">ApplicationContextAwareProcessor</span>(<span class="selector-tag">this</span>)); </span><br><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.ignoreDependencyInterface</span>(<span class="selector-tag">ResourceLoaderAware</span><span class="selector-class">.class</span>);</span><br><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.ignoreDependencyInterface</span>(<span class="selector-tag">ApplicationEventPublisherAware</span><span class="selector-class">.class</span>);</span><br><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.ignoreDependencyInterface</span>(<span class="selector-tag">MessageSourceAware</span><span class="selector-class">.class</span>);</span><br><span class="line"><span class="selector-tag">beanFactory</span><span class="selector-class">.ignoreDependencyInterface</span>(<span class="selector-tag">ApplicationContextAware</span><span class="selector-class">.class</span>);</span><br></pre></td></tr></table></figure><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring扩展点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring扩展点之BeanFactoryPostProcessor</title>
      <link href="/2019/09/10/Spring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BBeanFactoryPostProcessor/"/>
      <url>/2019/09/10/Spring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BBeanFactoryPostProcessor/</url>
      
        <content type="html"><![CDATA[<h4><span id="前言">前言</span></h4><p><code>BeanFactoryPostProcessor</code>接口是Spring中一个非常重要的接口，它的接口定义如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>BeanFactoryPostProcessor &#123;</span><br><span class="line">void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你实现了这个接口的时候，可以对还没有初始化的bean的属性进行修改或添加</p><h4><span id="beanfactorypostprocessor注册"><code>BeanFactoryPostProcessor</code>注册</span></h4><p>与<code>BeanPostProcessor</code>的统一注册不同，<code>BeanFactoryPostProcessor</code>的注册是留给具体的业务实现的。它的维护是在<code>AbstractApplicationContext</code>类中</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors = </span><br><span class="line"><span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addBeanFactoryPostProcessor</span><span class="params">(BeanFactoryPostProcessor postProcessor)</span> </span>&#123;</span><br><span class="line">Assert.notNull(postProcessor, <span class="string">"BeanFactoryPostProcessor must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.beanFactoryPostProcessors.add(postProcessor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="执行原理">执行原理</span></h4><p>调用逻辑在<code>AbstractApplicationContext.invokeBeanFactoryPostProcessors</code>方法中<br>这个方法比较长，可以重点关注我添加注释的地方</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">protected <span class="keyword">void</span> invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"><span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> invokeBeanFactoryPostProcessors(</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory, <span class="built_in">List</span>&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 1.判断beanFactory是否为BeanDefinitionRegistry，在这里普通的beanFactory是DefaultListableBeanFactory,而DefaultListableBeanFactory实现了BeanDefinitionRegistry接口，因此这边为true</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory instanceof BeanDefinitionRegistry) &#123;</span><br><span class="line">        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        <span class="built_in">List</span>&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">        <span class="built_in">List</span>&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> LinkedList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2.处理入参beanFactoryPostProcessors</span></span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (postProcessor instanceof BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                BeanDefinitionRegistryPostProcessor registryProcessor =</span><br><span class="line">                        (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">               <span class="comment">// 如果是BeanDefinitionRegistryPostProcessor则直接执行BeanDefinitionRegistryPostProcessor接口的postProcessBeanDefinitionRegistry方法</span></span><br><span class="line">                registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryProcessors.add(registryProcessor);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">List</span>&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> ArrayList&lt;BeanDefinitionRegistryPostProcessor&gt;();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3找出所有实现BeanDefinitionRegistryPostProcessor接口的Bean的beanName</span></span><br><span class="line">        <span class="built_in">String</span>[] postProcessorNames =</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="comment">// 校验是否实现了PriorityOrdered接口</span></span><br><span class="line">            <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.<span class="keyword">class</span>)) &#123;</span><br><span class="line">                <span class="comment">//  获取对应的bean实例, 添加到currentRegistryProcessors中,</span></span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序(根据是否实现PriorityOrdered、Ordered接口和order值来排序)</span></span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        <span class="comment">// 遍历currentRegistryProcessors, 执行postProcessBeanDefinitionRegistry方法</span></span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        <span class="comment">// 清空currentRegistryProcessors</span></span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4.与上边3的流程差不多，这是这里处理的是实现Ordered接口</span></span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.<span class="keyword">class</span>)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 5.调用所有剩下的BeanDefinitionRegistryPostProcessors</span></span><br><span class="line">        boolean reiterate = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">            reiterate = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 找出所有实现BeanDefinitionRegistryPostProcessor接口的类</span></span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">String</span> ppName : postProcessorNames) &#123;</span><br><span class="line">                <span class="comment">// 跳过已经执行过的</span></span><br><span class="line">                <span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    reiterate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">            registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">            <span class="comment">// 5遍历currentRegistryProcessors, 执行postProcessBeanDefinitionRegistry方法</span></span><br><span class="line">            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">            currentRegistryProcessors.clear();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 6.调用所有BeanDefinitionRegistryPostProcessor的postProcessBeanFactory方法</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">        <span class="comment">// 7.最后, 调用入参beanFactoryPostProcessors中的普通BeanFactoryPostProcessor的postProcessBeanFactory方法</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 到这里 , 入参beanFactoryPostProcessors和容器中的所有BeanDefinitionRegistryPostProcessor已经全部处理完毕,</span></span><br><span class="line">    <span class="comment">// 下面开始处理容器中的所有BeanFactoryPostProcessor</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">    <span class="comment">// 8.找出所有实现BeanFactoryPostProcessor接口的类</span></span><br><span class="line">    <span class="built_in">String</span>[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line">    <span class="comment">// Ordered, and the rest.</span></span><br><span class="line">    <span class="comment">// 用于存放实现了PriorityOrdered接口的BeanFactoryPostProcessor</span></span><br><span class="line">    <span class="built_in">List</span>&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    <span class="comment">// 用于存放实现了Ordered接口的BeanFactoryPostProcessor的beanName</span></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    <span class="comment">// 用于存放普通BeanFactoryPostProcessor的beanName</span></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    <span class="comment">// 8.1 遍历postProcessorNames, 将BeanFactoryPostProcessor按实现PriorityOrdered、实现Ordered接口、普通三种区分开</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="comment">// 8.2 跳过已经执行过的</span></span><br><span class="line">        <span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            <span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.<span class="keyword">class</span>)) &#123;</span><br><span class="line">            <span class="comment">// 8.3 添加实现了PriorityOrdered接口的BeanFactoryPostProcessor</span></span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.<span class="keyword">class</span>)) &#123;</span><br><span class="line">            <span class="comment">// 8.4 添加实现了Ordered接口的BeanFactoryPostProcessor的beanName</span></span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 8.5 添加剩下的普通BeanFactoryPostProcessor的beanName</span></span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">    <span class="comment">// 9.调用所有实现PriorityOrdered接口的BeanFactoryPostProcessor</span></span><br><span class="line">    <span class="comment">// 9.1 对priorityOrderedPostProcessors排序</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 9.2 遍历priorityOrderedPostProcessors, 执行postProcessBeanFactory方法</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">    <span class="comment">// 10.调用所有实现Ordered接口的BeanFactoryPostProcessor</span></span><br><span class="line">    <span class="built_in">List</span>&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        <span class="comment">// 10.1 获取postProcessorName对应的bean实例, 添加到orderedPostProcessors, 准备执行</span></span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10.2 对orderedPostProcessors排序</span></span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 10.3 遍历orderedPostProcessors, 执行postProcessBeanFactory方法</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">    <span class="comment">// 11.调用所有剩下的BeanFactoryPostProcessor</span></span><br><span class="line">    <span class="built_in">List</span>&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        <span class="comment">// 11.1 获取postProcessorName对应的bean实例, 添加到nonOrderedPostProcessors, 准备执行</span></span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.<span class="keyword">class</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 11.2 遍历nonOrderedPostProcessors, 执行postProcessBeanFactory方法</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line">    <span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">    <span class="comment">// 12.清除元数据缓存（mergedBeanDefinitions、allBeanNamesByType、singletonBeanNamesByType），</span></span><br><span class="line">    <span class="comment">// 因为后处理器可能已经修改了原始元数据，例如， 替换值中的占位符...</span></span><br><span class="line">    beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细心的同学可能会发现上方还出现了一个<code>BeanDefinitionRegistryPostProcessor</code>，这个东东其实是<code>BeanFactoryPostProcessor</code>的特殊实习，观察调用它的方法可以看到它需要一个参数：<code>BeanDefinitionRegistry</code>，通过这个参数可以更为方便的去做一些自定义bean的操作</p><p>总结一下上方的逻辑：</p><ol><li>将<code>BeanFactoryPostProcessor</code>和<code>BeanDefinitionRegistryPostProcessor</code>，分别放入两个集合</li><li>分别进行排序处理</li><li>按照优先级分别调用<code>invokeBeanDefinitionRegistryPostProcessors</code>和<code>invokeBeanFactoryPostProcessors</code>方法</li><li>这两个invoke方法相信你可以想象的到无非就是循环调用这些实现类对应的方法</li></ol><h4><span id="spring的实现">Spring的实现</span></h4><p>查看这个接口的继承体系，可以看到这个接口的实现类是非常多的，各个实现类的功能如果感兴趣大家可以去慢慢挖掘一下<br><img src="/2019/09/10/Spring扩展点之BeanFactoryPostProcessor/1.png" alt="2"></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring扩展点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring扩展点之BeanPostProcessor</title>
      <link href="/2019/09/10/Spring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BBeanPostProcessor/"/>
      <url>/2019/09/10/Spring%E6%89%A9%E5%B1%95%E7%82%B9%E4%B9%8BBeanPostProcessor/</url>
      
        <content type="html"><![CDATA[<h4><span id="前言">前言</span></h4><p><code>BeanPostProcessor</code>接口是Spring中一个非常重要的接口，它的接口定义如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException;</span><br><span class="line">    </span><br><span class="line">    Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你实现了这个接口的时候，Spring会保证在每一个bean对象初始化方法调用之前调用<code>postProcessBeforeInitialization</code>方法，在初始化方法调用之后调用<code>postProcessAfterInitialization</code></p><h4><span id="beanpostprocessor的注册"><code>BeanPostProcessor</code>的注册</span></h4><p>看过我之前写的IOC源码分析系列文章的同学应该对这个都比较有印象<br><img src="/2019/09/10/Spring扩展点之BeanPostProcessor/21.png" alt="1"><br>Spring在执行到这的时候会把所有实现<code>BeanPostProcessor</code>接口的实现类都注册到<code>BeanFactory</code>中，一起来看一下实现的细节</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">protected void registerBeanPostProcessors(ConfigurableListableBeanFactory <span class="keyword">beanFactory) </span>&#123;</span><br><span class="line">PostProcessorRegistrationDelegate.registerBeanPostProcessors(<span class="keyword">beanFactory, </span>this)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="symbol">public</span> static void registerBeanPostProcessors(</span><br><span class="line">ConfigurableListableBeanFactory <span class="keyword">beanFactory, </span>AbstractApplicationContext applicationContext) &#123;</span><br><span class="line">//获取所有<span class="keyword">BeanPostProcessor的实现类</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">String[] </span>postProcessorNames = <span class="keyword">beanFactory.getBeanNamesForType(BeanPostProcessor.class, </span>true, false)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int <span class="keyword">beanProcessorTargetCount </span>= <span class="keyword">beanFactory.getBeanPostProcessorCount() </span>+ <span class="number">1</span> + postProcessorNames.length<span class="comment">;</span></span><br><span class="line"><span class="keyword">beanFactory.addBeanPostProcessor(new </span><span class="keyword">BeanPostProcessorChecker(beanFactory, </span><span class="keyword">beanProcessorTargetCount));</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"></span>      // 这里把实现PriorityOrdered接口,Ordered 接口的<span class="keyword">BeanPostProcessors </span>和其他类型的<span class="keyword">BeanPostProcessors </span>区分开</span><br><span class="line">List&lt;<span class="keyword">BeanPostProcessor&gt; </span>priorityOrderedPostProcessors = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">List&lt;<span class="keyword">BeanPostProcessor&gt; </span>internalPostProcessors = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">List&lt;<span class="keyword">String&gt; </span>orderedPostProcessorNames = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">List&lt;<span class="keyword">String&gt; </span>nonOrderedPostProcessorNames = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">String </span>ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="meta">if</span> (<span class="keyword">beanFactory.isTypeMatch(ppName, </span>PriorityOrdered.class)) &#123;</span><br><span class="line"><span class="keyword">BeanPostProcessor </span>pp = <span class="keyword">beanFactory.getBean(ppName, </span><span class="keyword">BeanPostProcessor.class);</span></span><br><span class="line"><span class="keyword"></span>priorityOrderedPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">else</span> <span class="meta">if</span> (<span class="keyword">beanFactory.isTypeMatch(ppName, </span>Ordered.class)) &#123;</span><br><span class="line">orderedPostProcessorNames.<span class="keyword">add(ppName);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"><span class="meta">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.<span class="keyword">add(ppName);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//对实现了PriorityOrdered接口的按优先级排序</span><br><span class="line">sortPostProcessors(<span class="keyword">beanFactory, </span>priorityOrderedPostProcessors)<span class="comment">;</span></span><br><span class="line">       //这里就是注册了，下面会说</span><br><span class="line">registerBeanPostProcessors(<span class="keyword">beanFactory, </span>priorityOrderedPostProcessors)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;<span class="keyword">BeanPostProcessor&gt; </span>orderedPostProcessors = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">String </span>ppName : orderedPostProcessorNames) &#123;</span><br><span class="line"><span class="keyword">BeanPostProcessor </span>pp = <span class="keyword">beanFactory.getBean(ppName, </span><span class="keyword">BeanPostProcessor.class);</span></span><br><span class="line"><span class="keyword"></span>orderedPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(<span class="keyword">beanFactory, </span>orderedPostProcessors)<span class="comment">;</span></span><br><span class="line">       //注册</span><br><span class="line">registerBeanPostProcessors(<span class="keyword">beanFactory, </span>orderedPostProcessors)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">List&lt;<span class="keyword">BeanPostProcessor&gt; </span>nonOrderedPostProcessors = new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">String </span>ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line"><span class="keyword">BeanPostProcessor </span>pp = <span class="keyword">beanFactory.getBean(ppName, </span><span class="keyword">BeanPostProcessor.class);</span></span><br><span class="line"><span class="keyword"></span>nonOrderedPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (pp instanceof MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.<span class="keyword">add(pp);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"> //注册</span><br><span class="line">registerBeanPostProcessors(<span class="keyword">beanFactory, </span>nonOrderedPostProcessors)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 最后注册常规的</span><br><span class="line">sortPostProcessors(<span class="keyword">beanFactory, </span>internalPostProcessors)<span class="comment">;</span></span><br><span class="line">registerBeanPostProcessors(<span class="keyword">beanFactory, </span>internalPostProcessors)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">beanFactory.addBeanPostProcessor(new </span>ApplicationListenerDetector(applicationContext))<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方的代码就是把这些<code>BeanPostProcessor</code>分为了几类，然后分别根据规则排序后注册进BeanFactory中，而BeanFactory中其实就只是维护了一个<code>BeanPostProcessor</code>的列表而已</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;BeanPostProcessor&gt; beanPostProcessors = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> registerBeanPostProcessors(</span><br><span class="line">ConfigurableListableBeanFactory beanFactory, List&lt;BeanPostProcessor&gt; postProcessors) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">beanFactory.addBeanPostProcessor(postProcessor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(beanPostProcessor, <span class="string">"BeanPostProcessor must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors.remove(beanPostProcessor);</span><br><span class="line">        <span class="keyword">this</span>.beanPostProcessors.add(beanPostProcessor);</span><br><span class="line">        <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hasInstantiationAwareBeanPostProcessors = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (beanPostProcessor <span class="keyword">instanceof</span> DestructionAwareBeanPostProcessor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hasDestructionAwareBeanPostProcessors = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4><span id="执行原理">执行原理</span></h4><p>我们知道Bean的初始化是在定义在容器的刷新过程中，而具体的实现则是由<code>AbstractAutowireCapableBeanFactory.initializeBean()</code>方法完成的。在这个方法中就包含了<code>BeanPostProcessor</code>的调用逻辑</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> initializeBean(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> <span class="keyword">Object</span> bean, RootBeanDefinition mbd) &#123;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> run() &#123;</span><br><span class="line">invokeAwareMethods(beanName, bean);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">invokeAwareMethods(beanName, bean);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">Object</span> wrappedBean = bean;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">// BeanPostProcessors 的Before 方法</span></span><br><span class="line">wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用初始化方法</span></span><br><span class="line">invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">// BeanPostProcessors 的After方法</span></span><br><span class="line">wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这里面的执行逻辑我们也可以猜到，无非就是循环遍历所有的<code>BeanPostProcessor</code>，然后一一执行</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> applyBeanPostProcessorsBeforeInitialization(<span class="keyword">Object</span> existingBean, <span class="keyword">String</span> beanName)</span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> result = existingBean;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">        result = beanProcessor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;&#125;</span><br></pre></td></tr></table></figure><p>其中<code>applyBeanPostProcessorsAfterInitialization</code>的实现内容跟这个是一样的</p><p>但是这里面有一个主意的点，那就是如果具体的实现一但返回null，那么就会跳出for循环，后面的就得不到机会执行了</p><h4><span id="常见用例">常见用例</span></h4><p>查看这个接口的继承体系，可以看到这个接口的实现类是非常多的，各个实现类的功能如果感兴趣大家可以去慢慢挖掘一下<br><img src="/2019/09/10/Spring扩展点之BeanPostProcessor/22.png" alt="2"></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring扩展点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有哪些你不知道的阅读源码的技巧</title>
      <link href="/2019/09/08/%E5%93%AA%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/09/08/%E5%93%AA%E4%BA%9B%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h5><span id="1-先看官方文档和架构图">1. 先看官方文档和架构图</span></h5><p>优秀的开源组件官方都会维护文档和架构图，这份架构图上或许有一些最重要的组件之间的关联关系、或许哪些功能的调用流程、或许有一些别的东西，但是相信我，这些东西一定都是从总体来描述这个项目的，这个一定是你要阅读源码时第一个要看的</p><h5><span id="2-再看项目的组织结构">2. 再看项目的组织结构</span></h5><p>下载下来代码之后，不要急着开始。先看一下各个包名和包里的类名，对照着文档和类名先简单猜一下各个类的大致作用</p><h5><span id="3-找到启动demo把项目跑起来">3. 找到启动demo，把项目跑起来</span></h5><p>阅读源码不仅仅是阅读，要让项目跑起来，去调试它，去观察和改变它的运行路线</p><h5><span id="4-找到阅读的起点">4. 找到阅读的起点</span></h5><p>很多人都想阅读源码，但是面对庞大的代码库不知道如何下手。这个时候你就要明确你的目标。<br>可以从启动方法开始、也可以从具体的哪个功能开始。总之要找到你的起点</p><h5><span id="5-理清主干">5. 理清主干</span></h5><p>一个优秀的开源软件总是经过了很多工程师很多年的努力孵化出来的，你去阅读它的时候很难把整个软件全部都整明白。所以一定要认准自己的目标，朝着自己的目标去读，当过程中出现一些不太重要的分枝时可以适当的忽略来节约时间</p><h5><span id="6-把你的结论记下来">6. 把你的结论记下来</span></h5><p>好记性不如烂笔头，我们从小就知道的一句话。包括且不限于笔记、流程图、截图等任何你擅长的工具，把它记下来。另外，最好总结一下重点部分方便面试的时候快速复习</p><h5><span id="7-阅读时使用的小技巧">7. 阅读时使用的小技巧</span></h5><h6><span id="查看类的继承体系">查看类的继承体系</span></h6><p>快捷键：<code>Ctrl+H</code><br><img src="/2019/09/08/哪些你不知道的阅读源码的技巧/1.png" alt="1"></p><h6><span id="查看方法的调用层级">查看方法的调用层级</span></h6><p>优秀的源码往往调用层级很深，当你debug到某个点却忘掉了怎么进来的或者说不知道哪个地方调用了这个方法，只需要在方法名上使用<code>Ctrl +Alt+H</code>即可查看这个方法的调用层级<br><img src="/2019/09/08/哪些你不知道的阅读源码的技巧/2.png" alt="1"></p><h6><span id="查看类uml图">查看类UML图</span></h6><p>当使用<code>Ctrl +Alt+Shift+u</code>会在新的标签页中展示当前类的UML继承图<br><img src="/2019/09/08/哪些你不知道的阅读源码的技巧/3.png" alt="1"><br>这个继承图相比较于第一个查看类的继承体系外还有以下优点：</p><ol><li>使用UML图形展示看起来更舒服更全面</li><li>支持手动排除不相关的类和接口</li><li>支持展示类的属性和方法等相关信息</li><li>当你仅仅只关注UML图时还可以使用<code>Ctrl +Alt+u</code>在当前标签页浮动显示一个图层</li></ol><h6><span id="debug时修改变量">Debug时修改变量</span></h6><p>当你在Debug的时候可以使用<code>Alt+F8</code>唤起这个界面<br><img src="/2019/09/08/哪些你不知道的阅读源码的技巧/4.png" alt="1"><br>在这个输入框中，你可以直接修改当前能够看到的变量，当存在以下场景时这个功能真的是绝配</p><ol><li>当存在很多分支的时候修改某个变量来改变代码运行的逻辑</li><li>不确定某句代码结果时可以直接在文本框输入，而不需要再次重启程序</li></ol><p>记住上方这7点，相信你会变得更加优秀，而我则使用这7点在一个月的时间阅读了Spring的源码：<a href="https://mp.weixin.qq.com/s/PoQeVQ8x3DJhzswhUJl5xw" target="_blank" rel="noopener">Spring源码解析系列汇总</a></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我建议你去阅读优秀的源码</title>
      <link href="/2019/09/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%BB%BA%E8%AE%AE%E4%BD%A0%E5%8E%BB%E9%98%85%E8%AF%BB%E4%BC%98%E7%A7%80%E7%9A%84%E6%BA%90%E7%A0%81/"/>
      <url>/2019/09/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%BB%BA%E8%AE%AE%E4%BD%A0%E5%8E%BB%E9%98%85%E8%AF%BB%E4%BC%98%E7%A7%80%E7%9A%84%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h5><span id="最现实的原因">最现实的原因</span></h5><p>如果你想进大厂，没有大厂的面试官会不问你常用组件的源码实现。虽然很多人都说大厂都是面试造火箭，入职拧螺丝。但是人家拧螺丝也要招那个会造火箭的人来拧</p><h5><span id="解决问题的速度">解决问题的速度</span></h5><p>当线上出现问题时，阅读过源码你很快就想到，这是由什么原因引起的，你需要现在去怎么做可以最快的解决这个问题。而如果没有阅读过源码，可能最快的方法是去Google一下了，但是Google出来的答案能不能真的解决这个问题可就不好说了</p><h5><span id="拉开你和别人的差距">拉开你和别人的差距</span></h5><p>好的开源框架都是由全球顶尖的工程师设计的以及经过各个公司各种业务场景的验证过后的。读这些源码就好像我们上学时老师要求我们经常看别人的优秀作文一样，它会潜移默化的影响着你，让你变得更加优秀</p><h5><span id="提前预见问题">提前预见问题</span></h5><p>当你对某些开源组件比较熟悉时，在技术选型时你就会知道针对你们的业务场景使用使用不同的解决方案都有什么优缺点，而不是只能选择一个你曾经用过的</p><h5><span id="补全知识体系">补全知识体系</span></h5><p>每一个开源组件都有它存在的意义，它的代码其实针对它自己来说都是它的业务代码，只不过是优秀的开源组件在保证业务完成的前提下还兼顾了性能以及优雅。在这些代码里有很多你曾经忽略过的细节以及之前没有接触过的知识点等着你去挖掘</p><h5><span id="提升架构能力">提升架构能力</span></h5><p>每一个程序员都有一个架构师的梦，当你步入架构师的道路之后，相比较于写代码的能力可能对大型项目的管理和组织能力更为重要一些</p><h5><span id="如何开始阅读源码">如何开始阅读源码</span></h5><p><a href="https://mp.weixin.qq.com/s/Nt8ibQxdopDq5_6yRpYC1g" target="_blank" rel="noopener">有哪些你不知道的阅读源码的技巧</a></p><p>写给所有程序员的话：白天求生存，晚上求发展，共勉！！！</p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码解析系列汇总</title>
      <link href="/2019/09/05/pring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E6%B1%87%E6%80%BB/"/>
      <url>/2019/09/05/pring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信我，你会收藏这篇文章的</p></blockquote><p>本篇文章是这段时间撸出来的Spring源码解析系列文章的汇总，总共包含以下专题。喜欢的同学可以收藏起来以备不时之需</p><p><a href="https://mp.weixin.qq.com/s/0zDCy0eQycdM8M9eHGuLEQ" target="_blank" rel="noopener">SpringIOC源码解析(上)</a></p><ol><li>本篇文章搭建了IOC源码解析的demo环境，启动这个环境即可开启阅读Spring源码的第一步</li><li>开始源码阅读时介绍了Spring容器中最经典的容器<code>ClassPathXmlApplicationContext</code>,这个容器是我们在学习Spring的时候最先接触的一个容器，它负责加载当前环境下的xml配置文件</li><li>紧接着介绍了bean工厂<code>BeanFactory</code>以及容器中bean的包装类<code>BeanDefinition</code></li><li>然后就是Spring对xml配置文件的加载和解析</li><li>当解析的<code>beans</code>标签中各个<code>bean</code>中时将会把这个东东使用<code>BeanDefinition</code>包装后注册到容器中</li><li>当<code>bean</code>注册完成后会有一些Spring对<code>BeanFactory</code>的扩展点的处理</li><li>当然除了扩展点还有国际化、监听器等操作</li></ol><p><a href="https://mp.weixin.qq.com/s/z-DZxBWOSSaFfQXlA0TSKw" target="_blank" rel="noopener">SpringIOC源码解析(下)</a></p><ol><li>开篇先介绍了<code>conversionService</code>和<code>EmbeddedValueResolver</code>两个比较有意思的东东</li><li>然后就是重点的<code>bean</code>的初始化</li><li>初始化过程中涉及到了<code>singleton</code> 和 <code>prototype</code>两个Scope的<code>bean</code>的处理</li><li>当然，还有令人头疼的循环依赖问题</li><li>创建bean的过程中还有我们熟悉的<code>@Autowired</code>注解注入属性的方式</li><li>接着就是一些清除缓存的操作</li></ol><p><a href="https://mp.weixin.qq.com/s/xqDPttr53rxLBi8t8kIQDg" target="_blank" rel="noopener">SpringIOC源码解析(基于注解)</a><br>阅读本篇文章之前建议您首先查看上方两篇文章，因为本篇主要是描述了基于注解的方式和基于xml配置文件方式的异同点</p><ol><li>源码阅读环境的搭建</li><li>首先简单描述了<code>bean</code>容器<code>AnnotationConfigApplicationContext</code></li><li>然后源码执行的第一步就是关于包扫描一块的东西，也就是我们比较熟悉的注解<code>@ComponentScan</code></li><li>扫描到了各个带有注解的类之后就是读取类呀、反射呀什么的来加载类</li><li>当<code>bean</code>已经加载完后就是<code>bean</code>的注册逻辑了<br>相比较与之前两篇文章的长篇大论，这篇文章的篇幅要少很多，这主要得益于Spring的设计精妙和代码之优雅</li></ol><p><a href="https://mp.weixin.qq.com/s/yMw1MZIRjQ4c504SSuPFaw" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（一）</a></p><ol><li>源码阅读环境的搭建</li><li><code>@EnableAspectJAutoProxy</code>注解的原理</li><li><code>@EnableAspectJAutoProxy</code>注解又使用到了<code>@Import</code>注解，关于<code>@Import</code>注解的文章下面有地址</li></ol><p><a href="https://mp.weixin.qq.com/s/kxbdat_T0io6xEnD48HK-g" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（二）</a></p><ol><li>首先提到了SpringAOP是基于<code>postProcessBeforeInstantiation</code>和<code>postProcessAfterInstantiation</code>两个方法实现的，这篇文章主讲<code>postProcessBeforeInstantiation</code></li><li>加载增强</li><li>获取所有的增强又对增强进行了一系列的封装</li></ol><p><a href="https://mp.weixin.qq.com/s/TORZGi2AX8hV1gNf1qNZUA" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（三）</a></p><ol><li>以<code>postProcessAfterInstantiation</code>开篇</li><li>所有的bean在初始化之后都会调用这个方法</li><li>在这里获取到之前加载到的所有的增强，和类的所有方法一一匹配</li><li>当类具有匹配增强的时候就可以为这个类生成具体的代理了</li></ol><p><a href="https://mp.weixin.qq.com/s/cmdlQ2LUi-7IDC6rCKqWOg" target="_blank" rel="noopener">SpringJDBC源码解析</a></p><ol><li>传统JDBC的使用</li><li>源码阅读环境的搭建</li><li>使用JdbcTemplate以update方法切入</li><li>获取连接加载驱动等方法的封装</li><li>请求参数的封装</li><li>调用驱动提供的方法</li><li>query方法的分析，与update仅有返回结果的处理不同其他完全相同</li></ol><p><a href="https://mp.weixin.qq.com/s/dNOBwMPHKdccmeJFWzzTOg" target="_blank" rel="noopener">Spring @Import注解源码解析</a></p><ol><li>三种使用方式</li><li>加载时机</li><li>对不同使用方式的处理方式</li></ol><p><a href="https://mp.weixin.qq.com/s/FU3hznLFspCcHYJs-x8h2Q" target="_blank" rel="noopener">Spring事务源码解析（一)</a></p><ol><li>源码阅读环境的搭建</li><li><code>@EnableTransactionManagement</code>注解的原理解析</li></ol><p><a href="https://mp.weixin.qq.com/s/5tTrdl5GuD9WAyuHNUvW8w" target="_blank" rel="noopener">Spring事务源码解析（二）获取增强</a><br>读到这里的朋友希望您最好对AOP的源码有一定的了解</p><ol><li>增强的获取</li><li><code>@Transactional</code>注解属性的解析</li></ol><p><a href="https://mp.weixin.qq.com/s/H933x4Upa8Vgl1EkuTZBtQ" target="_blank" rel="noopener">Spring事务源码解析（三）</a></p><ol><li>创建事务信息(包含事务隔离级别的处理等)</li><li>调用执行链</li><li>异常回滚</li><li>清除事务信息</li><li>提交事务</li></ol><p><a href="https://mp.weixin.qq.com/s/V8iwW-rpaQsISiis7hF0aw" target="_blank" rel="noopener">SpringMVC源码解析（一）</a></p><ol><li>源码阅读环境的搭建</li><li>SpringBoot中SpringMVC自动配置原理</li><li><code>DispatcherServlet</code>的初始化逻辑</li><li>web容器的初始化</li></ol><p><a href="https://mp.weixin.qq.com/s/d7Ne8EI-e3VyGddEh9BvMA" target="_blank" rel="noopener">SpringMVC源码解析（二）</a></p><ol><li>获取对应的handler</li><li>获取对应的handlerAdapter</li><li>调用handle</li><li>执行拦截器</li><li>处理返回结果</li></ol><p>源码阅读环境</p><p>您可能注意到上方文章中包含了很多源码阅读环境的搭建，当真正自己要去阅读时搭建起来还是比较浪费时间的。所以我把这些工作都替您做好了，您可以直接访问下方链接获取<br><a href="https://github.com/shiyujun/spring-framework" target="_blank" rel="noopener">https://github.com/shiyujun/spring-framework</a></p><p>后续规划</p><ol><li>Spring常用扩展点的应用场景</li><li>SpringBoot源码解析</li><li>SpringCloud常用组件源码解析</li><li>MyBatis、druid源码解析</li><li>阿里开源Nacos、Sentinel、Seata源码解析</li><li>K8S、Istio源码解析</li><li>等等</li></ol><p>交流群<br>为了方便大家的交流学习，特意搞了个技术交流群，有兴趣的同学可以扫描下方二维码进群。如二维码过期可在公众号添加小编的微信发送暗号进群<br><img src="/2019/09/05/pring源码解析系列汇总/1.jpg" alt="1"></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC源码解析(二)</title>
      <link href="/2019/09/05/SpringMVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C)/"/>
      <url>/2019/09/05/SpringMVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，读完本篇文章需要很长很长时间</p></blockquote><p>在上篇文章<a href="https://mp.weixin.qq.com/s/V8iwW-rpaQsISiis7hF0aw" target="_blank" rel="noopener">SpringMVC源码解析（一）</a>中，我们搭建了一个SpringBoot的启动demo，分析了SpringBoot中SpringMVC的自动配置原理以及<code>DispatcherServlet</code>的初始化流程。本篇文章就分析一次请求在SpringMVC中的处理流程</p><p>在日常开发中，我们最常用的请求方式大概就是Get和Post了，Tomcat或者Jetty等web服务器在接受到请求后会调用到<code>DispatcherServlet</code>对应的方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   processRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   processRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其实最终都是调用的同一个方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> processRequest(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">//记录开始时间</span></span><br><span class="line">   <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">   Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//记录当前线程的信息</span></span><br><span class="line">   LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">   LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">   RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">   ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">   WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">   asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">   initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//核心处理，往下看</span></span><br><span class="line">      doService(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">      failureCause = ex;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      failureCause = ex;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">finally</span> &#123;<span class="comment">//清除线程绑定信息</span></span><br><span class="line">      resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">      <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">         requestAttributes.requestCompleted();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//发送事件通知</span></span><br><span class="line">      publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> doService(HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="keyword">String</span> resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class="string">" resumed"</span> : <span class="string">""</span>;</span><br><span class="line">      logger.debug(<span class="string">"DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span> + resumed +</span><br><span class="line">            <span class="string">" processing "</span> + request.getMethod() + <span class="string">" request for ["</span> + getRequestUri(request) + <span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">   <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">   Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">      attributesSnapshot = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line">      Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">      <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">         <span class="keyword">String</span> attrName = (<span class="keyword">String</span>) attrNames.nextElement();</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">            attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">   request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">   request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">   request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">   request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">      FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">      <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">         request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">      &#125;</span><br><span class="line">      request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">      request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      doDispatch(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">         <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">         <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">            restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方的大段代码都是做的一些准备工作，具体的逻辑接着往下看吧，这个核心流程都在下面这个方法里了</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> void doDispatch(HttpServletRequest request, HttpServletResponse response) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">Exception</span> dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//如果是文件上传请求则进行特殊处理</span></span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 1.获取对应的handler</span></span><br><span class="line">    mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//如果没有获取到对应的handler则往response中写入错误信息</span></span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取对应的handlerAdapter</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理last-modified情况</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line"><span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line"><span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用handle</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果函数调用没有返回视图则使用默认的</span></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line">    <span class="comment">//执行拦截器</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//4. 处理返回结果</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">Exception</span> ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="1-获取handler">1. 获取handler</span></h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">//遍历所有的handlerMapping，这里的handlemapping就是初始化阶段构造的三个</span></span><br><span class="line"><span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(</span><br><span class="line"><span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//这里调用具体的handler，哪个handler能够处理就直接返回</span></span><br><span class="line">HandlerExecutionChain <span class="keyword">handler</span> = hm.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">handler</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">handler</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1. 调用具体的实现去获取handler</span></span><br><span class="line">   Object <span class="keyword">handler</span> = getHandlerInternal(request);</span><br><span class="line"><span class="comment">//如果为空使用默认的</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">handler</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">handler</span> = getDefaultHandler();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//没有默认的返回空</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">handler</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 尝试通过BeanName去获取handler</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">handler</span> <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">      String handlerName = (String) <span class="keyword">handler</span>;</span><br><span class="line">      <span class="keyword">handler</span> = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//2. 获取handler执行链</span></span><br><span class="line">   HandlerExecutionChain executionChain = getHandlerExecutionChain(<span class="keyword">handler</span>, request);</span><br><span class="line">   <span class="keyword">if</span> (CorsUtils.isCorsRequest(request)) &#123;</span><br><span class="line">      CorsConfiguration globalConfig = <span class="keyword">this</span>.globalCorsConfigSource.getCorsConfiguration(request);</span><br><span class="line">      CorsConfiguration handlerConfig = getCorsConfiguration(<span class="keyword">handler</span>, request);</span><br><span class="line">      CorsConfiguration config = (globalConfig != <span class="keyword">null</span> ? globalConfig.combine(handlerConfig) : handlerConfig);</span><br><span class="line">      executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> executionChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="1-获取具体的handler">1. 获取具体的handler</span></h6><p>这里以<code>AbstractUrlHandlerMapping</code>为例解读一下，顾明思议，这个类是根据请求url获取响应的handler的</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> getHandlerInternal(HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//截取url</span></span><br><span class="line">   <span class="keyword">String</span> lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line"><span class="comment">//根据url寻找handler</span></span><br><span class="line">   <span class="keyword">Object</span> handler = lookupHandler(lookupPath, request);</span><br><span class="line">   <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果请求路径为/则使用RootHandler</span></span><br><span class="line">      <span class="keyword">Object</span> rawHandler = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"/"</span>.equals(lookupPath)) &#123;</span><br><span class="line">         rawHandler = getRootHandler();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rawHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//使用默认</span></span><br><span class="line">         rawHandler = getDefaultHandler();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rawHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 根据beanName尝试获取Handler</span></span><br><span class="line">         <span class="keyword">if</span> (rawHandler <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">            <span class="keyword">String</span> handlerName = (<span class="keyword">String</span>) rawHandler;</span><br><span class="line">            rawHandler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">         &#125;<span class="comment">//校验</span></span><br><span class="line">         validateHandler(rawHandler, request);</span><br><span class="line">         handler = buildPathExposingHandler(rawHandler, lookupPath, lookupPath, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (handler != <span class="keyword">null</span> &amp;&amp; logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Mapping ["</span> + lookupPath + <span class="string">"] to "</span> + handler);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (handler == <span class="keyword">null</span> &amp;&amp; logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"No handler mapping found for ["</span> + lookupPath + <span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> lookupHandler(<span class="keyword">String</span> urlPath, HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">// 直接根据url匹配</span></span><br><span class="line">   <span class="keyword">Object</span> handler = <span class="keyword">this</span>.handlerMap.<span class="built_in">get</span>(urlPath);</span><br><span class="line">   <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Bean name or resolved handler?</span></span><br><span class="line">      <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">         <span class="keyword">String</span> handlerName = (<span class="keyword">String</span>) handler;</span><br><span class="line">         handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">      &#125;</span><br><span class="line">      validateHandler(handler, request);</span><br><span class="line"><span class="comment">//封装执行链</span></span><br><span class="line">      <span class="keyword">return</span> buildPathExposingHandler(handler, urlPath, urlPath, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 正则匹配</span></span><br><span class="line">   List&lt;<span class="keyword">String</span>&gt; matchingPatterns = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">String</span> registeredPattern : <span class="keyword">this</span>.handlerMap.keySet()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (getPathMatcher().<span class="built_in">match</span>(registeredPattern, urlPath)) &#123;</span><br><span class="line">         matchingPatterns.<span class="built_in">add</span>(registeredPattern);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (useTrailingSlashMatch()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!registeredPattern.endsWith(<span class="string">"/"</span>) &amp;&amp; getPathMatcher().<span class="built_in">match</span>(registeredPattern + <span class="string">"/"</span>, urlPath)) &#123;</span><br><span class="line">            matchingPatterns.<span class="built_in">add</span>(registeredPattern +<span class="string">"/"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">String</span> bestMatch = <span class="keyword">null</span>;</span><br><span class="line">   Comparator&lt;<span class="keyword">String</span>&gt; patternComparator = getPathMatcher().getPatternComparator(urlPath);</span><br><span class="line">   <span class="keyword">if</span> (!matchingPatterns.isEmpty()) &#123;</span><br><span class="line">      matchingPatterns.<span class="built_in">sort</span>(patternComparator);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Matching patterns for request ["</span> + urlPath + <span class="string">"] are "</span> + matchingPatterns);</span><br><span class="line">      &#125;</span><br><span class="line">      bestMatch = matchingPatterns.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (bestMatch != <span class="keyword">null</span>) &#123;</span><br><span class="line">      handler = <span class="keyword">this</span>.handlerMap.<span class="built_in">get</span>(bestMatch);</span><br><span class="line">      <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (bestMatch.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            handler = <span class="keyword">this</span>.handlerMap.<span class="built_in">get</span>(bestMatch.substring(<span class="number">0</span>, bestMatch.length() - <span class="number">1</span>));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                  <span class="string">"Could not find handler for best pattern match ["</span> + bestMatch + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Bean name or resolved handler?</span></span><br><span class="line">      <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">         <span class="keyword">String</span> handlerName = (<span class="keyword">String</span>) handler;</span><br><span class="line">         handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">      &#125;</span><br><span class="line">      validateHandler(handler, request);</span><br><span class="line">      <span class="keyword">String</span> pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// There might be multiple 'best patterns', let's make sure we have the correct URI template variables</span></span><br><span class="line">      <span class="comment">// for all of them</span></span><br><span class="line">      Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; uriTemplateVariables = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">String</span> matchingPattern : matchingPatterns) &#123;</span><br><span class="line">         <span class="keyword">if</span> (patternComparator.compare(bestMatch, matchingPattern) == <span class="number">0</span>) &#123;</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath);</span><br><span class="line">            Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; decodedVars = getUrlPathHelper().decodePathVariables(request, vars);</span><br><span class="line">            uriTemplateVariables.putAll(decodedVars);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"URI Template variables for request ["</span> + urlPath + <span class="string">"] are "</span> + uriTemplateVariables);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// No handler found...</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="2-封装执行链">2. 封装执行链</span></h6><p>当获取到相应的handler后，查看是否存在拦截器，如果存在的话则加入执行链中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="built_in">Object</span> buildPathExposingHandler(<span class="built_in">Object</span> rawHandler, <span class="built_in">String</span> bestMatchingPattern,</span><br><span class="line">      <span class="built_in">String</span> pathWithinMapping, <span class="meta">@Nullable</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; uriTemplateVariables) &#123;</span><br><span class="line"></span><br><span class="line">   HandlerExecutionChain chain = <span class="keyword">new</span> HandlerExecutionChain(rawHandler);</span><br><span class="line">   chain.addInterceptor(<span class="keyword">new</span> PathExposingHandlerInterceptor(bestMatchingPattern, pathWithinMapping));</span><br><span class="line">   <span class="keyword">if</span> (!CollectionUtils.isEmpty(uriTemplateVariables)) &#123;</span><br><span class="line">      chain.addInterceptor(<span class="keyword">new</span> UriTemplateVariablesHandlerInterceptor(uriTemplateVariables));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="2-获取handleradpter">2. 获取handlerAdpter</span></h5><p>根据handler获取匹配的handlerAdpter</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//不同的handlerAdapter的判断方法不同</span></span><br><span class="line">         <span class="keyword">if</span> (ha.supports(<span class="keyword">handler</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> ha;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + <span class="keyword">handler</span> +</span><br><span class="line">         <span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br><span class="line">以SimpleControllerHandlerAdapter为例，判断是否实现Controller接口</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object <span class="keyword">handler</span>)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (<span class="keyword">handler</span> <span class="keyword">instanceof</span> Controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="3-执行请求">3. 执行请求</span></h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span><br><span class="line">      <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> ((Controller) <span class="keyword">handler</span>).handleRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">      <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (HttpMethod.OPTIONS.matches(request.getMethod())) &#123;</span><br><span class="line">      response.setHeader(<span class="string">"Allow"</span>, getAllowHeader());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Delegate to WebContentGenerator for checking and preparing.</span></span><br><span class="line">   checkRequest(request);</span><br><span class="line">   prepareResponse(response);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果需要同步session</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.synchronizeOnSession) &#123;</span><br><span class="line">      HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">         Object mutex = WebUtils.getSessionMutex(session);</span><br><span class="line">         <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">handleRequestInternal</span><span class="params">(request, response)</span></span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">调用Controller方法</span><br><span class="line">   <span class="function"><span class="keyword">return</span> <span class="title">handleRequestInternal</span><span class="params">(request, response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="4处理返回结果">4.处理返回结果</span></h5><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void processDispatchResult(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">      @Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,</span><br><span class="line">      @Nullable <span class="keyword">Exception</span> <span class="keyword">exception</span>) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//是否包含异常信息</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">exception</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">exception</span> <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">         logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, <span class="keyword">exception</span>);</span><br><span class="line">         mv = ((ModelAndViewDefiningException) <span class="keyword">exception</span>).getModelAndView();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;<span class="comment">//异常视图处理</span></span><br><span class="line">         Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">         mv = processHandlerException(request, response, handler, <span class="keyword">exception</span>);</span><br><span class="line">         errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">         <span class="comment">// 页面跳转处理</span></span><br><span class="line">render(mv, request, response);</span><br><span class="line"><span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</span><br><span class="line"><span class="string">"': assuming HandlerAdapter completed request handling"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">   <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br></pre></td></tr></table></figure><p>页面跳转的逻辑</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">protected void render(ModelAndView <span class="keyword">mv</span>, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">   <span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">   Locale locale =</span><br><span class="line">         (this.localeResolver != null ? this.localeResolver.resolveLocale(request) : request.getLocale())<span class="comment">;</span></span><br><span class="line">   response.setLocale(locale)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">View</span> <span class="keyword">view</span><span class="comment">;</span></span><br><span class="line">   String viewName = <span class="keyword">mv</span>.getViewName()<span class="comment">;</span></span><br><span class="line">   <span class="keyword">if</span> (viewName != null) &#123;</span><br><span class="line">      <span class="comment">//1.解析视图名</span></span><br><span class="line">      <span class="keyword">view</span> = resolveViewName(viewName, <span class="keyword">mv</span>.getModelInternal(), locale, request)<span class="comment">;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">view</span> == null) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + <span class="keyword">mv</span>.getViewName() +</span><br><span class="line">               <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">      <span class="keyword">view</span> = <span class="keyword">mv</span>.getView()<span class="comment">;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">view</span> == null) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + <span class="keyword">mv</span> + <span class="string">"] neither contains a view name nor a "</span> +</span><br><span class="line">               <span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Rendering view ["</span> + <span class="keyword">view</span> + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">mv</span>.getStatus() != null) &#123;</span><br><span class="line">         response.setStatus(<span class="keyword">mv</span>.getStatus().value())<span class="comment">;</span></span><br><span class="line">      &#125;<span class="comment">//2.跳转</span></span><br><span class="line">      <span class="keyword">view</span>.render(<span class="keyword">mv</span>.getModelInternal(), request, response)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Error rendering view ["</span> + <span class="keyword">view</span> + <span class="string">"] in DispatcherServlet with name '"</span> +</span><br><span class="line">               getServletName() + <span class="string">"'"</span>, ex)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> ex<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="解析视图名称">解析视图名称</span></h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> View resolveViewName(String viewName, <span class="meta">@Nullable</span> Map&lt;String, Object&gt; model,</span><br><span class="line">      Locale locale, HttpServletRequest request) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">         View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">         <span class="keyword">if</span> (view != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="页面跳转">页面跳转</span></h6><p>具体的跳转逻辑是根据当前使用的渲染引擎决定的，比如html、jsp、Thymeleaf等，这里简单 列举一个Thymeleaf的逻辑吧</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> render(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">       <span class="keyword">this</span>.renderFragment(<span class="keyword">this</span>.markupSelectors, model, request, response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   protected <span class="keyword">void</span> renderFragment(<span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; markupSelectorsToRender, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">       ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">       <span class="built_in">String</span> viewTemplateName = <span class="keyword">this</span>.getTemplateName();</span><br><span class="line">       ISpringTemplateEngine viewTemplateEngine = <span class="keyword">this</span>.getTemplateEngine();</span><br><span class="line">       <span class="keyword">if</span> (viewTemplateName == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'templateName' is required"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getLocale() == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'locale' is required"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewTemplateEngine == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'templateEngine' is required"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; mergedModel = <span class="keyword">new</span> HashMap(<span class="number">30</span>);</span><br><span class="line">           <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; templateStaticVariables = <span class="keyword">this</span>.getStaticVariables();</span><br><span class="line">           <span class="keyword">if</span> (templateStaticVariables != <span class="keyword">null</span>) &#123;</span><br><span class="line">               mergedModel.putAll(templateStaticVariables);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (pathVariablesSelector != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; pathVars = (<span class="built_in">Map</span>)request.getAttribute(pathVariablesSelector);</span><br><span class="line">               <span class="keyword">if</span> (pathVars != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mergedModel.putAll(pathVars);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (model != <span class="keyword">null</span>) &#123;</span><br><span class="line">               mergedModel.putAll(model);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           ApplicationContext applicationContext = <span class="keyword">this</span>.getApplicationContext();</span><br><span class="line">           RequestContext requestContext = <span class="keyword">new</span> RequestContext(request, response, <span class="keyword">this</span>.getServletContext(), mergedModel);</span><br><span class="line">           SpringWebMvcThymeleafRequestContext thymeleafRequestContext = <span class="keyword">new</span> SpringWebMvcThymeleafRequestContext(requestContext, request);</span><br><span class="line">           addRequestContextAsVariable(mergedModel, <span class="string">"springRequestContext"</span>, requestContext);</span><br><span class="line">           addRequestContextAsVariable(mergedModel, <span class="string">"springMacroRequestContext"</span>, requestContext);</span><br><span class="line">           mergedModel.put(<span class="string">"thymeleafRequestContext"</span>, thymeleafRequestContext);</span><br><span class="line">           ConversionService conversionService = (ConversionService)request.getAttribute(ConversionService.<span class="keyword">class</span>.getName());</span><br><span class="line">           ThymeleafEvaluationContext evaluationContext = <span class="keyword">new</span> ThymeleafEvaluationContext(applicationContext, conversionService);</span><br><span class="line">           mergedModel.put(<span class="string">"thymeleaf::EvaluationContext"</span>, evaluationContext);</span><br><span class="line">           IEngineConfiguration configuration = viewTemplateEngine.getConfiguration();</span><br><span class="line">           WebExpressionContext context = <span class="keyword">new</span> WebExpressionContext(configuration, request, response, servletContext, <span class="keyword">this</span>.getLocale(), mergedModel);</span><br><span class="line">           <span class="built_in">String</span> templateName;</span><br><span class="line">           <span class="built_in">Set</span> markupSelectors;</span><br><span class="line">           <span class="keyword">if</span> (!viewTemplateName.contains(<span class="string">"::"</span>)) &#123;</span><br><span class="line">               templateName = viewTemplateName;</span><br><span class="line">               markupSelectors = <span class="keyword">null</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               IStandardExpressionParser parser = StandardExpressions.getExpressionParser(configuration);</span><br><span class="line"></span><br><span class="line">               FragmentExpression fragmentExpression;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   fragmentExpression = (FragmentExpression)parser.parseExpression(context, <span class="string">"~&#123;"</span> + viewTemplateName + <span class="string">"&#125;"</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (TemplateProcessingException var24) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid template name specification: '"</span> + viewTemplateName + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               ExecutedFragmentExpression fragment = FragmentExpression.createExecutedFragmentExpression(context, fragmentExpression);</span><br><span class="line">               templateName = FragmentExpression.resolveTemplateName(fragment);</span><br><span class="line">               markupSelectors = FragmentExpression.resolveFragments(fragment);</span><br><span class="line">               <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; nameFragmentParameters = fragment.getFragmentParameters();</span><br><span class="line">               <span class="keyword">if</span> (nameFragmentParameters != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (fragment.hasSyntheticParameters()) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parameters in a view specification must be named (non-synthetic): '"</span> + viewTemplateName + <span class="string">"'"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   context.setVariables(nameFragmentParameters);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">String</span> templateContentType = <span class="keyword">this</span>.getContentType();</span><br><span class="line">           Locale templateLocale = <span class="keyword">this</span>.getLocale();</span><br><span class="line">           <span class="built_in">String</span> templateCharacterEncoding = <span class="keyword">this</span>.getCharacterEncoding();</span><br><span class="line">           <span class="built_in">Set</span> processMarkupSelectors;</span><br><span class="line">           <span class="keyword">if</span> (markupSelectors != <span class="keyword">null</span> &amp;&amp; markupSelectors.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (markupSelectorsToRender != <span class="keyword">null</span> &amp;&amp; markupSelectorsToRender.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"A markup selector has been specified ("</span> + Arrays.asList(markupSelectors) + <span class="string">") for a view that was already being executed as a fragment ("</span> + Arrays.asList(markupSelectorsToRender) + <span class="string">"). Only one fragment selection is allowed."</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               processMarkupSelectors = markupSelectors;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (markupSelectorsToRender != <span class="keyword">null</span> &amp;&amp; markupSelectorsToRender.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               processMarkupSelectors = markupSelectorsToRender;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               processMarkupSelectors = <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           response.setLocale(templateLocale);</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">this</span>.getForceContentType()) &#123;</span><br><span class="line">               <span class="built_in">String</span> computedContentType = SpringContentTypeUtils.computeViewContentType(request, templateContentType != <span class="keyword">null</span> ? templateContentType : <span class="string">"text/html;charset=ISO-8859-1"</span>, templateCharacterEncoding != <span class="keyword">null</span> ? Charset.forName(templateCharacterEncoding) : <span class="keyword">null</span>);</span><br><span class="line">               response.setContentType(computedContentType);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (templateContentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   response.setContentType(templateContentType);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   response.setContentType(<span class="string">"text/html;charset=ISO-8859-1"</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (templateCharacterEncoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   response.setCharacterEncoding(templateCharacterEncoding);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           viewTemplateEngine.process(templateName, processMarkupSelectors, context, response.getWriter());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC源码解析(一)</title>
      <link href="/2019/09/03/SpringMVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80/"/>
      <url>/2019/09/03/SpringMVC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，读完本篇文章需要很长很长时间</p></blockquote><h4><span id="源码阅读环境搭建">源码阅读环境搭建</span></h4><p>为了简单起见，再一个就是现在这个年代也没有啥项目使用JSP了。所以本次分析使用SpringBoot结合thymeleaf来搞</p><p>首先pom文件依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.prefix</span>=classpath:/templates/</span><br><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.suffix</span>=.html</span><br><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.mode</span>=LEGACYHTML5</span><br><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></span><br><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.content-type</span>=text/html</span><br><span class="line">spring<span class="selector-class">.thymeleaf</span><span class="selector-class">.cache</span>=false</span><br></pre></td></tr></table></figure><p>test.html</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'用户名：'+$</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string">+',年龄：'+$</span></span></span><span class="template-variable">&#123;age&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCDemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/testMVC"</span>,method = RequestMethod.GET )</span></span><br><span class="line">    <span class="keyword">public</span> String testMVC(Model model)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"张三"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"age"</span>,<span class="string">"18"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动demo</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages=<span class="string">"cn.shiyujun.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVCDemo</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main (String args[])&#123;</span><br><span class="line">        SpringApplication.run(MVCDemo.<span class="keyword">class</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此Deno工程搭建完毕，有需要源码的同学可以从下方地址获取<br><a href="https://github.com/shiyujun/spring-framework" target="_blank" rel="noopener">https://github.com/shiyujun/spring-framework</a></p><h4><span id="源码分析">源码分析</span></h4><h5><span id="springmvc自动配置">SpringMVC自动配置</span></h5><p>我们知道在SpringBoot中使用SpringMVC的时候是不需要像传统Spring中配置web.xml和配置文件等等的。那么大家知道这是为什么吗</p><p>答案就在这个类<code>WebMvcAutoConfiguration</code>里面</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.<span class="keyword">class</span>, DispatcherServlet.<span class="keyword">class</span>, WebMvcConfigurer.<span class="keyword">class</span> &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">10</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.<span class="keyword">class</span>,</span><br><span class="line">ValidationAutoConfiguration.<span class="keyword">class</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_LOCATIONS = &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(HiddenHttpMethodFilter.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(HttpPutFormContentFilter.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc.formcontent.putfilter"</span>, name = <span class="string">"enabled"</span>, matchIfMissing = <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">public</span> OrderedHttpPutFormContentFilter httpPutFormContentFilter() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedHttpPutFormContentFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(EnableWebMvcConfiguration.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; WebMvcProperties.<span class="keyword">class</span>, ResourceProperties.<span class="keyword">class</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ResourceLoaderAware</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> InternalResourceViewResolver defaultViewResolver() &#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="keyword">this</span>.mvcProperties.getView().getPrefix());</span><br><span class="line">resolver.setSuffix(<span class="keyword">this</span>.mvcProperties.getView().getSuffix());</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(View.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> BeanNameViewResolver beanNameViewResolver() &#123;</span><br><span class="line">BeanNameViewResolver resolver = <span class="keyword">new</span> BeanNameViewResolver();</span><br><span class="line">resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ViewResolver.<span class="keyword">class</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) &#123;</span><br><span class="line">ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">resolver.setContentNegotiationManager(</span><br><span class="line">beanFactory.getBean(ContentNegotiationManager.<span class="keyword">class</span>));</span><br><span class="line"><span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span></span><br><span class="line"><span class="comment">// a view so it should have a high precedence</span></span><br><span class="line">resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="keyword">public</span> LocaleResolver localeResolver() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">&#125;</span><br><span class="line">AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line"><span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping welcomePageHandlerMapping(</span><br><span class="line">ApplicationContext applicationContext) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext),</span><br><span class="line">applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123; RequestContextListener.<span class="keyword">class</span>,</span><br><span class="line">RequestContextFilter.<span class="keyword">class</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RequestContextFilter requestContextFilter() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedRequestContextFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleUrlHandlerMapping faviconHandlerMapping() &#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ResourceHttpRequestHandler faviconRequestHandler() &#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">requestHandler.setLocations(resolveFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration equivalent to &#123;<span class="doctag">@code</span> <span class="doctag">@EnableWebMvc</span>&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RequestMappingHandlerAdapter requestMappingHandlerAdapter() &#123;</span><br><span class="line">RequestMappingHandlerAdapter adapter = <span class="keyword">super</span>.requestMappingHandlerAdapter();</span><br><span class="line">adapter.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.mvcProperties == <span class="literal">null</span></span><br><span class="line">|| <span class="keyword">this</span>.mvcProperties.isIgnoreDefaultModelOnRedirect());</span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RequestMappingHandlerMapping requestMappingHandlerMapping() &#123;</span><br><span class="line"><span class="comment">// Must be @Primary for MvcUriComponentsBuilder to work</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.requestMappingHandlerMapping();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> FormattingConversionService mvcConversionService() &#123;</span><br><span class="line">WebConversionService conversionService = <span class="keyword">new</span> WebConversionService(</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">addFormatters(conversionService);</span><br><span class="line"><span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Validator mvcValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> (!ClassUtils.isPresent(<span class="string">"javax.validation.Validator"</span>,</span><br><span class="line">getClass().getClassLoader())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.mvcValidator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ValidatorAdapter.get(getApplicationContext(), getValidator());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ContentNegotiationManager mvcContentNegotiationManager() &#123;</span><br><span class="line">ContentNegotiationManager manager = <span class="keyword">super</span>.mvcContentNegotiationManager();</span><br><span class="line">List&lt;ContentNegotiationStrategy&gt; strategies = manager.getStrategies();</span><br><span class="line">ListIterator&lt;ContentNegotiationStrategy&gt; iterator = strategies.listIterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">ContentNegotiationStrategy strategy = iterator.next();</span><br><span class="line"><span class="keyword">if</span> (strategy <span class="keyword">instanceof</span> PathExtensionContentNegotiationStrategy) &#123;</span><br><span class="line">iterator.set(<span class="keyword">new</span> OptionalPathExtensionContentNegotiationStrategy(</span><br><span class="line">strategy));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnEnabledResourceChain</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceChainCustomizerConfiguration</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResourceChainResourceHandlerRegistrationCustomizer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看这个类，你就会发现这些自动注入的一些类都是之前需要我们在xml文件中配置的，只不过是SpringBoot帮我们做了这个操作。只有当我们需要自定义一些东西的才有必要去关心这些配置，平常使用的时候拿来就用即可。这就是大名鼎鼎的约定大于配置</p><h5><span id="初始化dispatcherservlet">初始化<code>DispatcherServlet</code></span></h5><p><code>DispatcherServlet</code>是一个实现了<code>Servlet</code>接口的类，<code>Servlet</code>的初始化阶段会调用它的<code>init()</code>方法，而<code>DispatcherServlet</code>的方法是继承自父类<code>HttpServletBean</code>的</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Initializing servlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//处理init-param参数，但是SpringBoot中默认是没有的</span></span><br><span class="line">PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</span><br><span class="line"><span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</span><br><span class="line">ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">initBeanWrapper(bw);</span><br><span class="line">bw.setPropertyValues(pvs, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">logger.<span class="keyword">error</span>(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化Servlet，往下看</span></span><br><span class="line">initServletBean();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Servlet '"</span> + getServletName() + <span class="string">"' configured successfully"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//初始化web容器</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">  <span class="comment">//扩展点</span></span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.<span class="keyword">error</span>(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.<span class="keyword">error</span>(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line"><span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"><span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</span><br><span class="line">elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化web容器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext initWebApplicationContext() &#123;</span><br><span class="line">  <span class="comment">//获取AnnotationConfigServletWebServerApplicationContext类型的web容器</span></span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">WebApplicationContext wac = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line"><span class="keyword">if</span> (wac instanceof ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"><span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">cwac.setParent(rootContext);</span><br><span class="line">&#125;</span><br><span class="line">configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">wac = findWebApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">wac = createWebApplicationContext(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line"><span class="comment">// 刷新应用上下文，这里是重点，接着往下看</span></span><br><span class="line">onRefresh(wac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line"><span class="comment">// 推送事件通知</span></span><br><span class="line">String attrName = getServletContextAttributeName();</span><br><span class="line">getServletContext().setAttribute(attrName, wac);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.debug(<span class="string">"Published WebApplicationContext of servlet '"</span> + getServletName() +</span><br><span class="line"><span class="string">"' as ServletContext attribute with name ["</span> + attrName + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面会看到一些熟悉的东西</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">protected void onRefresh(ApplicationContext <span class="built_in">context</span>) &#123;</span><br><span class="line">initStrategies(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">protected void initStrategies(ApplicationContext <span class="built_in">context</span>) &#123;</span><br><span class="line">initMultipartResolver(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initLocaleResolver(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initThemeResolver(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initHandlerMappings(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initHandlerAdapters(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initHandlerExceptionResolvers(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initRequestToViewNameTranslator(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initViewResolvers(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">initFlashMapManager(<span class="built_in">context</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方这一块代码都是一些常用组件的初始化，初始化的逻辑都比较简单，下面随意挑取2个看一下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void initMultipartResolver(ApplicationContext context) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.multipartResolver = context.getBean(MULTIPART_RESOLVER_BEAN_NAME, MultipartResolver.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Using MultipartResolver ["</span> + <span class="keyword">this</span>.multipartResolver + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Default is no multipart resolver.</span></span><br><span class="line"><span class="keyword">this</span>.multipartResolver = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Unable to locate MultipartResolver with name '"</span> + MULTIPART_RESOLVER_BEAN_NAME +</span><br><span class="line"><span class="string">"': no multipart request handling provided"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> void initHandlerMappings(ApplicationContext context) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line"><span class="comment">// 加载所有实现HandlerMapping接口的bean</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.<span class="keyword">class</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = new ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// 排序，Spring处理请求就是根据这个排序的结果进行处理，如果当前handlerMapping不可以处理则抛给下一个</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，<code>DispatcherServlet</code>的初始化就完成了</p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务源码解析（三）</title>
      <link href="/2019/09/02/pring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/09/02/pring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在之前的文章<a href="https://mp.weixin.qq.com/s/5tTrdl5GuD9WAyuHNUvW8w" target="_blank" rel="noopener">Spring事务源码解析（二）获取增强</a>中，我们分析了Spring事务的实现是基于AOP实现的，还分析了增强<code>BeanFactoryTransactionAttributeSourceAdvisor</code>中的相关内容。而这个增强中包含一个拦截器<code>TransactionInterceptor</code>，代理的实现就是基于这个拦截器<br>现在来看一下这个拦截器的代码</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 往下看</span></span><br><span class="line"><span class="keyword">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::<span class="keyword">proceed</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> Object invokeWithinTransaction(Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass,</span><br><span class="line"><span class="keyword">final</span> InvocationCallback invocation) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">  <span class="comment">// 获取事务属性</span></span><br><span class="line"><span class="keyword">final</span> TransactionAttribute txAttr = (tas != <span class="keyword">null</span> ? tas.getTransactionAttribute(method, targetClass) : <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">  <span class="comment">//方法标识，例如usersService.testTransaction</span></span><br><span class="line"><span class="keyword">final</span> String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class="line"><span class="comment">//声明式事务</span></span><br><span class="line"><span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line"><span class="comment">// 1.创建TransactionInfo</span></span><br><span class="line">TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">Object retVal = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 2. 调用执行链</span></span><br><span class="line">retVal = invocation.proceedWithInvocation();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// 3. 异常回滚</span></span><br><span class="line">completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">//4. 清除事务信息</span></span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//5 提交事务</span></span><br><span class="line">commitTransactionAfterReturning(txInfo);</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//编程式事务处理</span></span><br><span class="line"><span class="keyword">final</span> ThrowableHolder throwableHolder = <span class="keyword">new</span> ThrowableHolder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -&gt; &#123;</span><br><span class="line">TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> invocation.<span class="title">proceedWithInvocation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line"><span class="keyword">throw</span> (RuntimeException) ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ThrowableHolderException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">throwableHolder.throwable = ex;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupTransactionInfo(txInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> throwableHolder.throwable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ThrowableHolderException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.getCause();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class="line"><span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.<span class="keyword">error</span>(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">ex2.initApplicationException(throwableHolder.throwable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line"><span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.<span class="keyword">error</span>(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于咱们经常使用的就是声明式事务，所以接下来的解析也是基于声明式事务来的</p><h5><span id="创建事务">创建事务</span></h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> TransactionInfo createTransactionIfNecessary(<span class="meta">@Nullable</span> PlatformTransactionManager tm,</span><br><span class="line"><span class="meta">@Nullable</span> TransactionAttribute txAttr, <span class="keyword">final</span> String joinpointIdentification) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果事务没有指定名称则使用方法标识</span></span><br><span class="line"><span class="keyword">if</span> (txAttr != <span class="keyword">null</span> &amp;&amp; txAttr.getName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">txAttr = <span class="keyword">new</span> DelegatingTransactionAttribute(txAttr) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> joinpointIdentification;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TransactionStatus status = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (txAttr != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (tm != <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="comment">//1. 创建事务</span></span><br><span class="line">status = tm.getTransaction(txAttr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Skipping transactional joinpoint ["</span> + joinpointIdentification +</span><br><span class="line"><span class="string">"] because no transaction manager has been configured"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//2.构建事务信息</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">prepareTransactionInfo</span><span class="params">(tm, txAttr, joinpointIdentification, status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="1-获取事务">1. 获取事务</span></h6><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException &#123;</span><br><span class="line"><span class="comment">//1. 获取事务</span></span><br><span class="line">  Object transaction = doGetTransaction();</span><br><span class="line">boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (definition == <span class="literal">null</span>) &#123;</span><br><span class="line">definition = <span class="keyword">new</span> <span class="type">DefaultTransactionDefinition</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 判断当前线程是否存在事务</span></span><br><span class="line"><span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class="line">  <span class="comment">//存在事务则使用嵌套事务处理</span></span><br><span class="line"><span class="keyword">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务超时</span></span><br><span class="line"><span class="keyword">if</span> (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidTimeoutException</span>(<span class="string">"Invalid transaction timeout"</span>, definition.getTimeout());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前没有事务，但是事务的传播行为被定义为PROPAGATION_MANDATORY，则抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalTransactionStateException</span>(</span><br><span class="line"><span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</span><br><span class="line">&#125;<span class="comment">//当事务的传播行为需要新建事务时的处理</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">SuspendedResourcesHolder suspendedResources = suspend(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Creating new transaction with name ["</span> + definition.getName() + <span class="string">"]: "</span> + definition);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">boolean <span class="keyword">new</span><span class="type">Synchronization</span> = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = <span class="keyword">new</span><span class="type">TransactionStatus</span>(</span><br><span class="line">definition, transaction, <span class="literal">true</span>, <span class="keyword">new</span><span class="type">Synchronization</span>, debugEnabled, suspendedResources);</span><br><span class="line">  <span class="comment">//3. 准备事务</span></span><br><span class="line">  doBegin(transaction, definition);</span><br><span class="line">  <span class="comment">//4. 记录事务状态</span></span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">resume(<span class="literal">null</span>, suspendedResources);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 创建空事务</span></span><br><span class="line"><span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Custom isolation level specified but no actual transaction initiated; "</span> +</span><br><span class="line"><span class="string">"isolation level will effectively be ignored: "</span> + definition);</span><br><span class="line">&#125;</span><br><span class="line">boolean <span class="keyword">new</span><span class="type">Synchronization</span> = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line"><span class="keyword">return</span> prepareTransactionStatus(definition, <span class="literal">null</span>, <span class="literal">true</span>, <span class="keyword">new</span><span class="type">Synchronization</span>, debugEnabled, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个获取事务的过程还是包含多个步骤的，其中doBegin比较值得聊一聊</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">protected void doBegin(Object transaction, TransactionDefinition definition) &#123;</span><br><span class="line">DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">Connection con = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!txObject.hasConnectionHolder() ||</span><br><span class="line">txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">Connection <span class="keyword">new</span><span class="type">Con</span> = obtainDataSource().getConnection();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Acquired Connection ["</span> + <span class="keyword">new</span><span class="type">Con</span> + <span class="string">"] for JDBC transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line">txObject.setConnectionHolder(<span class="keyword">new</span> <span class="type">ConnectionHolder</span>(<span class="keyword">new</span><span class="type">Con</span>), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txObject.getConnectionHolder().setSynchronizedWithTransaction(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">//获取当前数据库连接</span></span><br><span class="line">con = txObject.getConnectionHolder().getConnection();</span><br><span class="line"><span class="comment">//获取隔离级别</span></span><br><span class="line">Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置自动提交</span></span><br><span class="line"><span class="keyword">if</span> (con.getAutoCommit()) &#123;</span><br><span class="line">txObject.setMustRestoreAutoCommit(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Switching JDBC Connection ["</span> + con + <span class="string">"] to manual commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">con.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prepareTransactionalConnection(con, definition);</span><br><span class="line">  <span class="comment">//设置当前线程存在事务的标示</span></span><br><span class="line">txObject.getConnectionHolder().setTransactionActive(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设置超时时间</span></span><br><span class="line">int timeout = determineTimeout(definition);</span><br><span class="line"><span class="keyword">if</span> (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将连接绑定到当前线程</span></span><br><span class="line"><span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">TransactionSynchronizationManager.bindResource(obtainDataSource(), txObject.getConnectionHolder());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">DataSourceUtils.releaseConnection(con, obtainDataSource());</span><br><span class="line">txObject.setConnectionHolder(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">CannotCreateTransactionException</span>(<span class="string">"Could not open JDBC Connection for transaction"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于记录事务状态这里先不说，先看一下已存在的事务是如何处理的</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TransactionStatus handleExistingTransaction(</span><br><span class="line">TransactionDefinition definition, Object transaction, boolean debugEnabled)</span><br><span class="line">throws TransactionException &#123;</span><br><span class="line"><span class="comment">//判断传播行为是否需要存在事务</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalTransactionStateException</span>(</span><br><span class="line"><span class="string">"Existing transaction found for transaction marked with propagation 'never'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不开启事务</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Suspending current transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Object suspendedResources = suspend(transaction);</span><br><span class="line">boolean <span class="keyword">new</span><span class="type">Synchronization</span> = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line"><span class="keyword">return</span> prepareTransactionStatus(</span><br><span class="line">definition, <span class="literal">null</span>, <span class="literal">false</span>, <span class="keyword">new</span><span class="type">Synchronization</span>, debugEnabled, suspendedResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总是新建事务</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Suspending current transaction, creating new transaction with name ["</span> +</span><br><span class="line">definition.getName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">SuspendedResourcesHolder suspendedResources = suspend(transaction);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">boolean <span class="keyword">new</span><span class="type">Synchronization</span> = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = <span class="keyword">new</span><span class="type">TransactionStatus</span>(</span><br><span class="line">definition, transaction, <span class="literal">true</span>, <span class="keyword">new</span><span class="type">Synchronization</span>, debugEnabled, suspendedResources);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error beginEx) &#123;</span><br><span class="line">resumeAfterBeginException(transaction, suspendedResources, beginEx);</span><br><span class="line"><span class="keyword">throw</span> beginEx;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//嵌套事务</span></span><br><span class="line"><span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isNestedTransactionAllowed()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">NestedTransactionNotSupportedException</span>(</span><br><span class="line"><span class="string">"Transaction manager does not allow nested transactions by default - "</span> +</span><br><span class="line"><span class="string">"specify 'nestedTransactionAllowed' property with value 'true'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Creating nested transaction with name ["</span> + definition.getName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (useSavepointForNestedTransaction()) &#123;</span><br><span class="line"><span class="comment">// Create savepoint within existing Spring-managed transaction,</span></span><br><span class="line"><span class="comment">// through the SavepointManager API implemented by TransactionStatus.</span></span><br><span class="line"><span class="comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span></span><br><span class="line">DefaultTransactionStatus status =</span><br><span class="line">prepareTransactionStatus(definition, transaction, <span class="literal">false</span>, <span class="literal">false</span>, debugEnabled, <span class="literal">null</span>);</span><br><span class="line">status.createAndHoldSavepoint();</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Nested transaction through nested begin and commit/rollback calls.</span></span><br><span class="line"><span class="comment">// Usually only for JTA: Spring synchronization might get activated here</span></span><br><span class="line"><span class="comment">// in case of a pre-existing JTA transaction.</span></span><br><span class="line">boolean <span class="keyword">new</span><span class="type">Synchronization</span> = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">DefaultTransactionStatus status = <span class="keyword">new</span><span class="type">TransactionStatus</span>(</span><br><span class="line">definition, transaction, <span class="literal">true</span>, <span class="keyword">new</span><span class="type">Synchronization</span>, debugEnabled, <span class="literal">null</span>);</span><br><span class="line">doBegin(transaction, definition);</span><br><span class="line">prepareSynchronization(status, definition);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span></span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Participating in existing transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isValidateExistingTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) &#123;</span><br><span class="line">Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();</span><br><span class="line"><span class="keyword">if</span> (currentIsolationLevel == <span class="literal">null</span> || currentIsolationLevel != definition.getIsolationLevel()) &#123;</span><br><span class="line">Constants isoConstants = DefaultTransactionDefinition.constants;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalTransactionStateException</span>(<span class="string">"Participating transaction with definition ["</span> +</span><br><span class="line">definition + <span class="string">"] specifies isolation level which is incompatible with existing transaction: "</span> +</span><br><span class="line">(currentIsolationLevel != <span class="literal">null</span> ?</span><br><span class="line">isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :<span class="type"></span></span><br><span class="line"><span class="type"></span>"(unknown)<span class="string">"));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">if (!definition.isReadOnly()) &#123;</span></span><br><span class="line"><span class="string">if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) &#123;</span></span><br><span class="line"><span class="string">throw new IllegalTransactionStateException("</span>Participating transaction with definition [<span class="string">" +</span></span><br><span class="line"><span class="string">definition + "</span>] is not marked as read-only but existing transaction is<span class="string">");</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span></span><br><span class="line"><span class="string">return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到记录事务状态是最后一步了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">prepareSynchronization</span>(DefaultTransactionStatus status, TransactionDefinition definition) &#123;</span><br><span class="line"><span class="selector-tag">if</span> (status.isNewSynchronization()) &#123;</span><br><span class="line"><span class="selector-tag">TransactionSynchronizationManager</span><span class="selector-class">.setActualTransactionActive</span>(status.hasTransaction());</span><br><span class="line"><span class="selector-tag">TransactionSynchronizationManager</span><span class="selector-class">.setCurrentTransactionIsolationLevel</span>(</span><br><span class="line">definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT ?</span><br><span class="line">definition.getIsolationLevel() : null);</span><br><span class="line"><span class="selector-tag">TransactionSynchronizationManager</span><span class="selector-class">.setCurrentTransactionReadOnly</span>(definition.isReadOnly());</span><br><span class="line"><span class="selector-tag">TransactionSynchronizationManager</span><span class="selector-class">.setCurrentTransactionName</span>(definition.getName());</span><br><span class="line"><span class="selector-tag">TransactionSynchronizationManager</span><span class="selector-class">.initSynchronization</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="构建事务信息">构建事务信息</span></h6><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">protected TransactionInfo prepareTransactionInfo(@Nullable PlatformTransactionManager tm,</span><br><span class="line">@Nullable TransactionAttribute txAttr, <span class="keyword">String</span> joinpointIdentification,</span><br><span class="line">@Nullable TransactionStatus status) &#123;</span><br><span class="line"></span><br><span class="line">TransactionInfo txInfo = <span class="keyword">new</span> <span class="type">TransactionInfo</span>(tm, txAttr, joinpointIdentification);</span><br><span class="line"><span class="keyword">if</span> (txAttr != <span class="literal">null</span>) </span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.<span class="built_in">trace</span>(<span class="string">"Getting transaction for ["</span> + txInfo.getJoinpointIdentification() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录事务状态</span></span><br><span class="line">txInfo.<span class="keyword">new</span><span class="type">TransactionStatus</span>(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled())</span><br><span class="line">logger.<span class="built_in">trace</span>(<span class="string">"Don't need to create transaction for ["</span> + joinpointIdentification +</span><br><span class="line"><span class="string">"]: This method isn't transactional."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txInfo.bindToThread();</span><br><span class="line"><span class="keyword">return</span> txInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="2-事务回滚">2. 事务回滚</span></h5><p>可以知道事务回滚是进入这个方法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">completeTransactionAfterThrowing</span>(<span class="variable">@Nullable</span> TransactionInfo txInfo, Throwable ex) &#123;</span><br><span class="line">  <span class="comment">//是否存在事务</span></span><br><span class="line"><span class="selector-tag">if</span> (txInfo != null &amp;&amp; txInfo.getTransactionStatus() != null) &#123;</span><br><span class="line"><span class="selector-tag">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="selector-tag">logger</span><span class="selector-class">.trace</span>(<span class="string">"Completing transaction for ["</span> + txInfo.getJoinpointIdentification() +</span><br><span class="line"><span class="string">"] after exception: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//是否满足回滚条件，比如是否运行时异常等</span></span><br><span class="line"><span class="selector-tag">if</span> (txInfo.transactionAttribute != null &amp;&amp; txInfo.transactionAttribute.rollbackOn(ex)) &#123;</span><br><span class="line"><span class="selector-tag">try</span> &#123;</span><br><span class="line">  <span class="comment">//回滚处理</span></span><br><span class="line"><span class="selector-tag">txInfo</span><span class="selector-class">.getTransactionManager</span>()<span class="selector-class">.rollback</span>(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class="line"><span class="selector-tag">logger</span><span class="selector-class">.error</span>(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</span><br><span class="line"><span class="selector-tag">ex2</span><span class="selector-class">.initApplicationException</span>(ex);</span><br><span class="line"><span class="selector-tag">throw</span> <span class="selector-tag">ex2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">catch</span> (RuntimeException | Error ex2) &#123;</span><br><span class="line"><span class="selector-tag">logger</span><span class="selector-class">.error</span>(<span class="string">"Application exception overridden by rollback exception"</span>, ex);</span><br><span class="line"><span class="selector-tag">throw</span> <span class="selector-tag">ex2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">else</span> &#123;</span><br><span class="line"><span class="comment">//不满足回滚条件时同样提交</span></span><br><span class="line"><span class="selector-tag">try</span> &#123;</span><br><span class="line"><span class="selector-tag">txInfo</span><span class="selector-class">.getTransactionManager</span>()<span class="selector-class">.commit</span>(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class="line"><span class="selector-tag">logger</span><span class="selector-class">.error</span>(<span class="string">"Application exception overridden by commit exception"</span>, ex);</span><br><span class="line"><span class="selector-tag">ex2</span><span class="selector-class">.initApplicationException</span>(ex);</span><br><span class="line"><span class="selector-tag">throw</span> <span class="selector-tag">ex2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">catch</span> (RuntimeException | Error ex2) &#123;</span><br><span class="line"><span class="selector-tag">logger</span><span class="selector-class">.error</span>(<span class="string">"Application exception overridden by commit exception"</span>, ex);</span><br><span class="line"><span class="selector-tag">throw</span> <span class="selector-tag">ex2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看回滚的逻辑</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">   <span class="comment">//如果事务完成了就不能回滚</span></span><br><span class="line"><span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">processRollback(defStatus, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status, <span class="keyword">boolean</span> unexpected)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> unexpectedRollback = unexpected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//扩展点</span></span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">               <span class="comment">//如果有保存点</span></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Rolling back transaction to savepoint"</span>);</span><br><span class="line">&#125;</span><br><span class="line">                   <span class="comment">//推到保存点</span></span><br><span class="line">status.rollbackToHeldSavepoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Initiating transaction rollback"</span>);</span><br><span class="line">&#125;<span class="comment">//如果当前事务为独立事务则直接回退</span></span><br><span class="line">doRollback(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Participating in larger transaction</span></span><br><span class="line"><span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Participating transaction failed - marking existing transaction as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">                           <span class="comment">//不是独立事务标记状态</span></span><br><span class="line">doSetRollbackOnly(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Participating transaction failed - letting transaction originator decide on rollback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"Should roll back transaction but cannot - no transaction available"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Unexpected rollback only matters here if we're asked to fail early</span></span><br><span class="line"><span class="keyword">if</span> (!isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">//扩展点</span></span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raise UnexpectedRollbackException if we had a global rollback-only marker</span></span><br><span class="line"><span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">"Transaction rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="comment">//清理资源</span></span><br><span class="line">cleanupAfterCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而真的的回滚逻辑则是利用JDBC的回滚逻辑实现的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">protected void doRollback(DefaultTransactionStatus status) &#123;</span><br><span class="line">        DataSourceTransactionManager.DataSourceTransactionObject txObject = (DataSourceTransactionManager.DataSourceTransactionObject)status.getTransaction();</span><br><span class="line">       <span class="built_in"> Connection </span>con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            this.logger.<span class="builtin-name">debug</span>(<span class="string">"Rolling back JDBC transaction on Connection ["</span> + con + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            con.rollback();</span><br><span class="line">        &#125; catch (SQLException var5) &#123;</span><br><span class="line">            throw new TransactionSystemException(<span class="string">"Could not roll back JDBC transaction"</span>, var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5><span id="3-事务提交">3. 事务提交</span></h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">commitTransactionAfterReturning</span><span class="params">(@Nullable TransactionInfo txInfo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (txInfo != <span class="keyword">null</span> &amp;&amp; txInfo.getTransactionStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Completing transaction for ["</span> + txInfo.getJoinpointIdentification() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">        <span class="comment">//如果事务已经完成</span></span><br><span class="line"><span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line"><span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">        <span class="comment">//如果事务设置了回滚标记则直接回滚</span></span><br><span class="line"><span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Transactional code has requested rollback"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line"><span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Global transaction is marked as rollback-only but transactional code requested commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">processRollback(defStatus, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">//提交事务</span></span><br><span class="line">processCommit(defStatus);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> unexpectedRollback = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//扩展点的相关调用</span></span><br><span class="line">prepareForCommit(status);</span><br><span class="line">triggerBeforeCommit(status);</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Releasing transaction savepoint"</span>);</span><br><span class="line">&#125;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                    <span class="comment">//清除保存点信息</span></span><br><span class="line">status.releaseHeldSavepoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line"><span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Initiating transaction commit"</span>);</span><br><span class="line">&#125;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">                    <span class="comment">//提交事务，同样这里也是调用的JDBC的方法实现的</span></span><br><span class="line">doCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">unexpectedRollback = status.isGlobalRollbackOnly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class="line"><span class="comment">// marker but still didn't get a corresponding exception from commit.</span></span><br><span class="line"><span class="keyword">if</span> (unexpectedRollback) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line"><span class="string">"Transaction silently rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TransactionException ex) &#123;</span><br><span class="line"><span class="comment">// can only be caused by doCommit</span></span><br><span class="line"><span class="keyword">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">triggerBeforeCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">doRollbackOnCommitException(status, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class="line"><span class="comment">// propagated to callers but the transaction still considered as committed.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">triggerAfterCommit(status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">cleanupAfterCompletion(status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务源码解析（二）获取增强</title>
      <link href="/2019/09/01/pring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%E8%8E%B7%E5%8F%96%E5%A2%9E%E5%BC%BA/"/>
      <url>/2019/09/01/pring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%E8%8E%B7%E5%8F%96%E5%A2%9E%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章<a href="https://mp.weixin.qq.com/s/FU3hznLFspCcHYJs-x8h2Q" target="_blank" rel="noopener">@EnableTransactionManagement注解解析</a>中，我们搭建了源码阅读的环境，以及解析了开启Spring事务功能的注解<code>@EnableTransactionManagement</code>的实现逻辑</p><p>在进行接下来的源码解析之前我想大家应该知道，当我们使用传统的jdbc应用事务的时候是不是做了如下操作：</p><ol><li>开启事务</li><li>save、update、delete等操作</li><li>出现异常进行回滚</li><li>正常情况提交事务</li></ol><p>而在Spring中我们好像只需要关心第三步，也就是我们的业务，而其他的操作都不需要关心。那么我想你应该猜到了Spring是如何实现的呢？<br>答案就是基于<code>@Transactional</code>注解的SpringAOP实现，在接着往下阅读本篇文章的时候希望您对于SpringAOP的源码有一定的了解，如果不了解可以参考如下文章：</p><ol><li><a href="https://mp.weixin.qq.com/s/yMw1MZIRjQ4c504SSuPFaw" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（一）</a></li><li><a href="https://mp.weixin.qq.com/s/kxbdat_T0io6xEnD48HK-g" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（二）</a></li><li><a href="https://mp.weixin.qq.com/s/TORZGi2AX8hV1gNf1qNZUA" target="_blank" rel="noopener">基于注解的SpringAOP源码解析（三）</a></li></ol><h5><span id="获取增强">获取增强</span></h5><p>在阅读完AOP的原理之后，我们知道，当一个bean实例化之后会尝试获取所有适用于此Bean的增强。而在上篇文章中，我们已经发现了，<code>@EnableTransactionManagement</code>注解会往Spring中注入一个增强<code>BeanFactoryTransactionAttributeSourceAdvisor</code>。经过一番代码调用以后，会进入这么一个方法，这里的第一个入参就是<code>BeanFactoryTransactionAttributeSourceAdvisor</code>增强</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static boolean canApply(Advisor advisor, <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">targetClass</span>, <span class="title">boolean</span> <span class="title">hasIntroductions</span>) &#123;</span></span><br><span class="line"><span class="keyword">if</span> (advisor instanceof IntroductionAdvisor) &#123;</span><br><span class="line"><span class="keyword">return</span> ((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (advisor instanceof PointcutAdvisor) &#123;</span><br><span class="line">PointcutAdvisor pca = (PointcutAdvisor) advisor;</span><br><span class="line"><span class="keyword">return</span> canApply(pca.getPointcut(), targetClass, hasIntroductions);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> static boolean canApply(Pointcut pc, <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">targetClass</span>, <span class="title">boolean</span> <span class="title">hasIntroductions</span>) &#123;</span></span><br><span class="line">Assert.notNull(pc, <span class="string">"Pointcut must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line"><span class="keyword">if</span> (methodMatcher == MethodMatcher.<span class="literal">TRUE</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IntroductionAwareMethodMatcher introductionAwareMethodMatcher = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (methodMatcher instanceof IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Set&lt;<span class="class"><span class="keyword">Class</span>&lt;?&gt;&gt; <span class="title">classes</span> = <span class="title">new</span> <span class="title">LinkedHashSet</span>&lt;&gt;(<span class="title">ClassUtils</span>.<span class="title">getAllInterfacesForClassAsSet</span>(<span class="title">targetClass</span>));</span></span><br><span class="line">classes.add(targetClass);</span><br><span class="line"><span class="keyword">for</span> (<span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">clazz</span> : <span class="title">classes</span>) &#123;</span></span><br><span class="line">  //获取当前类的所有方法</span><br><span class="line"><span class="function"><span class="keyword">Method</span>[] <span class="title">methods</span> =</span> ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line"><span class="keyword">for</span> (<span class="function"><span class="keyword">Method</span> <span class="title">method</span> :</span> methods) &#123;</span><br><span class="line"><span class="keyword">if</span> ((introductionAwareMethodMatcher != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">introductionAwareMethodMatcher.matches(<span class="function"><span class="keyword">method</span>, <span class="title">targetClass</span>, <span class="title">hasIntroductions</span>)) ||</span></span><br><span class="line">methodMatcher.matches(<span class="function"><span class="keyword">method</span>, <span class="title">targetClass</span>)) &#123;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里的时候就进入事务相关的类<code>TransactionAttributeSourcePointcut</code>，看名字就能知道，这是个切点类.那么接下来的逻辑应该可以想象到，无非就是判断是否是个事务方法</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean matches(<span class="function"><span class="keyword">Method</span> <span class="title">method</span>, @<span class="title">Nullable</span> <span class="title">Class</span>&lt;?&gt; <span class="title">targetClass</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">if (targetClass != null &amp;&amp; TransactionalProxy.class.isAssignableFrom(targetClass)) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">return false;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">TransactionAttributeSource</span> <span class="title">tas</span> = <span class="title">getTransactionAttributeSource</span><span class="params">()</span>;</span></span><br><span class="line">return (tas == null || tas.getTransactionAttribute(<span class="function"><span class="keyword">method</span>, <span class="title">targetClass</span>) != <span class="title">null</span>);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是事务方法则继续往下走</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TransactionAttribute getTransactionAttribute(Method method, </span><br><span class="line">      <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass) &#123;</span><br><span class="line">    <span class="comment">// 如果当前方法是Object类中的方法，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.<span class="keyword">class</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前方法缓存使用的key</span></span><br><span class="line">    Object cacheKey = getCacheKey(method, targetClass);</span><br><span class="line">    Object cached = <span class="keyword">this</span>.attributeCache.<span class="keyword">get</span>(cacheKey);</span><br><span class="line">    <span class="comment">// 从缓存中获取当前方法解析的事务属性，如果解析过，则将解析结果返回</span></span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cached == NULL_TRANSACTION_ATTRIBUTE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (TransactionAttribute) cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 解析当前方法的事务属性，这里很重要，下面说</span></span><br><span class="line">        TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);</span><br><span class="line">        <span class="keyword">if</span> (txAttr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果当前方法上没有事务属性，则缓存一个表示空事务属性的对象</span></span><br><span class="line">            <span class="keyword">this</span>.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取方法的签名</span></span><br><span class="line">            String methodIdentification = </span><br><span class="line">                ClassUtils.getQualifiedMethodName(method, targetClass);</span><br><span class="line">            <span class="comment">// 如果生成的事务属性是DefaultTransactionAttribute类型的，则将方法签名设置到其descriptor属性中</span></span><br><span class="line">            <span class="keyword">if</span> (txAttr instanceof DefaultTransactionAttribute) &#123;</span><br><span class="line">                ((DefaultTransactionAttribute) txAttr)</span><br><span class="line">                    .setDescriptor(methodIdentification);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Adding transactional method '"</span> + methodIdentification </span><br><span class="line">                             + <span class="string">"' with attribute: "</span> + txAttr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 缓存当前方法的解析结果</span></span><br><span class="line">            <span class="keyword">this</span>.attributeCache.put(cacheKey, txAttr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> txAttr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看一下方法的事务属性是如何解析的</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> TransactionAttribute computeTransactionAttribute(<span class="function"><span class="keyword">Method</span> <span class="title">method</span>, </span></span><br><span class="line"><span class="function">       @<span class="title">Nullable</span> <span class="title">Class</span>&lt;?&gt; <span class="title">targetClass</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 如果设置了只对public方法进行事务代理，并且当前方法不是public的，则返回null</span></span></span><br><span class="line"><span class="function"><span class="comment">    if (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        return null;</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">Class</span>&lt;?&gt; <span class="title">userClass</span> = <span class="params">(targetClass != null ? </span></span></span><br><span class="line"><span class="function"><span class="params">        ClassUtils.getUserClass(targetClass)</span> :</span> null);</span><br><span class="line">    <span class="comment">// 获取最为准确的方法，即如果传入的method只是一个接口方法，则会去找其实现类的同一方法进行解析</span></span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">specificMethod</span> = <span class="title">ClassUtils</span>.<span class="title">getMostSpecificMethod</span><span class="params">(<span class="keyword">method</span>, userClass)</span>;</span></span><br><span class="line">    <span class="comment">// 如果当前方法是一个泛型方法，则会找Class文件中实际实现的方法</span></span><br><span class="line">    specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</span><br><span class="line">    <span class="comment">// 解析目标方法，获取其是否存在事务属性，如果存在则直接返回</span></span><br><span class="line">    TransactionAttribute txAttr = findTransactionAttribute(specificMethod);</span><br><span class="line">    <span class="keyword">if</span> (txAttr != null) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return txAttr;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析目标方法所在的类，判断其是否标注有事务属性，如果存在，并且目标方法是用户实现的方法，则直接返回</span></span><br><span class="line">    txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());</span><br><span class="line">    <span class="keyword">if</span> (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(<span class="function"><span class="keyword">method</span>)) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        return txAttr;</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    // 如果通过解析到的方法无法找到事务属性，则判断解析得到的方法与传入的目标方法是否为同一个方法，</span></span><br><span class="line"><span class="function">    // 如果不是同一个方法，则尝试对传入的方法及其所在的类进行事务属性解析</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(specificMethod != <span class="keyword">method</span>)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">        // 对传入方法解析事务属性，如果存在，则直接返回</span></span></span><br><span class="line"><span class="function"><span class="comment">        txAttr = findTransactionAttribute(method);</span></span></span><br><span class="line"><span class="function"><span class="comment">        if (txAttr != null) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">            return txAttr;</span></span></span><br><span class="line"><span class="function"><span class="comment">        &#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 对传入方法所在类进行事务属性解析，如果存在，则直接返回</span></span><br><span class="line"><span class="function">        <span class="title">txAttr</span> = <span class="title">findTransactionAttribute</span><span class="params">(<span class="keyword">method</span>.getDeclaringClass()</span>);</span></span><br><span class="line">        <span class="keyword">if</span> (txAttr != null &amp;&amp; ClassUtils.isUserLevelMethod(<span class="function"><span class="keyword">method</span>)) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">            return txAttr;</span></span></span><br><span class="line"><span class="function"><span class="comment">        &#125;</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">null</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对事务属性的解析主要分为对目标方法进行解析和对传入方法进行解析，接着看<code>findTransactionAttribute</code>方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TransactionAttribute <span class="title">findTransactionAttribute</span>(<span class="params">Method method</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> determineTransactionAttribute(method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> TransactionAttribute <span class="title">determineTransactionAttribute</span>(<span class="params">AnnotatedElement ae</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (TransactionAnnotationParser annotationParser : <span class="keyword">this</span>.annotationParsers) &#123;</span><br><span class="line">TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae);</span><br><span class="line"><span class="keyword">if</span> (attr != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> attr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionAttribute <span class="title">parseTransactionAnnotation</span>(<span class="params">AnnotatedElement ae</span>) </span>&#123;</span><br><span class="line">AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(</span><br><span class="line">ae, Transactional.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (attributes != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> parseTransactionAnnotation(attributes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionAttribute <span class="title">parseTransactionAnnotation</span>(<span class="params">AnnotatedElement ae</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断目标方法上是否存在@Transactional注解，如果不存在，则直接返回</span></span><br><span class="line">    AnnotationAttributes attributes = AnnotatedElementUtils</span><br><span class="line">        .findMergedAnnotationAttributes(ae, Transactional.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (attributes != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果目标方法上存在@Transactional注解，则获取注解值，并且封装为TransactionAttribute返回</span></span><br><span class="line">        <span class="keyword">return</span> parseTransactionAnnotation(attributes);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> TransactionAttribute <span class="title">parseTransactionAnnotation</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        AnnotationAttributes attributes</span>) </span>&#123;</span><br><span class="line">    RuleBasedTransactionAttribute rbta = <span class="keyword">new</span> RuleBasedTransactionAttribute();</span><br><span class="line">    <span class="comment">// 获取注解上的propagation值</span></span><br><span class="line">    Propagation propagation = attributes.getEnum(<span class="string">"propagation"</span>);</span><br><span class="line">    rbta.setPropagationBehavior(propagation.<span class="keyword">value</span>());</span><br><span class="line">    <span class="comment">// 获取注解上的isolation属性值</span></span><br><span class="line">    Isolation isolation = attributes.getEnum(<span class="string">"isolation"</span>);</span><br><span class="line">    rbta.setIsolationLevel(isolation.<span class="keyword">value</span>());</span><br><span class="line">    <span class="comment">// 获取注解上的timeout属性值</span></span><br><span class="line">    rbta.setTimeout(attributes.getNumber(<span class="string">"timeout"</span>).intValue());</span><br><span class="line">    <span class="comment">// 获取注解上的readOnly属性值</span></span><br><span class="line">    rbta.setReadOnly(attributes.getBoolean(<span class="string">"readOnly"</span>));</span><br><span class="line">    <span class="comment">// 获取注解上的value属性值</span></span><br><span class="line">    rbta.setQualifier(attributes.getString(<span class="string">"value"</span>));</span><br><span class="line">    ArrayList&lt;RollbackRuleAttribute&gt; rollBackRules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取注解上的rollbackFor属性列表</span></span><br><span class="line">    Class&lt;?&gt;[] rbf = attributes.getClassArray(<span class="string">"rollbackFor"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; rbRule : rbf) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = <span class="keyword">new</span> RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.<span class="keyword">add</span>(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取注解上的rollbackForClassName属性列表</span></span><br><span class="line">    String[] rbfc = attributes.getStringArray(<span class="string">"rollbackForClassName"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String rbRule : rbfc) &#123;</span><br><span class="line">        RollbackRuleAttribute rule = <span class="keyword">new</span> RollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.<span class="keyword">add</span>(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取注解上的noRollbackFor属性列表</span></span><br><span class="line">    Class&lt;?&gt;[] nrbf = attributes.getClassArray(<span class="string">"noRollbackFor"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; rbRule : nrbf) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = <span class="keyword">new</span> NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.<span class="keyword">add</span>(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取注解上的noRollbackForClassName属性列表</span></span><br><span class="line">    String[] nrbfc = attributes.getStringArray(<span class="string">"noRollbackForClassName"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String rbRule : nrbfc) &#123;</span><br><span class="line">        NoRollbackRuleAttribute rule = <span class="keyword">new</span> NoRollbackRuleAttribute(rbRule);</span><br><span class="line">        rollBackRules.<span class="keyword">add</span>(rule);</span><br><span class="line">    &#125;</span><br><span class="line">    rbta.getRollbackRules().addAll(rollBackRules);</span><br><span class="line">    <span class="keyword">return</span> rbta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里已经把方法上或者类上的<code>@Transactional</code>注解的属性封装成<code>TransactionAttribute</code>返回了，关于<code>@Transactional</code>注解的更多知识可参考我的这篇文章：<br><a href="https://mp.weixin.qq.com/s/2sKG2-B-8HnXAoc3fkeLpQ" target="_blank" rel="noopener">Spring@Transactional注解</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务源码解析（一）@EnableTransactionManagement注解</title>
      <link href="/2019/08/30/ring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-EnableTransactionManagement%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/08/30/ring%E4%BA%8B%E5%8A%A1%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-EnableTransactionManagement%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4><span id="测试demo">测试Demo</span></h4><p>本篇文章的Demo基于上一篇文章<a href="https://mp.weixin.qq.com/s/cmdlQ2LUi-7IDC6rCKqWOg" target="_blank" rel="noopener">SpringJDBC源码解析</a><br>新添加内容如下<br>首先在配置类中添加开启事务的注解<code>@EnableTransactionManagement</code><br>然后添加<code>DataSourceTransactionManager</code>Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Beanpublic</span> DataSourceTransactionManager </span><br><span class="line">dataSourceTransactionManager(DruidDataSource druidDataSource) &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(druidDataSource);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在业务接口中新增一个抛出异常的修改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JDBCService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactional</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCServiceImpl</span> <span class="keyword">implements</span> <span class="title">JDBCService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update user set name='王五' where id=1"</span>, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Demo的类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">"cn.shiyujun.config"</span>);</span><br><span class="line">        JDBCService jdbcService=  context.getBean(JDBCService.class);</span><br><span class="line">        jdbcService.testTransactional();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此Deno工程搭建完毕，有需要源码的同学可以从下方地址获取<br><a href="https://github.com/shiyujun/spring-framework" target="_blank" rel="noopener">https://github.com/shiyujun/spring-framework</a></p><h5><span id="源码解析">源码解析</span></h5><p>可以看到我们的事务是通过<code>EnableTransactionManagement</code>注解启用的，所以此次源码解析也从此注解开始</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Import</span>(&#123;TransactionManagementConfigurationSelector.class&#125;)</span><br><span class="line">public <span class="variable">@interface</span> EnableTransactionManagement &#123;</span><br><span class="line">    <span class="selector-tag">boolean</span> <span class="selector-tag">proxyTargetClass</span>() <span class="selector-tag">default</span> <span class="selector-tag">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">AdviceMode</span> <span class="selector-tag">mode</span>() <span class="selector-tag">default</span> <span class="selector-tag">AdviceMode</span><span class="selector-class">.PROXY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">int</span> <span class="selector-tag">order</span>() <span class="selector-tag">default</span> <span class="selector-tag">2147483647</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信看过我之前文章的同学都已经知道了<code>@Import</code>注解的原理了<br><a href="https://mp.weixin.qq.com/s/dNOBwMPHKdccmeJFWzzTOg" target="_blank" rel="noopener">Spring @Import注解源码解析</a><br>这里就不再详细解释了，直接看类<code>TransactionManagementConfigurationSelector</code>吧</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TransactionManagementConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector&lt;EnableTransactionManagement&gt;</span> </span>&#123;</span><br><span class="line">    public <span class="type">TransactionManagementConfigurationSelector</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span>[] selectImports(<span class="type">AdviceMode</span> adviceMode) &#123;</span><br><span class="line">        switch(adviceMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">PROXY</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="type">AutoProxyRegistrar</span>.<span class="keyword">class</span>.getName(), <span class="type">ProxyTransactionManagementConfiguration</span>.<span class="keyword">class</span>.getName()&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">ASPECTJ</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"org.springframework.transaction.aspectj.AspectJTransactionManagementConfiguration"</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里是根据<code>@EnableTransactionManagement</code>注解的<code>mode</code>属性来确认注入哪一个配置类。这里由于我们没有指定属性，所以使用的默认的PROXY代理，走的是第一个分枝<br>所以在这里往Spring容器中注入了两个bean<code>AutoProxyRegistrar</code>、<code>ProxyTransactionManagementConfiguration</code></p><h5><span id="创建自动代理的构建器">`创建自动代理的构建器</span></h5><p><code>AutoProxyRegistrar</code>类里面核心方法只有这一个</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">boolean candidateFound = <span class="keyword">false</span>;</span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; annoTypes = importingClassMetadata.getAnnotationTypes();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">String</span> annoType : annoTypes) &#123;</span><br><span class="line">  <span class="comment">//获取注解元信息</span></span><br><span class="line">AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType);</span><br><span class="line"><span class="keyword">if</span> (candidate == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span> mode = candidate.<span class="keyword">get</span>(<span class="string">"mode"</span>);</span><br><span class="line"><span class="built_in">Object</span> proxyTargetClass = candidate.<span class="keyword">get</span>(<span class="string">"proxyTargetClass"</span>);</span><br><span class="line"><span class="keyword">if</span> (mode != <span class="keyword">null</span> &amp;&amp; proxyTargetClass != <span class="keyword">null</span> &amp;&amp; AdviceMode.<span class="keyword">class</span> == mode.getClass() &amp;&amp;</span><br><span class="line">Boolean.<span class="keyword">class</span> == proxyTargetClass.getClass()) &#123;</span><br><span class="line">candidateFound = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mode == AdviceMode.PROXY) &#123;</span><br><span class="line">  <span class="comment">//由于咱们使用的默认PROXY所以走这个分支</span></span><br><span class="line">AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">                  <span class="comment">//强制使用Cglib动态代理</span></span><br><span class="line"><span class="keyword">if</span> ((Boolean) proxyTargetClass) &#123;</span><br><span class="line">AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!candidateFound) &#123;</span><br><span class="line"><span class="built_in">String</span> name = getClass().getSimpleName();</span><br><span class="line">logger.warn(<span class="built_in">String</span>.format(<span class="string">"%s was imported but no annotations were found "</span> +</span><br><span class="line"><span class="string">"having both 'mode' and 'proxyTargetClass' attributes of type "</span> +</span><br><span class="line"><span class="string">"AdviceMode and boolean respectively. This means that auto proxy "</span> +</span><br><span class="line"><span class="string">"creator registration and configuration may not have occurred as "</span> +</span><br><span class="line"><span class="string">"intended, and components may not be proxied as expected. Check to "</span> +</span><br><span class="line"><span class="string">"ensure that %s has been @Import'ed on the same class where these "</span> +</span><br><span class="line"><span class="string">"annotations are declared; otherwise remove the import of %s "</span> +</span><br><span class="line"><span class="string">"altogether."</span>, name, name, name));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往下看</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">       <span class="keyword">return</span> registerAutoProxyCreatorIfNecessary(registry, (Object)<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition registerAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, @Nullable Object <span class="keyword">source</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> registerOrEscalateApcAsRequired(InfrastructureAdvisorAutoProxyCreator.<span class="keyword">class</span>, registry, <span class="keyword">source</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition registerOrEscalateApcAsRequired(<span class="keyword">Class</span>&lt;?&gt; cls, BeanDefinitionRegistry registry, Object <span class="keyword">source</span>) &#123;</span><br><span class="line">       Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">       <span class="comment">// 定义有AUTO_PROXY_CREATOR_BEAN_NAME="org.springframework.aop.config.internalAutoProxyCreator"</span></span><br><span class="line">       <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">           <span class="comment">// 如果容器中已经存在自动代理构建器，则比较两个构建器的优先级</span></span><br><span class="line">           BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">           <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">               <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">               <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">               <span class="comment">// 保存优先级高的构建器</span></span><br><span class="line">               <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                   apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果容器中还没有自动代理构建器</span></span><br><span class="line">       <span class="comment">// 则创建构建器相应的BeanDefinition对象 </span></span><br><span class="line">       RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">       beanDefinition.setSource(<span class="keyword">source</span>);</span><br><span class="line">       beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">       beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 向容器中注册代理构建器的BeanDefinition对象</span></span><br><span class="line">       registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">       <span class="keyword">return</span> beanDefinition;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>也就是说这一块的流程主要是为了注册<code>org.springframework.aop.config.internalAutoProxyCreator</code>这个bean</p><h5><span id="事务核心bean的构建">事务核心bean的构建</span></h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTransactionManagementConfiguration</span> <span class="title">extends</span> <span class="title">AbstractTransactionManagementConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor() &#123;</span><br><span class="line">BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor();</span><br><span class="line">advisor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line">advisor.setAdvice(transactionInterceptor());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.enableTx != <span class="literal">null</span>) &#123;</span><br><span class="line">advisor.setOrder(<span class="keyword">this</span>.enableTx.&lt;Integer&gt;getNumber(<span class="string">"order"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> TransactionAttributeSource transactionAttributeSource() &#123;</span><br><span class="line"><span class="keyword">return</span> new AnnotationTransactionAttributeSource();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> TransactionInterceptor transactionInterceptor() &#123;</span><br><span class="line">TransactionInterceptor interceptor = new TransactionInterceptor();</span><br><span class="line">interceptor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.txManager != <span class="literal">null</span>) &#123;</span><br><span class="line">interceptor.setTransactionManager(<span class="keyword">this</span>.txManager);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入这个类之后可以看到这个类是一个配置类，这个类一共注册了三个bean，不要小瞧这三个bean，就是它们三个完成了整个Spring的事务功能</p><p>再仔细看的话会发现，<code>AnnotationTransactionAttributeSource</code>和<code>TransactionInterceptor</code>这两个bea又都注册到了<code>BeanFactoryTransactionAttributeSourceAdvisor</code>中，可以看出来这里是一个重点了</p><blockquote><p>限于平台字数限制，本篇文章就到这里</p></blockquote><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring @Import注解源码解析</title>
      <link href="/2019/08/28/Spring-Import%E6%B3%A8%E8%A7%A3%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/28/Spring-Import%E6%B3%A8%E8%A7%A3%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h5><span id="简介">简介</span></h5><p>Spring 3.0之前，创建Bean可以通过xml配置文件与扫描特定包下面的类来将类注入到Spring IOC容器内。而在Spring 3.0之后提供了JavaConfig的方式，也就是将IOC容器里Bean的元信息以java代码的方式进行描述。我们可以通过@Configuration与@Bean这两个注解配合使用来将原来配置在xml文件里的bean通过java代码的方式进行描述</p><p>@Import注解提供了@Bean注解的功能，同时还有xml配置文件里<import>标签组织多个分散的xml文件的功能，当然在这里是组织多个分散的@Configuration</import></p><p>先看一下@Import注解的源码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * &#123;<span class="doctag">@link</span> Configuration&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;, &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;</span></span><br><span class="line"><span class="comment">      * or regular component classes to import.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码里可以看出@Import可以配合 <code>Configuration</code> ,<code>ImportSelector</code>, <code>ImportBeanDefinitionRegistrar</code> 来使用，下面的or表示也可以把Import当成普通的Bean使用<br>@Import只允许放到类上面，不能放到方法上。下面我们来看具体的使用方式</p><h5><span id="普通使用方法">普通使用方法</span></h5><p>这种方式可以直接把类加入到Spring IOC容器</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@Import</span>(value=&#123;UserServiceImpl.class&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式有一些问题，那就是只能使用类的无参构造方法来创建bean，对于有参数的构造方法就无能为力了</p><h5><span id="结合importbeandefinitionregistrar接口">结合<code>ImportBeanDefinitionRegistrar</code>接口</span></h5><p><code>ImportBeanDefinitionRegistrar</code>接口的源码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个接口唯一的方法是有两个参数的</p><ol><li>AnnotationMetadata：通过这个参数可以拿到类的元数据信息</li><li>BeanDefinitionRegistry：通过这个参数可以操作IOC容器</li></ol><p>我们可以使用一个类来实现这个接口</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> registerBeanDefinitions(AnnotationMetadata importingClassMetadata,BeanDefinitionRegistry registry) &#123;</span><br><span class="line">        BeanDefinitionBuilder userService = BeanDefinitionBuilder.rootBeanDefinition(UserServiceImpl.<span class="keyword">class</span>);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">"userService"</span>, userService.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们在这个方法里面做一些特殊操作什么的都是可以的，相比较于普通的方式可是灵活了很多</p><p>接着我们在@Import注解引入的地方只需要修改为引入UserServiceBeanDefinitionRegistrar就可以了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@Import</span>(value=&#123;UserServiceBeanDefinitionRegistrar.class&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5><span id="结合importselector接口">结合<code>ImportSelector</code>接口</span></h5><p>相比较与实现<code>ImportBeanDefinitionRegistrar</code>接口之后直接操作Bean容器来说，使用<code>ImportSelector</code>会更加优雅一些，只需要返回需要注入类的全限定名就可以了</p><p>ImportSelector接口的源码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> &#123;</span></span><br><span class="line">    String[] selectImports(AnnotationMetadata importingClassMetadata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImportSelect</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span>&#123;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;UserServiceImpl.<span class="keyword">class</span>.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>()</span><br><span class="line"><span class="meta">@Import</span>(value=&#123;UserServiceImportSelect.<span class="keyword">class</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较三种方式来说可以看到最后这种才是最优雅的方式</p><h5><span id="源码解析">源码解析</span></h5><p>首先我们就以第三种比较优雅的方式出发，使用Call Hierarchy看一下ImportSelector接口的selectImports方法调用链关系：</p><p><a href="1.png">1</a></p><p>看过之前Spring源码解析文章的同学都知道，<code>refresh</code>方法是用来初始化容器上下文的。跟着这个调用链走下来到中间有一个类是<code>ConfigurationClassPostProcessor</code>，根据类名我们就可以猜到这个类应该是处理配置类（也就是标注<code>@Configuration</code>）的。那么从这开始看吧</p><p></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;</span><br><span class="line">    List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;BeanDefinitionHolder&gt;();</span><br><span class="line">    <span class="keyword">String</span>[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">String</span> beanName : <span class="type">candidateNames</span>) &#123;</span><br><span class="line">        BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||</span><br><span class="line">                ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Bean definition has already been processed as a configuration class: "</span> + beanDef);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//查看是否是配置类</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="built_in">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line"></span><br><span class="line">            configCandidates.add(<span class="keyword">new</span> <span class="type">BeanDefinitionHolder</span>(beanDef, beanName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//如果没有配置类就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (configCandidates.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对这些配置类根据Order排序</span></span><br><span class="line">    Collections.sort(configCandidates, <span class="keyword">new</span> <span class="type">Comparator</span>&lt;BeanDefinitionHolder&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) &#123;</span><br><span class="line">            int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line">            int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line">            <span class="keyword">return</span> (i1 &lt; i2) ? <span class="number">-1</span> : <span class="type"></span>(i1 &gt; i2) ? <span class="number">1</span> : <span class="type">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    SingletonBeanRegistry sbr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (registry instanceof SingletonBeanRegistry) &#123;</span><br><span class="line">        sbr = (SingletonBeanRegistry) registry;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.localBeanNameGeneratorSet &amp;&amp; sbr.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) &#123;</span><br><span class="line">            BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line">            <span class="built_in">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line">            <span class="built_in">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">             <span class="comment">//创建配置类的解析类</span></span><br><span class="line">    ConfigurationClassParser parser = <span class="keyword">new</span> <span class="type">ConfigurationClassParser</span>(</span><br><span class="line">            <span class="built_in">this</span>.metadataReaderFactory, <span class="built_in">this</span>.problemReporter, <span class="built_in">this</span>.environment,</span><br><span class="line">            <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> <span class="type">LinkedHashSet</span>&lt;BeanDefinitionHolder&gt;(configCandidates);</span><br><span class="line">    Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;ConfigurationClass&gt;(configCandidates.size());</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">ConfigurationClassParser的parse方法进行解析，重点哈</span><br><span class="line">        parser.parse(candidates);</span><br><span class="line">        parser.validate();</span><br><span class="line"></span><br><span class="line">        Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> <span class="type">LinkedHashSet</span>&lt;ConfigurationClass&gt;(parser.getConfigurationClasses());</span><br><span class="line">        configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.reader == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="type">ConfigurationClassBeanDefinitionReader</span>(</span><br><span class="line">                    registry, <span class="built_in">this</span>.sourceExtractor, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.environment,</span><br><span class="line">                    <span class="built_in">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">        alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">        candidates.clear();</span><br><span class="line">        <span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">            <span class="keyword">String</span>[] <span class="keyword">new</span><span class="type">CandidateNames</span> = registry.getBeanDefinitionNames();</span><br><span class="line">            Set&lt;<span class="keyword">String</span>&gt; oldCandidateNames = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;<span class="keyword">String</span>&gt;(Arrays.asList(candidateNames));</span><br><span class="line">            Set&lt;<span class="keyword">String</span>&gt; alreadyParsedClasses = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span> (ConfigurationClass configurationClass : <span class="type">alreadyParsed</span>) &#123;</span><br><span class="line">                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> candidateName : <span class="type">newCandidateNames</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">                    BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line">                    <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="built_in">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">                            !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">                        candidates.add(<span class="keyword">new</span> <span class="type">BeanDefinitionHolder</span>(bd, candidateName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            candidateNames = <span class="keyword">new</span><span class="type">CandidateNames</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sbr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">            sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.metadataReaderFactory instanceof CachingMetadataReaderFactory) &#123;</span><br><span class="line">        ((CachingMetadataReaderFactory) <span class="built_in">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在该进入<code>ConfigurationClassParser</code>类了</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.deferredImportSelectors = <span class="keyword">new</span> LinkedList&lt;DeferredImportSelectorHolder&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                    <span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    processDeferredImportSelectors();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面三种方法用于处理不同的BeanDefinition 类型，但最终都是使用的processConfigurationClass方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(String className, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    MetadataReader reader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(reader, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(Class&lt;?&gt; clazz, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(clazz, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(AnnotationMetadata metadata, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(metadata, beanName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到配置类可能会是三种形式的存在，这三种形式的Bean在操作上有着部分不一样，但是大部分又是一样，所以Spring用这种模式来处理。不得不感叹人家设计的真好</p><p>接着往下看</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> void processConfigurationClass(ConfigurationClass configClass) throws IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConfigurationClass existingClass = <span class="keyword">this</span>.configurationClasses.<span class="keyword">get</span>(configClass);</span><br><span class="line">    <span class="comment">//在这里处理Configuration重复import</span></span><br><span class="line">  <span class="comment">//如果同一个配置类被处理两次，两次都属于被import的则合并导入类，返回。如果配置类不是被导入的，则移除旧使用新的配置类</span></span><br><span class="line">    <span class="keyword">if</span> (existingClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (existingClass.isImported()) &#123;</span><br><span class="line">                existingClass.mergeImportedBy(configClass);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurationClasses.remove(configClass);</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;ConfigurationClass&gt; it = <span class="keyword">this</span>.knownSuperclasses.values().iterator(); it.hasNext();) &#123;</span><br><span class="line">                <span class="keyword">if</span> (configClass.equals(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SourceClass sourceClass = asSourceClass(configClass);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">//接着往下看吧</span></span><br><span class="line">        sourceClass = doProcessConfigurationClass(configClass, sourceClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sourceClass != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.configurationClasses.put(configClass, configClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)</span><br><span class="line">        throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理递归类</span></span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理@PropertySource注解</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), PropertySources.<span class="keyword">class</span>,</span><br><span class="line">            org.springframework.context.<span class="keyword">annotation</span>.PropertySource.<span class="keyword">class</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.environment instanceof ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warn(<span class="string">"Ignoring @PropertySource annotation on ["</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                    <span class="string">"]. Reason: Environment must implement ConfigurableEnvironment"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 @ComponentScan 注解</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">            sourceClass.getMetadata(), ComponentScans.<span class="keyword">class</span>, ComponentScan.<span class="keyword">class</span>);</span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">            !<span class="keyword">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                    <span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            <span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line">            <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                <span class="keyword">if</span> (bdCand == <span class="literal">null</span>) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理Import注解，这个是咱们的菜</span></span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理@ImportResource 注解</span></span><br><span class="line">    <span class="keyword">if</span> (sourceClass.getMetadata().isAnnotated(ImportResource.<span class="keyword">class</span>.getName())) &#123;</span><br><span class="line">        AnnotationAttributes importResource =</span><br><span class="line">                AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.<span class="keyword">class</span>);</span><br><span class="line">        String[] resources = importResource.getStringArray(<span class="string">"locations"</span>);</span><br><span class="line">        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(<span class="string">"reader"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">            String resolvedResource = <span class="keyword">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理包含@Bean注解的方法</span></span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    <span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理普通方法</span></span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        <span class="keyword">if</span> (!superclass.startsWith(<span class="string">"java"</span>) &amp;&amp; !<span class="keyword">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            <span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line">            <span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里好像突然发现了新大陆呀，原来我们经常见的<code>@Bean</code>、<code>@ImportResource</code> 、<code>@Import</code>、<code>@ComponentScan</code>、<code>@PropertySource</code>都是在这里处理的呀</p><p>咱们的重点还是放在<code>@Import</code>上，对其他几个注解感兴趣的同学可以自行研究一下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,</span><br><span class="line">        Collection&lt;SourceClass&gt; importCandidates, boolean checkForCircularImports) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (importCandidates.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.problemReporter.error(new CircularImportProblem(configClass, <span class="keyword">this</span>.importStack));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.importStack.push(configClass);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (SourceClass candidate : importCandidates) &#123;</span><br><span class="line"><span class="comment">//如果实现了ImportSelector接口</span></span><br><span class="line">                <span class="keyword">if</span> (candidate.isAssignable(ImportSelector.<span class="keyword">class</span>)) &#123;</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector.<span class="keyword">class</span>);</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            selector, <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.deferredImportSelectors != <span class="literal">null</span> &amp;&amp; selector instanceof DeferredImportSelector) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.deferredImportSelectors.add(</span><br><span class="line">                                new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                        Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);</span><br><span class="line">                        processImports(configClass, currentSourceClass, importSourceClasses, <span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">  <span class="comment">//如果实现了ImportBeanDefinitionRegistrar接口</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.<span class="keyword">class</span>)) &#123;</span><br><span class="line">                    Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">                    ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">                            BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.<span class="keyword">class</span>);</span><br><span class="line">                    ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">                            registrar, <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line">                    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">//将import当成Configuration来使用就是我们的第一种应用的方式</span></span><br><span class="line">                    <span class="keyword">this</span>.importStack.registerImport(</span><br><span class="line">                            currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">                    processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new BeanDefinitionStoreException(</span><br><span class="line">                    <span class="string">"Failed to process import candidates for configuration class ["</span> +</span><br><span class="line">                    configClass.getMetadata().getClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.importStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> @Transactional注解详解 </title>
      <link href="/2019/08/27/Transactional%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/08/27/Transactional%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>@Transactional注解可以作用于接口、接口方法、类以及类方法上<br>1. 当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性<br>2. 当作用在方法级别时会覆盖类级别的定义<br>3. 当作用在接口和接口方法时则只有在使用基于接口的代理时它才会生效，也就是JDK动态代理，而不是Cglib代理<br>4. 当在 protected、private 或者默认可见性的方法上使用 @Transactional 注解时是不会生效的，也不会抛出任何异常<br>5. 默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，即使被调用方法使用@Transactional注解进行修饰</p><h5><span id="transactional注解的可用参数">@Transactional注解的可用参数</span></h5><h6><span id="readonly">readOnly</span></h6><p>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false</p><h6><span id="rollbackfor">rollbackFor</span></h6><p>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：<br>1. 指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)<br>2. 指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, BusnessException.class})</p><h6><span id="rollbackforclassname">rollbackForClassName</span></h6><p>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：<br>1. 指定单一异常类名称：@Transactional(rollbackForClassName=“RuntimeException”)<br>2. 指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,“BusnessException”})</p><h6><span id="norollbackfor">noRollbackFor</span></h6><p>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚</p><h6><span id="norollbackforclassname">noRollbackForClassName</span></h6><p>参照上方的例子</p><h6><span id="timeout">timeout</span></h6><p>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</p><h6><span id="propagation">propagation</span></h6><p>该属性用于设置事务的传播行为<br>例如：@Transactional(propagation=Propagation.NOT_SUPPORTED)</p><p>事物传播行为介绍:</p><ol><li>@Transactional(propagation=Propagation.REQUIRED) 如果有事务, 那么加入事务, 没有的话新建一个(默认)</li><li>@Transactional(propagation=Propagation.NOT_SUPPORTED) 容器不为这个方法开启事务</li><li>@Transactional(propagation=Propagation.REQUIRES_NEW) 不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</li><li>@Transactional(propagation=Propagation.MANDATORY) 必须在一个已有的事务中执行,否则抛出异常</li><li>@Transactional(propagation=Propagation.NEVER) 必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</li><li>@Transactional(propagation=Propagation.SUPPORTS) 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务</li></ol><h6><span id="isolation">isolation</span></h6><p>该属性用于设置底层数据库的事务隔离级别</p><p>事务隔离级别介绍:</p><ol><li>@Transactional(isolation = Isolation.READ_UNCOMMITTED)读取未提交数据(会出现脏读, 不可重复读) 基本不使用</li><li>@Transactional(isolation = Isolation.READ_COMMITTED)读取已提交数据(会出现不可重复读和幻读)</li><li>@Transactional(isolation = Isolation.REPEATABLE_READ)可重复读(会出现幻读)</li><li>@Transactional(isolation = Isolation.SERIALIZABLE)串行化</li></ol><p>什么是脏读、幻读、不可重复读？</p><ol><li>脏读 : 一个事务读取到另一事务未提交的更新数据</li><li>不可重复读 : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 后续读取可以读到另一事务已提交的更新数据. 相反, &quot;可重复读&quot;在同一事务中多次读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据</li><li>幻读 : 一个事务读到另一个事务已提交的insert数据</li></ol><p>其中MySQL默认使用的隔离级别为REPEATABLE_READ、Oracle的为READ_COMMITTED</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringJDBC源码解析</title>
      <link href="/2019/08/26/ringJDBC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/26/ringJDBC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>读完本篇文章需要很长很长时间。。。。</p></blockquote><h4><span id="传统jdbc">传统JDBC</span></h4><p>相信大家对传统的jdbc已经很熟悉了，无非就是下面这个流程</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载驱动程序</span></span><br><span class="line"><span class="keyword">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//2. 获得数据库连接</span></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line"><span class="comment">//3.操作数据库</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">ResultSet rs = stmt.executeQuery(<span class="string">"SELECT name, age from user"</span>);</span><br><span class="line"><span class="comment">//4.处理返回值</span></span><br><span class="line"><span class="keyword">while</span>(rs.<span class="keyword">next</span>())&#123;</span><br><span class="line">    System.out.<span class="keyword">println</span>(<span class="string">"名字:"</span>+rs.getString(<span class="string">"name"</span>)+<span class="string">" 年龄:"</span>+rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="使用springjdbc">使用SpringJDBC</span></h4><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//getter、setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值处理类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class UserRowMapper implements RowMapper &#123;</span><br><span class="line">    @Nullable</span><br><span class="line">    public Object mapRow(ResultSet resultSet, int i) throws SQLException &#123;</span><br><span class="line">       <span class="built_in"> User </span><span class="attribute">user</span>=new User();</span><br><span class="line">        user.setId(resultSet.getInt(<span class="string">"id"</span>));</span><br><span class="line">        user.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">        user.setAge(resultSet.getInt(<span class="string">"age"</span>));</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务处理类</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">JDBCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span>(<span class="params"><span class="keyword">int</span> id</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNameById</span>(<span class="params"><span class="keyword">int</span> id,String name</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JDBCServiceImpl</span> <span class="title">implements</span> <span class="title">JDBCService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JDBCServiceImpl</span>(<span class="params">JdbcTemplate jdbcTemplate</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span>(<span class="params"><span class="keyword">int</span> id</span>) </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = jdbcTemplate.query(<span class="string">"select id,name,age from user where id=?"</span>, <span class="keyword">new</span> Object[]&#123;id&#125;, <span class="keyword">new</span> UserRowMapper());</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"id 为"</span> + id + <span class="string">"的用户名为："</span> + list.<span class="keyword">get</span>(<span class="number">0</span>).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNameById</span>(<span class="params"><span class="keyword">int</span> id, String name</span>) </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update user set name=? where id=?"</span>, <span class="keyword">new</span> Object[]&#123;name, id&#125;, <span class="keyword">new</span> UserRowMapper());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class <span class="keyword">JDBCConfig </span>&#123;</span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"> </span>   public DruidDataSource druidDataSource()&#123;</span><br><span class="line">        DruidDataSource druidDataSource=new DruidDataSource()<span class="comment">;</span></span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>)<span class="comment">;</span></span><br><span class="line">        druidDataSource.setPassword(<span class="string">"123456"</span>)<span class="comment">;</span></span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>)<span class="comment">;</span></span><br><span class="line">        druidDataSource.setUrl(<span class="string">"jdbc:mysql://172.16.40.159:3306/cfkk?characterEncoding=utf-8&amp;useSSL=false"</span>)<span class="comment">;</span></span><br><span class="line">        return druidDataSource<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"> </span>   public <span class="keyword">JDBCService </span><span class="keyword">jdbcService(DruidDataSource </span>druidDataSource)&#123;</span><br><span class="line">        <span class="keyword">JdbcTemplate </span><span class="keyword">jdbcTemplate=new </span><span class="keyword">JdbcTemplate(druidDataSource);</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">JDBCService </span><span class="keyword">jdbcService=new </span><span class="keyword">JDBCServiceImpl(jdbcTemplate);</span></span><br><span class="line"><span class="keyword"> </span>       return <span class="keyword">jdbcService;</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">"cn.shiyujun.config"</span>);</span><br><span class="line">        JDBCService jdbcService=  context.getBean(JDBCService.class);</span><br><span class="line">        jdbcService.updateNameById(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">        jdbcService.queryById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此Deno工程搭建完毕，有需要源码的同学可以从下方地址获取<br><a href="https://github.com/shiyujun/spring-framework" target="_blank" rel="noopener">https://github.com/shiyujun/spring-framework</a></p><h4><span id="update">update</span></h4><p>我们首先来分析一下update方法的实现</p><h6><span id="参数封装">参数封装</span></h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">int</span> <span class="selector-tag">update</span>(String sql, <span class="variable">@Nullable</span> Object... args) <span class="selector-tag">throws</span> <span class="selector-tag">DataAccessException</span> &#123;</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">update</span>(sql, newArgPreparedStatementSetter(args));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">int</span> <span class="selector-tag">update</span>(String sql, <span class="variable">@Nullable</span> PreparedStatementSetter pss) <span class="selector-tag">throws</span> <span class="selector-tag">DataAccessException</span> &#123;</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">update</span>(new SimplePreparedStatementCreator(sql), pss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，首先使用了ArgPreparedStatementSetter对参数进行了一层封装，然后又使用了SimplePreparedStatementCreator对SQL进行了封装</p><h6><span id="核心逻辑">核心逻辑</span></h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> update(<span class="keyword">final</span> PreparedStatementCreator psc, <span class="meta">@Nullable</span> <span class="keyword">final</span> PreparedStatementSetter pss)</span><br><span class="line"><span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"Executing prepared SQL update"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> updateCount(execute(psc, ps -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//设置所需的全部参数</span></span><br><span class="line">pss.setValues(ps);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//调用jdbc的更新方法</span></span><br><span class="line"><span class="keyword">int</span> rows = ps.executeUpdate();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"SQL update affected "</span> + rows + <span class="string">" rows"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pss <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方这个方法是update的核心逻辑了，这里面的代码不是太多，主要涉及几个核心的逻辑</p><h6><span id="获取更新条数updatecount">获取更新条数<code>updateCount</code></span></h6><p>进入方法以后可以看到这个方法是对<code>execute</code>方法的integer返回值的一个封装，也就是此次修改的行数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">private</span> <span class="selector-tag">static</span> <span class="selector-tag">int</span> <span class="selector-tag">updateCount</span>(<span class="variable">@Nullable</span> Integer result) &#123; </span><br><span class="line">    <span class="selector-tag">Assert</span><span class="selector-class">.state</span>(result != null, <span class="string">"No update count"</span>); </span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">result</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6><span id="前置方法execute">前置方法<code>execute</code></span></h6><p>这里完成了传统JDBC的前两步加载驱动和获取连接，</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T execute(PreparedStatementCreator psc, PreparedStatementCallback&lt;T&gt; action)</span><br><span class="line"><span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">Assert.notNull(psc, <span class="string">"PreparedStatementCreator must not be null"</span>);</span><br><span class="line">Assert.notNull(action, <span class="string">"Callback object must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">String</span> sql = getSql(psc);</span><br><span class="line">logger.debug(<span class="string">"Executing prepared SQL statement"</span> + (sql != <span class="keyword">null</span> ? <span class="string">" ["</span> + sql + <span class="string">"]"</span> : <span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//根据具体的连接池组件获取数据库连接，这里就不深入研究了，放到以后的连接池源码解析里</span></span><br><span class="line">Connection con = DataSourceUtils.getConnection(obtainDataSource());</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//应该对这个PreparedStatement印象很深刻了</span></span><br><span class="line">ps = psc.createPreparedStatement(con);</span><br><span class="line">applyStatementSettings(ps);</span><br><span class="line">            <span class="comment">//调用回调函数也就是update方法中execute的lambda表达式里的逻辑</span></span><br><span class="line">T result = action.doInPreparedStatement(ps);</span><br><span class="line">            <span class="comment">//警告处理</span></span><br><span class="line">handleWarnings(ps);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (psc <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">String</span> sql = getSql(psc);</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">JdbcUtils.closeStatement(ps);</span><br><span class="line">ps = <span class="keyword">null</span>;</span><br><span class="line">DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">con = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">throw</span> translateException(<span class="string">"PreparedStatementCallback"</span>, sql, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (psc <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">((ParameterDisposer) psc).cleanupParameters();</span><br><span class="line">&#125;</span><br><span class="line">JdbcUtils.closeStatement(ps);</span><br><span class="line">DataSourceUtils.releaseConnection(con, getDataSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="执行更新">执行更新</span></h6><p>现在就进入了最后的逻辑了</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> update(<span class="keyword">final</span> PreparedStatementCreator psc, <span class="meta">@Nullable</span> <span class="keyword">final</span> PreparedStatementSetter pss)</span><br><span class="line"><span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"Executing prepared SQL update"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> updateCount(execute(psc, ps -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//  往下看</span></span><br><span class="line">pss.setValues(ps);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//调用jdbc的方法执行更新</span></span><br><span class="line"><span class="keyword">int</span> rows = ps.executeUpdate();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"SQL update affected "</span> + rows + <span class="string">" rows"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pss <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="请求参数设置">请求参数设置</span></h6><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setValues(PreparedStatement ps) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="built_in">int</span> parameterPosition = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.args != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.argTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//遍历参数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.args.length; i++) &#123;</span><br><span class="line"><span class="keyword">Object</span> arg = <span class="keyword">this</span>.args[i];</span><br><span class="line">                <span class="comment">//如果是集合的话则递归处理</span></span><br><span class="line"><span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Collection &amp;&amp; <span class="keyword">this</span>.argTypes[i] != Types.ARRAY) &#123;</span><br><span class="line">Collection&lt;?&gt; entries = (Collection&lt;?&gt;) arg;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">Object</span> entry : entries) &#123;</span><br><span class="line"><span class="keyword">if</span> (entry <span class="keyword">instanceof</span> <span class="keyword">Object</span>[]) &#123;</span><br><span class="line"><span class="keyword">Object</span>[] valueArray = ((<span class="keyword">Object</span>[]) entry);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">Object</span> argValue : valueArray) &#123;</span><br><span class="line">doSetValue(ps, parameterPosition, <span class="keyword">this</span>.argTypes[i], argValue);</span><br><span class="line">parameterPosition++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">doSetValue(ps, parameterPosition, <span class="keyword">this</span>.argTypes[i], entry);</span><br><span class="line">parameterPosition++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//核心方法</span></span><br><span class="line">doSetValue(ps, parameterPosition, <span class="keyword">this</span>.argTypes[i], arg);</span><br><span class="line">parameterPosition++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> doSetValue(PreparedStatement ps, <span class="built_in">int</span> parameterPosition, <span class="built_in">int</span> argType, <span class="keyword">Object</span> argValue)</span><br><span class="line"><span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> setParameterValue(PreparedStatement ps, <span class="built_in">int</span> paramIndex, <span class="built_in">int</span> sqlType,</span><br><span class="line">@Nullable <span class="keyword">Object</span> inValue) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">setParameterValueInternal(ps, paramIndex, sqlType, <span class="keyword">null</span>, <span class="keyword">null</span>, inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> setParameterValueInternal(PreparedStatement ps, <span class="built_in">int</span> paramIndex, <span class="built_in">int</span> sqlType,</span><br><span class="line">@Nullable <span class="keyword">String</span> typeName, @Nullable Integer <span class="built_in">scale</span>, @Nullable <span class="keyword">Object</span> inValue) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> typeNameToUse = typeName;</span><br><span class="line"><span class="built_in">int</span> sqlTypeToUse = sqlType;</span><br><span class="line"><span class="keyword">Object</span> inValueToUse = inValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// override type info?</span></span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> SqlParameterValue) &#123;</span><br><span class="line">SqlParameterValue parameterValue = (SqlParameterValue) inValue;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Overriding type info with runtime info from SqlParameterValue: column index "</span> + paramIndex +</span><br><span class="line"><span class="string">", SQL type "</span> + parameterValue.getSqlType() + <span class="string">", type name "</span> + parameterValue.getTypeName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parameterValue.getSqlType() != SqlTypeValue.TYPE_UNKNOWN) &#123;</span><br><span class="line">sqlTypeToUse = parameterValue.getSqlType();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parameterValue.getTypeName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">typeNameToUse = parameterValue.getTypeName();</span><br><span class="line">&#125;</span><br><span class="line">inValueToUse = parameterValue.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Setting SQL statement parameter value: column index "</span> + paramIndex +</span><br><span class="line"><span class="string">", parameter value ["</span> + inValueToUse +</span><br><span class="line"><span class="string">"], value class ["</span> + (inValueToUse != <span class="keyword">null</span> ? inValueToUse.getClass().getName() : <span class="string">"null"</span>) +</span><br><span class="line"><span class="string">"], SQL type "</span> + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? <span class="string">"unknown"</span> : Integer.toString(sqlTypeToUse)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inValueToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//往下看</span></span><br><span class="line">setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, <span class="built_in">scale</span>, inValueToUse);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> setValue(PreparedStatement ps, <span class="built_in">int</span> paramIndex, <span class="built_in">int</span> sqlType,</span><br><span class="line">@Nullable <span class="keyword">String</span> typeName, @Nullable Integer <span class="built_in">scale</span>, <span class="keyword">Object</span> inValue) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> SqlTypeValue) &#123;</span><br><span class="line">((SqlTypeValue) inValue).setTypeValue(ps, paramIndex, sqlType, typeName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> SqlValue) &#123;</span><br><span class="line">((SqlValue) inValue).setValue(ps, paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR ||</span><br><span class="line">sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR) &#123;</span><br><span class="line">ps.setString(paramIndex, inValue.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((sqlType == Types.CLOB || sqlType == Types.NCLOB) &amp;&amp; isStringValue(inValue.getClass())) &#123;</span><br><span class="line"><span class="keyword">String</span> strVal = inValue.toString();</span><br><span class="line"><span class="keyword">if</span> (strVal.length() &gt; <span class="number">4000</span>) &#123;</span><br><span class="line"><span class="comment">// Necessary for older Oracle drivers, in particular when running against an Oracle 10 database.</span></span><br><span class="line"><span class="comment">// Should also work fine against other drivers/databases since it uses standard JDBC 4.0 API.</span></span><br><span class="line"><span class="keyword">if</span> (sqlType == Types.NCLOB) &#123;</span><br><span class="line">ps.setNClob(paramIndex, <span class="keyword">new</span> StringReader(strVal), strVal.length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setClob(paramIndex, <span class="keyword">new</span> StringReader(strVal), strVal.length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fallback: regular setString binding</span></span><br><span class="line">ps.setString(paramIndex, strVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> BigDecimal) &#123;</span><br><span class="line">ps.setBigDecimal(paramIndex, (BigDecimal) inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">scale</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, sqlType, <span class="built_in">scale</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, sqlType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.BOOLEAN) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">ps.setBoolean(paramIndex, (Boolean) inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, Types.BOOLEAN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.DATE) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.util.Date) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.sql.Date) &#123;</span><br><span class="line">ps.setDate(paramIndex, (java.sql.Date) inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setDate(paramIndex, <span class="keyword">new</span> java.sql.Date(((java.util.Date) inValue).getTime()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> Calendar) &#123;</span><br><span class="line">Calendar cal = (Calendar) inValue;</span><br><span class="line">ps.setDate(paramIndex, <span class="keyword">new</span> java.sql.Date(cal.getTime().getTime()), cal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, Types.DATE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.TIME) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.util.Date) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.sql.Time) &#123;</span><br><span class="line">ps.setTime(paramIndex, (java.sql.Time) inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setTime(paramIndex, <span class="keyword">new</span> java.sql.Time(((java.util.Date) inValue).getTime()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> Calendar) &#123;</span><br><span class="line">Calendar cal = (Calendar) inValue;</span><br><span class="line">ps.setTime(paramIndex, <span class="keyword">new</span> java.sql.Time(cal.getTime().getTime()), cal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, Types.TIME);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == Types.TIMESTAMP) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.util.Date) &#123;</span><br><span class="line"><span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> java.sql.Timestamp) &#123;</span><br><span class="line">ps.setTimestamp(paramIndex, (java.sql.Timestamp) inValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setTimestamp(paramIndex, <span class="keyword">new</span> java.sql.Timestamp(((java.util.Date) inValue).getTime()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> Calendar) &#123;</span><br><span class="line">Calendar cal = (Calendar) inValue;</span><br><span class="line">ps.setTimestamp(paramIndex, <span class="keyword">new</span> java.sql.Timestamp(cal.getTime().getTime()), cal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ps.setObject(paramIndex, inValue, Types.TIMESTAMP);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER &amp;&amp;</span><br><span class="line"><span class="string">"Oracle"</span>.equals(ps.getConnection().getMetaData().getDatabaseProductName()))) &#123;</span><br><span class="line"><span class="keyword">if</span> (isStringValue(inValue.getClass())) &#123;</span><br><span class="line">ps.setString(paramIndex, inValue.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (isDateValue(inValue.getClass())) &#123;</span><br><span class="line">ps.setTimestamp(paramIndex, <span class="keyword">new</span> java.sql.Timestamp(((java.util.Date) inValue).getTime()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> Calendar) &#123;</span><br><span class="line">Calendar cal = (Calendar) inValue;</span><br><span class="line">ps.setTimestamp(paramIndex, <span class="keyword">new</span> java.sql.Timestamp(cal.getTime().getTime()), cal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Fall back to generic setObject call without SQL type specified.</span></span><br><span class="line">ps.setObject(paramIndex, inValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Fall back to generic setObject call with SQL type specified.</span></span><br><span class="line">ps.setObject(paramIndex, inValue, sqlType);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此update方法更新分析完毕</p><h4><span id="query">query</span></h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; <span class="built_in">List</span>&lt;T&gt; query(<span class="built_in">String</span> sql, <span class="meta">@Nullable</span> <span class="built_in">Object</span>[] args, </span><br><span class="line">RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123;</span><br><span class="line">        <span class="keyword">return</span> result(query(sql, args, <span class="keyword">new</span> </span><br><span class="line">RowMapperResultSetExtractor&lt;&gt;(rowMapper)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先最外层的result方法没有什么特别的，就是对返回值的处理</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">static</span> &lt;T&gt; T <span class="literal">result</span>(@<span class="type">Nullable</span> T <span class="literal">result</span>) &#123;</span><br><span class="line"><span class="type">Assert</span>.state(<span class="literal">result</span> != null, <span class="string">"No result"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="参数封装">参数封装</span></h6><p>接着同样是封装请求参数</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T query(<span class="keyword">String</span> sql, @Nullable Object[] args, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line"><span class="keyword">return</span> query(sql, <span class="keyword">new</span><span class="type">ArgPreparedStatementSetter</span>(args), rse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T query(<span class="keyword">String</span> sql, @Nullable PreparedStatementSetter pss, ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class="line"><span class="keyword">return</span> query(<span class="keyword">new</span> <span class="type">SimplePreparedStatementCreator</span>(sql), pss, rse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="核心查询">核心查询</span></h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T query(</span><br><span class="line">PreparedStatementCreator psc, <span class="meta">@Nullable</span> <span class="keyword">final</span> PreparedStatementSetter pss, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span><br><span class="line"><span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line"></span><br><span class="line">Assert.notNull(rse, <span class="string">"ResultSetExtractor must not be null"</span>);</span><br><span class="line">logger.debug(<span class="string">"Executing prepared SQL query"</span>);</span><br><span class="line">        <span class="comment">//这里的execute的逻辑与update是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">execute</span><span class="params">(psc, <span class="keyword">new</span> PreparedStatementCallback&lt;T&gt;()</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">T <span class="title">doInPreparedStatement</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//  同上</span></span><br><span class="line">pss.setValues(ps);</span><br><span class="line">&#125;</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line">                    <span class="comment">//这里是重点</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> rse.<span class="title">extractData</span><span class="params">(rs)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">JdbcUtils.closeResultSet(rs);</span><br><span class="line"><span class="keyword">if</span> (pss <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">((ParameterDisposer) pss).cleanupParameters();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="处理返回值">处理返回值</span></h6><p>因为修改的时候只需要返回一个int值修改的条数就ok了，但是查询的时候各种查询的类型什么的就不一样了。所以在这需要单独处理一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">extractData</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">List&lt;T&gt; results = (<span class="keyword">this</span>.rowsExpected &gt; <span class="number">0</span> ? <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.rowsExpected) : <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"><span class="keyword">int</span> rowNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="comment">//在这里就是调用的我们一开始定义的UserRowMapper的mapRow方法</span></span><br><span class="line">results.add(<span class="keyword">this</span>.rowMapper.mapRow(rs, rowNum++));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解的SpringAOP源码解析（三）</title>
      <link href="/2019/08/20/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/08/20/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，读完本篇文章需要很长很长时间</p></blockquote><p>在之前的2篇文章：<a href="https://mp.weixin.qq.com/s/yMw1MZIRjQ4c504SSuPFaw" target="_blank" rel="noopener">AOP源码分析（一）</a><a href="https://mp.weixin.qq.com/s/kxbdat_T0io6xEnD48HK-g" target="_blank" rel="noopener">AOP源码分析（二）</a><br>中，我们搭建了SpringAOP源码分析的环境，介绍了<code>@EnableAspectJAutoProxy</code>注解和<code>postProcessBeforeInstantiation</code>方法是如何加载所有增强的。本篇文章则将描述一下AOP中剩余的实现逻辑</p><h4><span id="postprocessafterinitialization"><code>postProcessAfterInitialization</code></span></h4><p>这个方法是在bean实例化之后调用的，它是适用于所有需要被代理的类的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">        Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line">            <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) &#123;</span><br><span class="line"><span class="comment">//如果已经处理过</span></span><br><span class="line">    <span class="keyword">if</span> (beanName != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果当前类是增强类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Boolean</span>.FALSE.equals(<span class="keyword">this</span>.advisedBeans.<span class="keyword">get</span>(cacheKey))) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看类是否是基础设施类，或者是否被排除</span></span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.FALSE);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验此类是否应该被代理，获取这个类的增强</span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//如果获取到了增强则需要针对增强创建代理</span></span><br><span class="line">    <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.TRUE);</span><br><span class="line">        <span class="comment">//创建代理</span></span><br><span class="line">        Object proxy = createProxy(</span><br><span class="line">                bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span><br><span class="line">        <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方这段代理一共有两个重点，<code>getAdvicesAndAdvisorsForBean</code>和<code>createProxy</code>这两个方法。</p><h5><span id="获取增强">获取增强</span></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(<span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">beanClass</span>, <span class="title">String</span> <span class="title">beanName</span>, <span class="title">TargetSource</span> <span class="title">targetSource</span>) </span>&#123;</span><br><span class="line"><span class="comment">//往下看</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">    <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">List</span>&lt;Advisor&gt; findEligibleAdvisors(<span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">beanClass</span>, <span class="title">String</span> <span class="title">beanName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取容器中的所有增强</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    <span class="comment">//验证beanClass是否该被代理，如果应该，则返回适用于这个bean的增强</span></span><br><span class="line">    <span class="keyword">List</span>&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">    extendAdvisors(eligibleAdvisors);</span><br><span class="line">    <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">        eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方这个获取增强又分成了2部分，获取全部和根据全部处理bean相关的</p><h6><span id="获取全部增强">获取全部增强</span></h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line"><span class="comment">// 调用父类的方法加载配置文件中的AOP声明（注解与XML都存在的时候）</span></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.aspectJAdvisorsBuilder != <span class="literal">null</span>) &#123;</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的方法就是获取所有的增强的代码实现了，方法比较长，不过主要逻辑很少</p><ol><li>获取所有beanName</li><li>找出所有标记Aspect注解的类</li><li>对标记Aspect的类提取增强器</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">List</span>&lt;Advisor&gt; buildAspectJAdvisors() &#123;</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"><span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="built_in">List</span>&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">aspectNames = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                    <span class="comment">//获取所有的bean</span></span><br><span class="line"><span class="built_in">String</span>[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line"><span class="keyword">this</span>.beanFactory, <span class="built_in">Object</span>.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">String</span> beanName : beanNames) &#123;</span><br><span class="line">                      <span class="comment">//校验不合法的类，Spring的一个扩展点，可以从子类中做排除切面的操作</span></span><br><span class="line"><span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取bean的类型</span></span><br><span class="line">Class&lt;?&gt; beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line"><span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="comment">//是否带有Aspect注解</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">aspectNames.add(beanName);</span><br><span class="line">AspectMetadata amd = <span class="keyword">new</span> AspectMetadata(beanType, beanName);</span><br><span class="line"><span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> =</span><br><span class="line"><span class="keyword">new</span> BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">                                        <span class="comment">//解析所有的增强方法，下面说</span></span><br><span class="line"><span class="built_in">List</span>&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.aspectFactoryCache.put(beanName, <span class="keyword">factory</span>);</span><br><span class="line">&#125;</span><br><span class="line">advisors.addAll(classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line"><span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">&#125;</span><br><span class="line">MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> =</span><br><span class="line"><span class="keyword">new</span> PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line"><span class="keyword">this</span>.aspectFactoryCache.put(beanName, <span class="keyword">factory</span>);</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span>&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">String</span> aspectName : aspectNames) &#123;</span><br><span class="line"><span class="built_in">List</span>&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line"><span class="keyword">if</span> (cachedAdvisors != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.addAll(cachedAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> = <span class="keyword">this</span>.aspectFactoryCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是各个增强器的获取方法的实现</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Advisor&gt; getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory) &#123;</span><br><span class="line">        <span class="comment">//获取所有Aspect类、类名称、并校验</span></span><br><span class="line">Class&lt;?&gt; aspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line"><span class="keyword">String</span> aspectName = aspectInstanceFactory.getAspectMetadata().getAspectName();</span><br><span class="line">validate(aspectClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line"><span class="keyword">new</span> LazySingletonAspectInstanceFactoryDecorator(aspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//取出类的所有方法</span></span><br><span class="line"><span class="keyword">for</span> (Method method : getAdvisorMethods(aspectClass)) &#123;</span><br><span class="line">            <span class="comment">//获取增强方法，往下看</span></span><br><span class="line">Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, advisors.<span class="built_in">size</span>(), aspectName);</span><br><span class="line"><span class="keyword">if</span> (advisor != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.<span class="built_in">add</span>(advisor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要增强且配置了延迟增强则在第一个位置添加同步实例化增强方法</span></span><br><span class="line"><span class="keyword">if</span> (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">Advisor instantiationAdvisor = <span class="keyword">new</span> SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">advisors.<span class="built_in">add</span>(<span class="number">0</span>, instantiationAdvisor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性中配置DeclareParents注解的增强</span></span><br><span class="line"><span class="keyword">for</span> (Field field : aspectClass.getDeclaredFields()) &#123;</span><br><span class="line">Advisor advisor = getDeclareParentsAdvisor(field);</span><br><span class="line"><span class="keyword">if</span> (advisor != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.<span class="built_in">add</span>(advisor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通增强的获取</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Advisor getAdvisor(<span class="function"><span class="keyword">Method</span> <span class="title">candidateAdviceMethod</span>, <span class="title">MetadataAwareAspectInstanceFactory</span> <span class="title">aspectInstanceFactory</span>,</span></span><br><span class="line"><span class="function"><span class="title">int</span> <span class="title">declarationOrderInAspect</span>, <span class="title">String</span> <span class="title">aspectName</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">validate(aspectInstanceFactory.getAspectMetadata().getAspectClass());</span></span></span><br><span class="line"><span class="function"><span class="comment">        //获取切点</span></span></span><br><span class="line"><span class="function"><span class="comment">AspectJExpressionPointcut expressionPointcut = getPointcut(</span></span></span><br><span class="line"><span class="function"><span class="comment">candidateAdviceMethod, aspectInstanceFactory.getAspectMetadata().getAspectClass());</span></span></span><br><span class="line"><span class="function"><span class="comment">if (expressionPointcut == null) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">return null;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function">        //根据切点生成增强</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">new</span> <span class="title">InstantiationModelAwarePointcutAdvisorImpl</span><span class="params">(expressionPointcut, candidateAdviceMethod,</span></span></span><br><span class="line"><span class="function"><span class="params">this, aspectInstanceFactory, declarationOrderInAspect, aspectName)</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码又分为了两部分，先看一下切点信息的获取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InstantiationModelAwarePointcutAdvisorImpl(AspectJExpressionPointcut declaredPointcut,</span><br><span class="line">Method aspectJAdviceMethod, AspectJAdvisorFactory aspectJAdvisorFactory,</span><br><span class="line">MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.declaredPointcut = declaredPointcut;</span><br><span class="line"><span class="keyword">this</span>.declaringClass = aspectJAdviceMethod.getDeclaringClass();</span><br><span class="line"><span class="keyword">this</span>.methodName = aspectJAdviceMethod.getName();</span><br><span class="line"><span class="keyword">this</span>.parameterTypes = aspectJAdviceMethod.getParameterTypes();</span><br><span class="line"><span class="keyword">this</span>.aspectJAdviceMethod = aspectJAdviceMethod;</span><br><span class="line"><span class="keyword">this</span>.aspectJAdvisorFactory = aspectJAdvisorFactory;</span><br><span class="line"><span class="keyword">this</span>.aspectInstanceFactory = aspectInstanceFactory;</span><br><span class="line"><span class="keyword">this</span>.declarationOrder = declarationOrder;</span><br><span class="line"><span class="keyword">this</span>.aspectName = aspectName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">Pointcut preInstantiationPointcut = Pointcuts.union(</span><br><span class="line">aspectInstanceFactory.getAspectMetadata().getPerClausePointcut(), <span class="keyword">this</span>.declaredPointcut);</span><br><span class="line"><span class="keyword">this</span>.pointcut = new PerTargetInstantiationModelPointcut(</span><br><span class="line"><span class="keyword">this</span>.declaredPointcut, preInstantiationPointcut, aspectInstanceFactory);</span><br><span class="line"><span class="keyword">this</span>.lazy = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.pointcut = <span class="keyword">this</span>.declaredPointcut;</span><br><span class="line"><span class="keyword">this</span>.lazy = <span class="literal">false</span>;</span><br><span class="line">           <span class="comment">//初始化对应的增强器，重点</span></span><br><span class="line"><span class="keyword">this</span>.instantiatedAdvice = instantiateAdvice(<span class="keyword">this</span>.declaredPointcut);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里之后获取所有的增强这个流程就快要完毕了</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Advice instantiateAdvice(AspectJExpressionPointcut pointcut) &#123;</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line">Advice advice = <span class="built_in">this</span>.aspectJAdvisorFactory.getAdvice(<span class="built_in">this</span>.aspectJAdviceMethod, pointcut,</span><br><span class="line"><span class="built_in">this</span>.aspectInstanceFactory, <span class="built_in">this</span>.declarationOrder, <span class="built_in">this</span>.aspectName);</span><br><span class="line"><span class="keyword">return</span> (advice != <span class="literal">null</span> ? advice : <span class="type">EMPTY_ADVICE</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,</span><br><span class="line">MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, <span class="keyword">String</span> aspectName) &#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; candidateAspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line">validate(candidateAspectClass);</span><br><span class="line"></span><br><span class="line">AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line"><span class="keyword">if</span> (aspectJAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isAspect(candidateAspectClass)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AopConfigException</span>(<span class="string">"Advice must be declared inside an aspect type: "</span> +</span><br><span class="line"><span class="string">"Offending method '"</span> + candidateAdviceMethod + <span class="string">"' in class ["</span> +</span><br><span class="line">candidateAspectClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Found AspectJ method: "</span> + candidateAdviceMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AbstractAspectJAdvice springAdvice;</span><br><span class="line">        <span class="comment">//根据不同的注解类型封装不同的增强器</span></span><br><span class="line"><span class="keyword">switch</span> (aspectJAnnotation.getAnnotationType()) &#123;</span><br><span class="line"><span class="keyword">case</span> AtBefore:<span class="type"></span></span><br><span class="line"><span class="type">springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJMethodBeforeAdvice</span>(</span><br><span class="line">candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AtAfter:<span class="type"></span></span><br><span class="line"><span class="type">springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterAdvice</span>(</span><br><span class="line">candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AtAfterReturning:<span class="type"></span></span><br><span class="line"><span class="type">springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterReturningAdvice</span>(</span><br><span class="line">candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(afterReturningAnnotation.returning())) &#123;</span><br><span class="line">springAdvice.setReturningName(afterReturningAnnotation.returning());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AtAfterThrowing:<span class="type"></span></span><br><span class="line"><span class="type">springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterThrowingAdvice</span>(</span><br><span class="line">candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(afterThrowingAnnotation.throwing())) &#123;</span><br><span class="line">springAdvice.setThrowingName(afterThrowingAnnotation.throwing());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AtAround:<span class="type"></span></span><br><span class="line"><span class="type">springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAroundAdvice</span>(</span><br><span class="line">candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AtPointcut:<span class="type"></span></span><br><span class="line"><span class="type">if </span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Processing pointcut '"</span> + candidateAdviceMethod.getName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="type"></span></span><br><span class="line"><span class="type">throw new UnsupportedOperationException</span>(</span><br><span class="line"><span class="string">"Unsupported advice type on method: "</span> + candidateAdviceMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">springAdvice.setAspectName(aspectName);</span><br><span class="line">springAdvice.setDeclarationOrder(declarationOrder);</span><br><span class="line"><span class="keyword">String</span>[] argNames = <span class="built_in">this</span>.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);</span><br><span class="line"><span class="keyword">if</span> (argNames != <span class="literal">null</span>) &#123;</span><br><span class="line">springAdvice.setArgumentNamesFromStringArray(argNames);</span><br><span class="line">&#125;</span><br><span class="line">springAdvice.calculateArgumentBindings();</span><br><span class="line"><span class="keyword">return</span> springAdvice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="获取匹配增强">获取匹配增强</span></h6><p>经过上方的长篇大论，我们终于完成了所有的增强器的解析，还记得刚才的方法走到哪了么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">List</span>&lt;Advisor&gt; findEligibleAdvisors(<span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">beanClass</span>, <span class="title">String</span> <span class="title">beanName</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//获取全部增强</span></span><br><span class="line"><span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line"><span class="keyword">List</span>&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">extendAdvisors(eligibleAdvisors);</span><br><span class="line"><span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看怎么为当前的Bean匹配自己的增强吧</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">List</span>&lt;Advisor&gt; findAdvisorsThatCanApply(</span><br><span class="line"><span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors, <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">beanClass</span>, <span class="title">String</span> <span class="title">beanName</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line"><span class="keyword">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;Advisor&gt; findAdvisorsThatCanApply(<span class="keyword">List</span>&lt;Advisor&gt; candidateAdvisors, <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">clazz</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> candidateAdvisors;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">List</span>&lt;Advisor&gt; eligibleAdvisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">            <span class="comment">//处理引介增强，重点，再往下看</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123;</span><br><span class="line">                eligibleAdvisors.add(candidate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> hasIntroductions = !eligibleAdvisors.isEmpty();</span><br><span class="line">        <span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对普通bean的处理</span></span><br><span class="line">            <span class="keyword">if</span> (canApply(candidate, clazz, hasIntroductions)) &#123;</span><br><span class="line">                eligibleAdvisors.add(candidate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>引介增强与普通bean的处理最后都是进的同一个方法，只不过是引介增强的第三个参数默认使用的false</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> canApply(Advisor advisor, <span class="keyword">Class</span>&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions) &#123;</span><br><span class="line">    <span class="comment">//如果存在排除的配置</span></span><br><span class="line">    <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">        PointcutAdvisor pca = (PointcutAdvisor) advisor;</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line">        <span class="keyword">return</span> canApply(pca.getPointcut(), targetClass, hasIntroductions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> canApply(Pointcut pc, <span class="keyword">Class</span>&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions) &#123;</span><br><span class="line">    Assert.notNull(pc, <span class="string">"Pointcut must not be null"</span>);</span><br><span class="line">    <span class="comment">//切点上是否存在排除类的配置</span></span><br><span class="line">    <span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证注解的作用域是否可以作用于方法上</span></span><br><span class="line">    MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line">    <span class="keyword">if</span> (methodMatcher == MethodMatcher.<span class="keyword">TRUE</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntroductionAwareMethodMatcher introductionAwareMethodMatcher = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (methodMatcher <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">        introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="keyword">Class</span>&lt;?&gt;&gt; classes = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">Class</span>&lt;?&gt;&gt;(ClassUtils.getAllInterfacesForClassAsSet(targetClass));</span><br><span class="line">    classes.add(targetClass);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">Class</span>&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//获取类所实现的所有接口和所有类层级的方法，循环验证</span></span><br><span class="line">            <span class="keyword">if</span> ((introductionAwareMethodMatcher != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) ||</span><br><span class="line">                    methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在所有的bean对应的增强都已经获取到了，那么就可以根据类的所有增强数组创建代理</p><h5><span id="创建代理">创建代理</span></h5><p>回到最上方开始获取增强的地方，当增强获取到之后就可以执行下面这个操作了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object createProxy(Class&lt;?&gt; beanClass, <span class="meta">@Nullable</span> String beanName,</span><br><span class="line"><span class="meta">@Nullable</span> Object[] specificInterceptors, TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProxyFactory proxyFactory = new ProxyFactory();</span><br><span class="line">        使用proxyFactory对象copy当前类中的相关属性</span><br><span class="line">proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//判断是否使用Cglib动态代理</span></span><br><span class="line"><span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">          <span class="comment">//如果配置开启使用则直接设置开启</span></span><br><span class="line"><span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">proxyFactory.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果没有配置开启则判断bean是否有合适的接口使用JDK的动态代理（JDK动态代理必须是带有接口的类，如果类没有实现任何接口则只能使用Cglib动态代理）</span></span><br><span class="line">            <span class="comment">//关于代理的基础知识可以参考我的另一篇文章：https://mp.weixin.qq.com/s/1DRmvuky5_NMRcH-toTLqQ</span></span><br><span class="line">evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//添加所有增强</span></span><br><span class="line">Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">proxyFactory.addAdvisors(advisors);</span><br><span class="line">        <span class="comment">//设置要代理的类</span></span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line">        <span class="comment">//Spring的一个扩展点，默认实现为空。留给我们在需要对代理进行特殊操作的时候实现</span></span><br><span class="line">customizeProxyFactory(proxyFactory);</span><br><span class="line">proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">proxyFactory.setPreFiltered(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//使用代理工厂获取代理对象</span></span><br><span class="line"><span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="获取代理对象">获取代理对象</span></h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object getProxy(@Nullable ClassLoader classLoader) &#123;</span><br><span class="line"><span class="built_in">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> final synchronized AopProxy createAopProxy() &#123;</span><br><span class="line"><span class="built_in">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">activate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> AopProxy createAopProxy(AdvisedSupport <span class="built_in">config</span>) throws AopConfigException &#123;</span><br><span class="line"><span class="built_in">if</span> (<span class="built_in">config</span>.isOptimize() || <span class="built_in">config</span>.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(<span class="built_in">config</span>)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = <span class="built_in">config</span>.getTargetClass();</span><br><span class="line"><span class="built_in">if</span> (targetClass == null) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line"><span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(<span class="built_in">config</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(<span class="built_in">config</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">else</span> &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(<span class="built_in">config</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="增强何时调用">增强何时调用？</span></h6><p>代理创建出来了，那么我们的前置增强、后置增强、环绕增强等是如何在代理中体现的呢，对代理模式还不熟悉的同学一定要先看一下这篇文章呦：<a href="https://mp.weixin.qq.com/s/1DRmvuky5_NMRcH-toTLqQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1DRmvuky5_NMRcH-toTLqQ</a><br>这里就简单看一下JDK动态代理的实现吧</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Throwable</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">MethodInvocation invocation;</span></span></span><br><span class="line"><span class="function"><span class="comment">Object oldProxy = null;</span></span></span><br><span class="line"><span class="function"><span class="comment">boolean setProxyContext = false;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">TargetSource targetSource = this.advised.targetSource;</span></span></span><br><span class="line"><span class="function"><span class="comment">Object target = null;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">try &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">            //equals方法处理</span></span></span><br><span class="line"><span class="function"><span class="comment">if (!this.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">return equals(args[0]);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function">            //<span class="title">hash</span>代码处理</span></span><br><span class="line"><span class="function"><span class="title">else</span> <span class="title">if</span> <span class="params">(!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(<span class="keyword">method</span>)</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">return hashCode();</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">else</span> <span class="title">if</span> <span class="params">(<span class="keyword">method</span>.getDeclaringClass()</span> == <span class="title">DecoratingProxy</span>.<span class="title">class</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">return AopProxyUtils.ultimateTargetClass(this.advised);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">else</span> <span class="title">if</span> <span class="params">(!this.advised.opaque &amp;&amp; <span class="keyword">method</span>.getDeclaringClass()</span>.<span class="title">isInterface</span><span class="params">()</span> &amp;&amp;</span></span><br><span class="line"><span class="function"><span class="title">method</span>.<span class="title">getDeclaringClass</span><span class="params">()</span>.<span class="title">isAssignableFrom</span><span class="params">(Advised.<span class="keyword">class</span>)</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span></span><br><span class="line"><span class="function"><span class="comment">return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Object</span> <span class="title">retVal</span>;</span></span><br><span class="line">            <span class="comment">//如果配置内部方法调用的增强</span></span><br><span class="line"><span class="keyword">if</span> (this.advised.exposeProxy) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">oldProxy = AopContext.setCurrentProxy(proxy);</span></span><br><span class="line"><span class="comment">setProxyContext = true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line"><span class="keyword">Class</span>&lt;?&gt; targetClass = (target != null ? target.getClass() : null);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前方法的拦截器链</span></span><br><span class="line">List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(<span class="function"><span class="keyword">method</span>, <span class="title">targetClass</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">                //如果没有拦截器直接调用切点方法</span></span><br><span class="line"><span class="comment">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span></span><br><span class="line"><span class="comment">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span></span><br><span class="line"><span class="comment">                //执行拦截器链，重点，往下看</span></span><br><span class="line"><span class="comment">retVal = invocation.proceed();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Class</span>&lt;?&gt; returnType = <span class="function"><span class="keyword">method</span>.<span class="title">getReturnType</span><span class="params">()</span>;</span></span><br><span class="line">            <span class="comment">//返回结果</span></span><br><span class="line"><span class="keyword">if</span> (retVal != null &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp;</span><br><span class="line">!RawTargetAccess.class.isAssignableFrom(<span class="function"><span class="keyword">method</span>.<span class="title">getDeclaringClass</span><span class="params">()</span>)) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">retVal = proxy;</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">else</span> <span class="title">if</span> <span class="params">(retVal == null &amp;&amp; returnType != Void.<span class="keyword">TYPE</span> &amp;&amp; returnType.isPrimitive()</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">throw new AopInvocationException(</span></span></span><br><span class="line"><span class="function"><span class="comment">"Null return value from advice does not match primitive return type for: " + method);</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">retVal</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (target != null &amp;&amp; !targetSource.isStatic()) &#123;</span></span><br><span class="line"><span class="comment">targetSource.releaseTarget(target);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="keyword">if</span> (setProxyContext) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">AopContext.setCurrentProxy(oldProxy);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完上方的代码，可以猜到，所有的增强都在这个拦截器里面了，那么这个拦截器又是如何实现的呢</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object proceed() throws Throwable &#123;</span><br><span class="line"><span class="comment">//执行完所有的增强后执行切点方法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//获取下一个要执行的拦截器</span></span><br><span class="line">Object interceptorOrInterceptionAdvice =</span><br><span class="line"><span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.<span class="keyword">get</span>(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) &#123;</span><br><span class="line">InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, <span class="keyword">this</span>.targetClass, <span class="keyword">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Dynamic matching failed.</span></span><br><span class="line"><span class="comment">// Skip this interceptor and invoke the next in the chain.</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It's an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此SpringAOP的源码解析已经完成</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解的SpringAOP源码解析（二）</title>
      <link href="/2019/08/15/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/08/15/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://mp.weixin.qq.com/s/yMw1MZIRjQ4c504SSuPFaw" target="_blank" rel="noopener">上篇文章</a><br>中我们搭建了一个阅读源码的demo工程，然后简单介绍了一下<code>@EnableAspectJAutoProxy</code>注解，这个注解最重要的功能就是为向Spring中注入了一个bean<code>AnnotationAwareAspectJAutoProxyCreator</code>,本篇文章就继续来撸AOP的源码</p><p>前文已经简单提到了这个类的功能，不过这里还是要先看一下这个类的继承图<br><img src="/2019/08/15/基于注解的SpringAOP源码解析（二）/1.png" alt=""><br>观察类图可知，AnnotationAwareAspectJAutoProxyCreator这个类间接实现了BeanPostProcessor接口。还记得我们之前在对SpringIOC的源码进行解析时提到过，Spring在实例化Bean的前后会分别调用方法<code>postProcessBeforeInstantiation</code>和<code>postProcessAfterInstantiation</code><br>而AOP的整体逻辑就是通过这两个方法来实现的</p><h4><span id="postprocessbeforeinstantiation"><code>postProcessBeforeInstantiation</code></span></h4><p>首先看一下这个<code>postProcessBeforeInstantiation</code>方法，它是在bean实例化之前调用的，主要是针对切面类。这个方法不在AnnotationAwareAspectJAutoProxyCreator这个类中，而是在其父类AbstractAutoProxyCreator中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException &#123;</span><br><span class="line">Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//加载所有增强</span></span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, <span class="built_in">Boolean</span>.FALSE);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line"><span class="keyword">if</span> (targetSource != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="加载增强">加载增强</span></h5><p>上方代码中最重要的一个方法就是shouldSkip方法了，这个方法被AspectJAwareAdvisorAutoProxyCreator所重载</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> boolean shouldSkip(Class&lt;?&gt; beanClass, String beanName) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//查找所有标识了@Aspect注解的类，这里是重点，接着往下看</span></span><br><span class="line">    List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">    <span class="keyword">for</span> (Advisor advisor : candidateAdvisors) &#123;</span><br><span class="line">        <span class="keyword">if</span> (advisor instanceof AspectJPointcutAdvisor) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((AbstractAspectJAdvice) advisor.getAdvice()).getAspectName().equals(beanName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.shouldSkip(beanClass, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> List&lt;Advisor&gt; findCandidateAdvisors() &#123;</span><br><span class="line">        List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line">        <span class="comment">//buildAspectJAdvisors是重点</span></span><br><span class="line">           advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">        <span class="keyword">return</span> advisors;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一个长方法buildAspectJAdvisors</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public <span class="built_in">List</span>&lt;Advisor&gt; buildAspectJAdvisors() &#123;</span><br><span class="line"><span class="comment">//所有Aspect类的名称集合</span></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line">    <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">        synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">            aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line">            <span class="comment">//这个双重检查是不是在学习安全的单例模式的时候见过</span></span><br><span class="line">            <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="built_in">List</span>&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">                aspectNames = <span class="keyword">new</span> LinkedList&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">                <span class="comment">//获取所有Bean名称</span></span><br><span class="line">                <span class="built_in">String</span>[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">                        <span class="keyword">this</span>.beanFactory, <span class="built_in">Object</span>.<span class="keyword">class</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">String</span> beanName : beanNames) &#123;</span><br><span class="line">                    <span class="comment">//判断是否符合条件，比如说有时会排除一些类，不让这些类注入进Spring</span></span><br><span class="line">                    <span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">           </span><br><span class="line">                    Class&lt;?&gt; beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//判断Bean的Class上是否标识@Aspect注解</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">                        aspectNames.add(beanName);</span><br><span class="line">                        AspectMetadata amd = <span class="keyword">new</span> AspectMetadata(beanType, beanName);</span><br><span class="line">                        <span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">                            MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> =</span><br><span class="line">                                    <span class="keyword">new</span> BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">                            <span class="comment">//下一步说，重点的重点</span></span><br><span class="line">                            <span class="built_in">List</span>&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>);</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                                <span class="comment">//将解析的Bean名称及类上的增强缓存起来,每个Bean只解析一次</span></span><br><span class="line">                                <span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">this</span>.aspectFactoryCache.put(beanName, <span class="keyword">factory</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            advisors.addAll(classAdvisors);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line">                                        <span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> =</span><br><span class="line">                                    <span class="keyword">new</span> PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">                            <span class="keyword">this</span>.aspectFactoryCache.put(beanName, <span class="keyword">factory</span>);</span><br><span class="line">                            advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line">                <span class="keyword">return</span> advisors;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">List</span>&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">String</span> aspectName : aspectNames) &#123;</span><br><span class="line">        <span class="comment">//从缓存中获取当前Bean的切面实例，如果不为空，则指明当前Bean的Class标识了@Aspect，且有切面方法</span></span><br><span class="line">        <span class="built_in">List</span>&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line">        <span class="keyword">if</span> (cachedAdvisors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            advisors.addAll(cachedAdvisors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            MetadataAwareAspectInstanceFactory <span class="keyword">factory</span> = <span class="keyword">this</span>.aspectFactoryCache.<span class="keyword">get</span>(aspectName);</span><br><span class="line">            advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(<span class="keyword">factory</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="生成增强">生成增强</span></h6><p>advisorFactory.getAdvisors方法会从@Aspect标识的类上获取@Before，@Pointcut等注解的信息及其标识的方法的信息，生成增强</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Advisor&gt; getAdvisors(MetadataAwareAspectInstanceFactory aspectInstanceFactory) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">aspectClass</span> = <span class="title">aspectInstanceFactory</span>.<span class="title">getAspectMetadata</span>().<span class="title">getAspectClass</span>();</span></span><br><span class="line">    String aspectName = aspectInstanceFactory.getAspectMetadata().getAspectName();</span><br><span class="line">    //校验类的合法性相关</span><br><span class="line">    validate(aspectClass);</span><br><span class="line"></span><br><span class="line">    MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line">            <span class="keyword">new</span> LazySingletonAspectInstanceFactoryDecorator(aspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">    List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">    //获取这个类所有的增强方法</span><br><span class="line">    <span class="keyword">for</span> (<span class="function"><span class="keyword">Method</span> <span class="title">method</span> :</span> getAdvisorMethods(aspectClass)) &#123;</span><br><span class="line">        //生成增强实例</span><br><span class="line">        Advisor advisor = getAdvisor(<span class="function"><span class="keyword">method</span>, <span class="title">lazySingletonAspectInstanceFactory</span>, <span class="title">advisors</span>.<span class="title">size</span>(</span>), aspectName);</span><br><span class="line">        <span class="keyword">if</span> (advisor != <span class="literal">null</span>) &#123;</span><br><span class="line">            advisors.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">        Advisor instantiationAdvisor = <span class="keyword">new</span> SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">        advisors.add(<span class="number">0</span>, instantiationAdvisor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">Field</span> <span class="keyword">field</span> : aspectClass.getDeclaredFields()) &#123;</span><br><span class="line">        Advisor advisor = getDeclareParentsAdvisor(<span class="keyword">field</span>);</span><br><span class="line">        <span class="keyword">if</span> (advisor != <span class="literal">null</span>) &#123;</span><br><span class="line">            advisors.add(advisor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取类的的方法</span><br><span class="line"><span class="keyword">private</span> List&lt;<span class="function"><span class="keyword">Method</span>&gt; <span class="title">getAdvisorMethods</span>(</span><span class="class"><span class="keyword">Class</span>&lt;?&gt; <span class="title">aspectClass</span>) &#123;</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;<span class="function"><span class="keyword">Method</span>&gt; <span class="title">methods</span> =</span> <span class="keyword">new</span> LinkedList&lt;<span class="function"><span class="keyword">Method</span>&gt;(</span>);</span><br><span class="line">    ReflectionUtils.doWithMethods(aspectClass, <span class="keyword">new</span> ReflectionUtils.MethodCallback() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> void doWith(<span class="function"><span class="keyword">Method</span> <span class="title">method</span>) <span class="title">throws</span> <span class="title">IllegalArgumentException</span> &#123;</span></span><br><span class="line">                //在@Aspect标识的类内部排除@Pointcut标识之外的所有方法，得到的方法集合包括继承自父类的方法，包括继承自Object的方法</span><br><span class="line">            <span class="keyword">if</span> (AnnotationUtils.getAnnotation(<span class="function"><span class="keyword">method</span>, <span class="title">Pointcut</span>.<span class="title">class</span>) =</span>= <span class="literal">null</span>) &#123;</span><br><span class="line">                methods.add(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //对得到的所有方法排序，</span><br><span class="line">    //如果方法标识了切面注解，则按@Around, @Before, @After, @AfterReturning, @AfterThrowing的顺序排序</span><br><span class="line">    //如果没有标识这些注解，则按方法名称的字符串排序,</span><br><span class="line">    //有注解的方法排在无注解的方法之前</span><br><span class="line">    //最后的排序应该是这样的Around.class, Before.class, After.class, AfterReturning.class, AfterThrowing.class。。。</span><br><span class="line">    Collections.sort(methods, METHOD_COMPARATOR);</span><br><span class="line">    <span class="keyword">return</span> methods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用生成增强实例的方法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Advisor getAdvisor(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aspectInstanceFactory,</span><br><span class="line">        int declarationOrderInAspect, <span class="keyword">String</span> aspectName) &#123;</span><br><span class="line">    <span class="comment">//再次校验类的合法性</span></span><br><span class="line">    validate(aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line">    <span class="comment">//切点表达式的包装类里面包含这些东西：execution(public * cn.shiyujun.service.IOCService.hollo(..))</span></span><br><span class="line">    AspectJExpressionPointcut expressionPointcut = getPointcut(</span><br><span class="line">            candidateAdviceMethod, aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line">    <span class="keyword">if</span> (expressionPointcut == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据方法、切点、AOP实例工厂、类名、序号生成切面实例，详细代码往下看</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">InstantiationModelAwarePointcutAdvisorImpl</span>(expressionPointcut, candidateAdviceMethod,</span><br><span class="line">            <span class="built_in">this</span>, aspectInstanceFactory, declarationOrderInAspect, aspectName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AspectJExpressionPointcut getPointcut(Method candidateAdviceMethod, Class&lt;?&gt; candidateAspectClass) &#123;</span><br><span class="line">    <span class="comment">//查询方法上的切面注解，根据注解生成相应类型的AspectJAnnotation,在调用AspectJAnnotation的构造函数的同时</span></span><br><span class="line">    <span class="comment">//根据注解value或pointcut属性得到切点表达式，有argNames则设置参数名称</span></span><br><span class="line">    AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">            AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">    <span class="comment">//过滤那些不含@Before, @Around, @After, @AfterReturning, @AfterThrowing注解的方法</span></span><br><span class="line">    <span class="keyword">if</span> (aspectJAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成带表达式的切面切入点，设置其切入点表达式</span></span><br><span class="line">    AspectJExpressionPointcut ajexp =</span><br><span class="line">            <span class="keyword">new</span> <span class="type">AspectJExpressionPointcut</span>(candidateAspectClass, <span class="keyword">new</span> <span class="type">String</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="type">Class</span>&lt;?&gt;[<span class="number">0</span>]);</span><br><span class="line">    ajexp.setExpression(aspectJAnnotation.getPointcutExpression());</span><br><span class="line">    ajexp.setBeanFactory(<span class="built_in">this</span>.beanFactory);</span><br><span class="line">    <span class="keyword">return</span> ajexp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InstantiationModelAwarePointcutAdvisorImpl的构造方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InstantiationModelAwarePointcutAdvisorImpl(AspectJExpressionPointcut declaredPointcut,</span><br><span class="line">Method aspectJAdviceMethod, AspectJAdvisorFactory aspectJAdvisorFactory,</span><br><span class="line">MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, String aspectName) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.declaredPointcut = declaredPointcut;</span><br><span class="line"><span class="keyword">this</span>.declaringClass = aspectJAdviceMethod.getDeclaringClass();</span><br><span class="line"><span class="keyword">this</span>.methodName = aspectJAdviceMethod.getName();</span><br><span class="line"><span class="keyword">this</span>.parameterTypes = aspectJAdviceMethod.getParameterTypes();</span><br><span class="line"><span class="keyword">this</span>.aspectJAdviceMethod = aspectJAdviceMethod;</span><br><span class="line"><span class="keyword">this</span>.aspectJAdvisorFactory = aspectJAdvisorFactory;</span><br><span class="line"><span class="keyword">this</span>.aspectInstanceFactory = aspectInstanceFactory;</span><br><span class="line"><span class="keyword">this</span>.declarationOrder = declarationOrder;</span><br><span class="line"><span class="keyword">this</span>.aspectName = aspectName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">Pointcut preInstantiationPointcut = Pointcuts.union(</span><br><span class="line">aspectInstanceFactory.getAspectMetadata().getPerClausePointcut(), <span class="keyword">this</span>.declaredPointcut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.pointcut = new PerTargetInstantiationModelPointcut(</span><br><span class="line"><span class="keyword">this</span>.declaredPointcut, preInstantiationPointcut, aspectInstanceFactory);</span><br><span class="line"><span class="keyword">this</span>.lazy = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.pointcut = <span class="keyword">this</span>.declaredPointcut;</span><br><span class="line"><span class="keyword">this</span>.lazy = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//重点在这里</span></span><br><span class="line"><span class="keyword">this</span>.instantiatedAdvice = instantiateAdvice(<span class="keyword">this</span>.declaredPointcut);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Advice instantiateAdvice(AspectJExpressionPointcut pointcut) &#123;</span><br><span class="line">    <span class="comment">//再往下看</span></span><br><span class="line">Advice advice = <span class="keyword">this</span>.aspectJAdvisorFactory.getAdvice(<span class="keyword">this</span>.aspectJAdviceMethod, pointcut,</span><br><span class="line"><span class="keyword">this</span>.aspectInstanceFactory, <span class="keyword">this</span>.declarationOrder, <span class="keyword">this</span>.aspectName);</span><br><span class="line"><span class="keyword">return</span> (advice != <span class="literal">null</span> ? advice : EMPTY_ADVICE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成增强</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectiveAspectJAdvisorFactory</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">AbstractAspectJAdvisorFactory</span></span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Advice getAdvice(Method candidateAdviceMethod, AspectJExpressionPointcut expressionPointcut,</span><br><span class="line">            MetadataAwareAspectInstanceFactory aspectInstanceFactory, int declarationOrder, <span class="keyword">String</span> aspectName) &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; candidateAspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line">        <span class="comment">//又是一次校验</span></span><br><span class="line">        validate(candidateAspectClass);</span><br><span class="line"></span><br><span class="line">        AspectJAnnotation&lt;?&gt; aspectJAnnotation =</span><br><span class="line">                AbstractAspectJAdvisorFactory.findAspectJAnnotationOnMethod(candidateAdviceMethod);</span><br><span class="line">        <span class="keyword">if</span> (aspectJAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isAspect(candidateAspectClass)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AopConfigException</span>(<span class="string">"Advice must be declared inside an aspect type: "</span> +</span><br><span class="line">                    <span class="string">"Offending method '"</span> + candidateAdviceMethod + <span class="string">"' in class ["</span> +</span><br><span class="line">                    candidateAspectClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Found AspectJ method: "</span> + candidateAdviceMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AbstractAspectJAdvice springAdvice;</span><br><span class="line">        <span class="comment">//根据注解类型生成不同的通知实例</span></span><br><span class="line">        <span class="keyword">switch</span> (aspectJAnnotation.getAnnotationType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> AtBefore:<span class="type"></span></span><br><span class="line"><span class="type">                springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJMethodBeforeAdvice</span>(</span><br><span class="line">                        candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AtAfter:<span class="type"></span></span><br><span class="line"><span class="type">                springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterAdvice</span>(</span><br><span class="line">                        candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AtAfterReturning:<span class="type"></span></span><br><span class="line"><span class="type">                springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterReturningAdvice</span>(</span><br><span class="line">                        candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">                AfterReturning afterReturningAnnotation = (AfterReturning) aspectJAnnotation.getAnnotation();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(afterReturningAnnotation.returning())) &#123;</span><br><span class="line">                    springAdvice.setReturningName(afterReturningAnnotation.returning());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AtAfterThrowing:<span class="type"></span></span><br><span class="line"><span class="type">                springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAfterThrowingAdvice</span>(</span><br><span class="line">                        candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">                AfterThrowing afterThrowingAnnotation = (AfterThrowing) aspectJAnnotation.getAnnotation();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(afterThrowingAnnotation.throwing())) &#123;</span><br><span class="line">                    springAdvice.setThrowingName(afterThrowingAnnotation.throwing());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AtAround:<span class="type"></span></span><br><span class="line"><span class="type">                springAdvice </span>= <span class="keyword">new</span> <span class="type">AspectJAroundAdvice</span>(</span><br><span class="line">                        candidateAdviceMethod, expressionPointcut, aspectInstanceFactory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AtPointcut:<span class="type"></span></span><br><span class="line"><span class="type">                if </span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">"Processing pointcut '"</span> + candidateAdviceMethod.getName() + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="type"></span></span><br><span class="line"><span class="type">                throw new UnsupportedOperationException</span>(</span><br><span class="line">                        <span class="string">"Unsupported advice type on method: "</span> + candidateAdviceMethod);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置通知方法所属的类</span></span><br><span class="line">        springAdvice.setAspectName(aspectName);</span><br><span class="line">        <span class="comment">//设置通知的序号,同一个类中有多个切面注解标识的方法时,按上方说的排序规则来排序，</span></span><br><span class="line">        <span class="comment">//其序号就是此方法在列表中的序号，第一个就是0</span></span><br><span class="line">        springAdvice.setDeclarationOrder(declarationOrder);</span><br><span class="line">        <span class="comment">//获取通知方法的所有参数</span></span><br><span class="line">        <span class="keyword">String</span>[] argNames = <span class="built_in">this</span>.parameterNameDiscoverer.getParameterNames(candidateAdviceMethod);</span><br><span class="line">        <span class="comment">//将通知方法上的参数设置到通知中</span></span><br><span class="line">        <span class="keyword">if</span> (argNames != <span class="literal">null</span>) &#123;</span><br><span class="line">            springAdvice.setArgumentNamesFromStringArray(argNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算参数绑定工作，此方法详解请接着往下看</span></span><br><span class="line">        springAdvice.calculateArgumentBindings();</span><br><span class="line">        <span class="keyword">return</span> springAdvice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验方法参数并绑定</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> synchronized <span class="keyword">final</span> void calculateArgumentBindings() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.argumentsIntrospected || <span class="keyword">this</span>.parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int numUnboundArgs = <span class="keyword">this</span>.parameterTypes.length;</span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = <span class="keyword">this</span>.aspectJAdviceMethod.getParameterTypes();</span><br><span class="line">    <span class="comment">//切面注解标识的方法第一个参数要求是JoinPoint,或StaticPart，若是@Around注解则也可以是ProceedingJoinPoint</span></span><br><span class="line">    <span class="keyword">if</span> (maybeBindJoinPoint(parameterTypes[<span class="number">0</span>]) || maybeBindProceedingJoinPoint(parameterTypes[<span class="number">0</span>])) &#123;</span><br><span class="line">        numUnboundArgs--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (maybeBindJoinPointStaticPart(parameterTypes[<span class="number">0</span>])) &#123;</span><br><span class="line">        numUnboundArgs--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (numUnboundArgs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//绑定属性</span></span><br><span class="line">        bindArgumentsByName(numUnboundArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.argumentsIntrospected = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> void bindArgumentsByName(int numArgumentsExpectingToBind) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.argumentNames == <span class="literal">null</span>) &#123; <span class="comment">//获取方法参数的名称</span></span><br><span class="line">        <span class="keyword">this</span>.argumentNames = createParameterNameDiscoverer().getParameterNames(<span class="keyword">this</span>.aspectJAdviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.argumentNames != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 往下看</span></span><br><span class="line">        bindExplicitArguments(numArgumentsExpectingToBind);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> new IllegalStateException(<span class="string">"Advice method ["</span> + <span class="keyword">this</span>.aspectJAdviceMethod.getName() + <span class="string">"] "</span> +</span><br><span class="line">                <span class="string">"requires "</span> + numArgumentsExpectingToBind + <span class="string">" arguments to be bound by name, but "</span> +</span><br><span class="line">                <span class="string">"the argument names were not specified and could not be discovered."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> void bindExplicitArguments(int numArgumentsLeftToBind) &#123;</span><br><span class="line">    <span class="comment">//此属性用来存储方法未绑定的参数名称，及参数的序号</span></span><br><span class="line">    <span class="keyword">this</span>.argumentBindings = new HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    int numExpectedArgumentNames = <span class="keyword">this</span>.aspectJAdviceMethod.getParameterTypes().length;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.argumentNames.length != numExpectedArgumentNames) &#123;</span><br><span class="line">        <span class="keyword">throw</span> new IllegalStateException(<span class="string">"Expecting to find "</span> + numExpectedArgumentNames +</span><br><span class="line">                <span class="string">" arguments to bind by name in advice, but actually found "</span> +</span><br><span class="line">                <span class="keyword">this</span>.argumentNames.length + <span class="string">" arguments."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// So we match in number...,argumentIndexOffset代表第一个未绑定参数的顺序 </span></span><br><span class="line">    int argumentIndexOffset = <span class="keyword">this</span>.parameterTypes.length - numArgumentsLeftToBind;</span><br><span class="line">    <span class="keyword">for</span> (int i = argumentIndexOffset; i &lt; <span class="keyword">this</span>.argumentNames.length; i++) &#123;</span><br><span class="line">        <span class="comment">//存储未绑定的参数名称及其顺序的映射关系</span></span><br><span class="line">        <span class="keyword">this</span>.argumentBindings.put(<span class="keyword">this</span>.argumentNames[i], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that returning and throwing were in the argument names list if</span></span><br><span class="line">    <span class="comment">// specified, and find the discovered argument types.</span></span><br><span class="line">    <span class="comment">//如果是@AfterReturning注解的returningName 有值，验证，解析，同时得到定义返回值的类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.returningName != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.argumentBindings.containsKey(<span class="keyword">this</span>.returningName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new IllegalStateException(<span class="string">"Returning argument name '"</span> + <span class="keyword">this</span>.returningName +</span><br><span class="line">                    <span class="string">"' was not bound in advice arguments"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Integer index = <span class="keyword">this</span>.argumentBindings.<span class="keyword">get</span>(<span class="keyword">this</span>.returningName);</span><br><span class="line">            <span class="keyword">this</span>.discoveredReturningType = <span class="keyword">this</span>.aspectJAdviceMethod.getParameterTypes()[index];</span><br><span class="line">            <span class="keyword">this</span>.discoveredReturningGenericType = <span class="keyword">this</span>.aspectJAdviceMethod.getGenericParameterTypes()[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是@AfterThrowing注解的throwingName 有值，验证，解析，同时得到抛出异常的类型</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.throwingName != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.argumentBindings.containsKey(<span class="keyword">this</span>.throwingName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new IllegalStateException(<span class="string">"Throwing argument name '"</span> + <span class="keyword">this</span>.throwingName +</span><br><span class="line">                    <span class="string">"' was not bound in advice arguments"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Integer index = <span class="keyword">this</span>.argumentBindings.<span class="keyword">get</span>(<span class="keyword">this</span>.throwingName);</span><br><span class="line">            <span class="keyword">this</span>.discoveredThrowingType = <span class="keyword">this</span>.aspectJAdviceMethod.getParameterTypes()[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// configure the pointcut expression accordingly.</span></span><br><span class="line">    configurePointcutParameters(argumentIndexOffset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> void configurePointcutParameters(int argumentIndexOffset) &#123;</span><br><span class="line">    int numParametersToRemove = argumentIndexOffset;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.returningName != <span class="literal">null</span>) &#123;</span><br><span class="line">        numParametersToRemove++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.throwingName != <span class="literal">null</span>) &#123;</span><br><span class="line">        numParametersToRemove++;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] pointcutParameterNames = new String[<span class="keyword">this</span>.argumentNames.length - numParametersToRemove];</span><br><span class="line">    Class&lt;?&gt;[] pointcutParameterTypes = new Class&lt;?&gt;[pointcutParameterNames.length];</span><br><span class="line">    Class&lt;?&gt;[] methodParameterTypes = <span class="keyword">this</span>.aspectJAdviceMethod.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    int index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.argumentNames.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; argumentIndexOffset) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argumentNames[i].equals(<span class="keyword">this</span>.returningName) ||</span><br><span class="line">            <span class="keyword">this</span>.argumentNames[i].equals(<span class="keyword">this</span>.throwingName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pointcutParameterNames[index] = <span class="keyword">this</span>.argumentNames[i];</span><br><span class="line">        pointcutParameterTypes[index] = methodParameterTypes[i];</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩余的未绑定的参数会赋值给AspectJExpressionPointcut(表达式形式的切入点)的属性，以备后续使用</span></span><br><span class="line">    <span class="keyword">this</span>.pointcut.setParameterNames(pointcutParameterNames);</span><br><span class="line">    <span class="keyword">this</span>.pointcut.setParameterTypes(pointcutParameterTypes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续<br>限于平台字数限制，本篇文章就到这里</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解的SpringAOP源码解析（一）</title>
      <link href="/2019/08/15/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/08/15/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringAOP%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4><span id="准备工作">准备工作</span></h4><p>本文会分析Spring的AOP模块的整体流程，分析过程需要使用一个简单的demo工程来启动Spring，demo工程我以备好，需要的童鞋自行在下方链接下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shiyujun/</span>spring-framework</span><br></pre></td></tr></table></figure><h5><span id="demo工程示例代码">Demo工程示例代码</span></h5><p>本文源码分析基于Spring5.0.0,所以pom文件中引入5.0的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后写一个简单的接口和实现类，跟IOC源码解析那几篇文章用的同一个工程，所以没有改名字</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOCService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hollo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOCService</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hollo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,IOC"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加bean的配置类，以及启动AOP</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class AnnotationConfig &#123;</span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public IOCService iocService()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">IOCServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建切点</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(<span class="meta-string">"execution(public * cn.shiyujun.service.IOCService.hollo(..))"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void testAOP()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(<span class="meta-string">"testAOP()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void before()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"before testAOP..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(<span class="meta-string">"testAOP()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void after()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"after testAOP..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(<span class="meta-string">"testAOP()"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> Object around(ProceedingJoinPoint p)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around before testAOP..."</span>);</span><br><span class="line">        Object o = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = p.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"around after testAOP..."</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Spring</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnnotationIOCDemo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">"cn.shiyujun.config"</span>);</span><br><span class="line">        IOCService iocService=context.getBean(IOCService.class);</span><br><span class="line">        System.<span class="keyword">out</span>.println(iocService.hollo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，demo工程准备完毕。我就不详细的说明了，直接开始看源码吧</p><h4><span id="enableaspectjautoproxy注解">@EnableAspectJAutoProxy注解</span></h4><p>可以看到，在最开始的demo工程中，为了开启AOP功能，我使用了一个@EnableAspectJAutoProxy注</p><p>进入这个注解可以查看到这个注解的2个属性，相信大家都已经很熟悉了，就不相信的说明了。除此之外可以看到这个注解使用<code>@Import</code>注解引入了一个配置类</p><blockquote><p>@Import注解：可以引入一个类，将这个类注入到Spring IOC容器中被当前Spring管理</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(AspectJAutoProxyRegistrar.class)</span><br><span class="line">public <span class="variable">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line">    <span class="comment">//proxyTargetClass属性，默认false，尝试采用JDK动态代理织入增强(如果当前类没有实现接口则还是会使用CGLIB)；如果设为true，则强制采用CGLIB动态代理织入增强</span></span><br><span class="line">    <span class="selector-tag">boolean</span> <span class="selector-tag">proxyTargetClass</span>() <span class="selector-tag">default</span> <span class="selector-tag">false</span>;</span><br><span class="line">    <span class="comment">//通过aop框架暴露该代理对象，aopContext能够访问。为了解决类内部方法之间调用时无法增强的问题</span></span><br><span class="line">    <span class="selector-tag">boolean</span> <span class="selector-tag">exposeProxy</span>() <span class="selector-tag">default</span> <span class="selector-tag">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这个配置类的操作</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> &#123;</span></span><br><span class="line">    AspectJAutoProxyRegistrar() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123;</span><br><span class="line">               <span class="comment">//注册一个AOP代理实现的Bean，往下看        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span></span><br><span class="line">        AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">if</span> (enableAspectJAutoProxy != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"proxyTargetClass"</span>)) &#123;</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"exposeProxy"</span>)) &#123;</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>registerAspectJAnnotationAutoProxyCreatorIfNecessary</code>方法的主要功能是注册或者升级<code>AnnotationAwareAspectJAutoProxyCreator</code>类</p><p>这个类在AOP中非常的重要，它的主要功能就是根据@Point注解定义的切点来自动代理与表达式匹配的类。<br>下面看一个这个实现的逻辑</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span>(<span class="params">Class&lt;?&gt; cls, BeanDefinitionRegistry registry, @Nullable Object source</span>) </span>&#123;</span><br><span class="line">        Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>); <span class="comment">//如果已存在这个bean</span></span><br><span class="line">        <span class="keyword">if</span> (registry.containsBeanDefinition(<span class="string">"org.springframework.aop.config.internalAutoProxyCreator"</span>)) &#123;</span><br><span class="line">            BeanDefinition apcDefinition = registry.getBeanDefinition(<span class="string">"org.springframework.aop.config.internalAutoProxyCreator"</span>);</span><br><span class="line">            <span class="comment">//判断优先级，如果优先级较高则替换原先的bean</span></span><br><span class="line">            <span class="keyword">if</span> (!cls.getName().<span class="keyword">equals</span>(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">                <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">                <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">                <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                    apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//注册AnnotationAwareAspectJAutoProxyCreator到容器中，此类负责基于注解的AOP动态代理实现</span></span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">            beanDefinition.setSource(source);</span><br><span class="line">            beanDefinition.getPropertyValues().<span class="keyword">add</span>(<span class="string">"order"</span>, <span class="number">-2147483648</span>);</span><br><span class="line">            beanDefinition.setRole(<span class="number">2</span>);</span><br><span class="line">            registry.registerBeanDefinition(<span class="string">"org.springframework.aop.config.internalAutoProxyCreator"</span>, beanDefinition);</span><br><span class="line">            <span class="keyword">return</span> beanDefinition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>未完待续<br>限于平台字数限制，本篇文章就到这里</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus-Operation钉钉报警</title>
      <link href="/2019/08/11/Prometheus-Operation%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6/"/>
      <url>/2019/08/11/Prometheus-Operation%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章基于Prometheus-Operation，收集Redis、MySQL、RabbitMQ的监控信息并报警</p></blockquote><h5><span id="redis钉钉报警">Redis钉钉报警</span></h5><h6><span id="数据收集">数据收集</span></h6><p>首先启动一个Redis的信息收集的应用程序</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name redis_exporter -e <span class="attribute">REDIS_ADDR</span>=<span class="string">"redis://172.16.40.170:6379"</span>  -e <span class="attribute">REDIS_PASSWORD</span>=<span class="string">"123456”-p 9121:9121 oliver006/redis_exporter</span></span><br></pre></td></tr></table></figure><p>此时我们打开浏览器，访问ip:9121这个地址就可以获取到redis的监控信息了。</p><h6><span id="数据保存">数据保存</span></h6><p>这一步就是把上方应用程序收集的监控数据保存到prometheus中<br>将信息收集程序通过Endpoints、Service、ServiceMonitor与k8s中的prometheus绑定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">    - addresses:</span></span><br><span class="line"><span class="attr">        - ip:</span> <span class="number">172.16</span><span class="number">.40</span><span class="number">.170</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">redis-exporter</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">9121</span></span><br><span class="line"><span class="attr">        protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">    clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redis-exporter</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">9121</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">        prometheus:</span> <span class="string">kube-prometheus</span></span><br><span class="line"><span class="attr">        release:</span> <span class="string">kube-prometheus</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    selector:</span></span><br><span class="line"><span class="attr">        matchLabels:</span></span><br><span class="line"><span class="attr">            k8s-app:</span> <span class="string">redis-metrics</span></span><br><span class="line"><span class="attr">        namespaceSelector:</span></span><br><span class="line"><span class="attr">            matchNames:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">    endpoints:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="string">redis-exporter</span></span><br><span class="line"><span class="attr">      interval:</span> <span class="number">15</span><span class="string">s</span></span><br></pre></td></tr></table></figure><h6><span id="数据展示">数据展示</span></h6><p>此时在grafann中添加一个模板763即可成功展示刚刚收集到的数据<br><img src="/2019/08/11/Prometheus-Operation钉钉报警/1.png" alt="1"></p><h6><span id="报警">报警</span></h6><p>首先你需要在一个钉钉群建一个报警集群人，集群人类型选择自定义，然后在这个机器人身上你会发现一个token，记住这个token哦</p><p>紧接着需要对prometheus做一下改造，来到安装包的 contrib/kube-prometheus/manifests/目录<br>在这个目录下新建一个alertmanager.yaml文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">global</span>:</span><br><span class="line">  <span class="attribute">resolve_timeout</span>: <span class="number">5</span>m</span><br><span class="line"><span class="attribute">route</span>:</span><br><span class="line">  <span class="attribute">group_by</span>: [<span class="string">'job'</span>]</span><br><span class="line">  <span class="attribute">group_wait</span>: <span class="number">30s</span></span><br><span class="line">  <span class="attribute">group_interval</span>: <span class="number">5</span>m</span><br><span class="line">  <span class="attribute">repeat_interval</span>: <span class="number">12</span>h</span><br><span class="line">  <span class="attribute">receiver</span>: webhook</span><br><span class="line"><span class="attribute">receivers</span>:</span><br><span class="line">- <span class="attribute">name</span>: <span class="string">'webhook'</span></span><br><span class="line">  <span class="attribute">webhook_configs</span>:</span><br><span class="line">  - <span class="attribute">url</span>: <span class="string">'http://172.16.40.165:32505'</span></span><br><span class="line">    <span class="attribute">send_resolved</span>: true</span><br></pre></td></tr></table></figure><p>通过如下命令替换原有的配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete <span class="built_in"> secret </span>alertmanager-main -n monitoring</span><br><span class="line">kubectl create <span class="built_in"> secret </span>generic alertmanager-main <span class="attribute">--from-file</span>=alertmanager.yaml -n monitoring</span><br></pre></td></tr></table></figure><p>因为钉钉与普罗米修斯的数据格式是不一样的，所以在这里还不能直接把普罗米修斯的数据发给钉钉。<br>上方有一个url地址，这个地址呢，需要我们自己写个小程序，把普罗米修斯发来的数据经过格式转换后发给钉钉，而钉钉的格式要求可见这个文档</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//ding-doc.dingtalk.com/doc<span class="meta">#/serverapi2/qf2nxq</span></span><br></pre></td></tr></table></figure><h5><span id="mysql钉钉报警">MySQL钉钉报警</span></h5><p>使用如下方式收集MySQL监控信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name mysql_exporter -e <span class="attribute">DATA_SOURCE_NAME</span>=<span class="string">"root:123456@(172.16.40.159:3306)/"</span> -p 9104:9104  prom/mysqld-exporter</span><br></pre></td></tr></table></figure><p>数据存储参见上方Redis的配置<br>数据展示使用Grafan模板7362<br><img src="/2019/08/11/Prometheus-Operation钉钉报警/2.png" alt="2"></p><h5><span id="rabbitmq钉钉报警">RabbitMQ钉钉报警</span></h5><p>使用如下方式收集MySQL监控信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name rabbitmq --env <span class="attribute">RABBIT_URL</span>=<span class="string">"http://172.16.40.169:15672"</span> --env <span class="attribute">RABBIT_USER</span>=<span class="string">"monitoring"</span> --env <span class="attribute">RABBIT_PASSWORD</span>=<span class="string">"monitoring"</span>   -p 9419:9419 kbudde/rabbitmq-exporter</span><br></pre></td></tr></table></figure><p>注意RabbitMQ的用户必须具有monitoring权限，否则会报如下错误</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">time</span>=<span class="string">"2019-08-07T01:17:08Z"</span> <span class="attribute">level</span>=error <span class="attribute">msg</span>=<span class="string">"Error while retrieving data from rabbitHost"</span> <span class="attribute">error</span>=<span class="string">"&lt;nil&gt;"</span> <span class="attribute">host</span>=<span class="string">"http://172.16.40.169:15672"</span> <span class="attribute">statusCode</span>=401</span><br><span class="line"><span class="attribute">time</span>=<span class="string">"2019-08-07T01:17:08Z"</span> <span class="attribute">level</span>=warning <span class="attribute">msg</span>=<span class="string">"retrieving node failed"</span> <span class="attribute">error</span>=<span class="string">"Error while retrieving data from rabbitHost"</span></span><br></pre></td></tr></table></figure><p>数据存储参见上方Redis的配置<br>数据展示使用Grafan模板4279<br><img src="/2019/08/11/Prometheus-Operation钉钉报警/3.png" alt="3"></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的代理模式</title>
      <link href="/2019/08/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代理模式：通过某种方式给某个对象提供一个代理对象，在不改变原有对象代码的前提下对方法的增强。</p></blockquote><p>在Java中我们最熟悉的使用场景就是SpringAOP，本篇文章即是SpringAOP源码分析的前置文章</p><h6><span id="为什么要使用代理模式">为什么要使用代理模式</span></h6><p>首先我们知道，在项目中如果需要打印方法入参及出参时、需要记录方法执行时间时、需要验证权限时、需要统一异常处理时等等各种场景是不是都是使用拦截器呀过滤器呀啥的。<br>这些拦截器过滤器的底层实现其实都是使用了代码模式</p><p>本篇文章就基于一个打印方法执行时间的小demo来简单了解一下代理模式的使用</p><h6><span id="静态代理">静态代理</span></h6><p>首先有一个接口和一个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainServiceImpl</span> <span class="keyword">implements</span> <span class="title">MainService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSomeThing......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要知道<code>doSomeThing</code>方法的执行时间时比较low的解决方案可能就是这样搞</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"begin time:"</span>+System.currentTimeMillis());</span><br><span class="line">    mainService.doSomeThing();</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"end time:"</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样就不能实现不修改代码就处理问题的初衷了，这个时候就可以使用静态代理来解决</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="title">implements</span> <span class="title">MainService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MainService mainService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticProxy</span>(<span class="params">MainService mainService</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainService=mainService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"begin time:"</span>+System.currentTimeMillis());</span><br><span class="line">        mainService.doSomeThing();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"end time:"</span>+System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建的了一个代理类，代理类持有原对象，把所有新增的需求放到代理类中，这样就不需要修改代码了。<br>我们可以使用如下代码测试</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main (<span class="keyword">String</span> args[])&#123;</span><br><span class="line">       MainService mainService=<span class="keyword">new</span> <span class="type">MainServiceImpl</span>();</span><br><span class="line">       MainService staticProxy=<span class="keyword">new</span> <span class="type">StaticProxy</span>(mainService);</span><br><span class="line">       staticProxy.doSomeThing();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6><span id="动态代理">动态代理</span></h6><p>上方使用静态代理虽然解决了不修改代码的需求，但是如果原对象有多个方法的话就必须全部实现且加上打印的逻辑，这样就有点不太优雅了吧<br>这个时候就到了动态代理出场的时候了</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MainService mainService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span>(<span class="params">MainService mainService</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mainService=mainService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                mainService.getClass().getClassLoader(),</span><br><span class="line">                mainService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span>(<span class="params">Object proxy, Method method, Object[] args</span>) throws Throwable </span>&#123;</span><br><span class="line">                        System.<span class="keyword">out</span>.println(<span class="string">"begin time:"</span>+System.currentTimeMillis());</span><br><span class="line">                        method.invoke(mainService, args);</span><br><span class="line">                        System.<span class="keyword">out</span>.println(<span class="string">"end time:"</span>+System.currentTimeMillis());</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方的<code>getProxy</code>方法是返回的一个代理对象，切是在这个对象的所有方法执行前后都执行了打印执行时间的逻辑<br>看一下测试代码</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main (<span class="keyword">String</span> args[])&#123;</span><br><span class="line">       MainService mainService=<span class="keyword">new</span> <span class="type">MainServiceImpl</span>();</span><br><span class="line">       DynamicProxy dynamicProxy=<span class="keyword">new</span> <span class="type">DynamicProxy</span>(mainService);</span><br><span class="line">       ((MainService)dynamicProxy.getProxy()).doSomeThing();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这样就优雅的多了</p><h6><span id="cglib代理">Cglib代理</span></h6><p>动态代理实现的已经非常优雅了，但是它还是有个缺点，那就是想要实现代理的原对象必须具有顶层接口，对没有实现的接口的类就无能为力了。</p><p>不过记住一句话，方法总比困难多。对于这种没有接口的类使用cglib代理就可以解决它。<br>与动态代理创建一个代理类不同的是cglib是使用字节码技术直接生成一个子类然后重写父类的方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CglibInterceptor</span> <span class="title">implements</span> <span class="title">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span>(<span class="params">Object obj, Method method, Object[] objects, MethodProxy methodProxy</span>) throws Throwable </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"begin time:"</span>+System.currentTimeMillis());</span><br><span class="line">        Object <span class="keyword">object</span> = methodProxy.invokeSuper(obj, objects);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"end time:"</span>+System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下测试代码</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main (<span class="keyword">String</span> args[])&#123;</span><br><span class="line">       Enhancer enhancer = <span class="keyword">new</span> <span class="type">Enhancer</span>();</span><br><span class="line">       enhancer.setSuperclass(MainServiceImpl.class);</span><br><span class="line">       enhancer.setCallback(<span class="keyword">new</span> <span class="type">CglibInterceptor</span>());</span><br><span class="line">       MainService proxy= (MainService)enhancer.create();</span><br><span class="line">       proxy.doSomeThing();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC源码解析（基于注解）</title>
      <link href="/2019/08/05/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%EF%BC%89/"/>
      <url>/2019/08/05/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，看完这篇文章需要很长很长很长时间。。。</p></blockquote><h4><span id="准备工作">准备工作</span></h4><p>本文会基于注解的方向分析SpringIOC模块的整体流程，在阅读本篇文章之前建议您先阅读基于XML分析的两篇文章: <a href="https://mp.weixin.qq.com/s/0zDCy0eQycdM8M9eHGuLEQ" target="_blank" rel="noopener">SpringIOC源码解析(上)</a>，<a href="https://mp.weixin.qq.com/s/z-DZxBWOSSaFfQXlA0TSKw" target="_blank" rel="noopener">SpringIOC源码解析(下)</a></p><h5><span id="demo工程">Demo工程</span></h5><p>本次源码分析的demo工程我已经准备好了，大家可自行前往以下地址下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shiyujun/</span>spring-framework</span><br></pre></td></tr></table></figure><p>本次工程复用了之前工程的包cn.shiyujun.service中的接口和实现类，同时新增了一个基于注解的配置类，此类在cn.shiyujun.config包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IOCService <span class="title">iocService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IOCServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是启动类了，启动类在cn.shiyujun.demo包下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnnotationIOCDemo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">"cn.shiyujun.config"</span>);</span><br><span class="line">        IOCService iocService=context.getBean(IOCService.class);</span><br><span class="line">        System.<span class="keyword">out</span>.println(iocService.hollo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="annotationconfigapplicationcontext继承关系"><code>AnnotationConfigApplicationContext</code>继承关系</span></h4><p><img src="/2019/08/05/SpringIOC源码解析（基于注解）/1.png" alt="1"></p><p>再次拿出之前的一张图片，可以看到相较于<code>ClassPathXmlApplicationContext</code>和<code>FileSystemXmlApplicationContext</code>来说<code>AnnotationConfigApplicationContext</code>这个类的辈分好像更高一些</p><p>接着我们看一下它的方法</p><p><img src="/2019/08/05/SpringIOC源码解析（基于注解）/2.png" alt="1"><br>我们会发现除了register注册bean的方法以外，有一个scan方法，有没有感觉很熟悉。@CompantScan用过没，他们之间什么关系，在启动类中new AnnotationConfigApplicationContext的时候传的一个包名是不是跟这个有关系？带着疑问往下看吧</p><h4><span id="源码分析">源码分析</span></h4><h5><span id="构造方法">构造方法</span></h5><p>源码分析第一站就是进入如下构造方法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">AnnotationConfigApplicationContext</span>(String... basePackages) &#123;</span><br><span class="line"><span class="selector-tag">this</span>();</span><br><span class="line"><span class="selector-tag">scan</span>(basePackages);</span><br><span class="line"><span class="selector-tag">refresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>千万不要小瞧上方简简单单的三行代码，我们整篇文章都会基于这三行代码来展开</p><p>首先看this</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AnnotationConfigApplicationContext() &#123;</span><br><span class="line">        <span class="comment">//注解bean读取器</span></span><br><span class="line"><span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="type">AnnotatedBeanDefinitionReader</span>(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//注解bean扫描器</span></span><br><span class="line"><span class="built_in">this</span>.scanner = <span class="keyword">new</span> <span class="type">ClassPathBeanDefinitionScanner</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时子类的构造方法执行之前肯定会先执行父类的构造方法，所以还有父类<br>GenericApplicationContext的构造方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericApplicationContext</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">    <span class="comment">//这个bean的相关知识请参考之前的文章</span></span><br><span class="line">    <span class="keyword">this</span>.beanFactory = <span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="注册bean">注册bean</span></h5><p>接着看<code>scan</code>方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">public</span> void scan(<span class="keyword">String... </span><span class="keyword">basePackages) </span>&#123;</span><br><span class="line"><span class="meta">Assert</span>.notEmpty(<span class="keyword">basePackages, </span><span class="string">"At least one base package must be specified"</span>)<span class="comment">;</span></span><br><span class="line">this.scanner.scan(<span class="keyword">basePackages);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里调用的是bean扫描器<code>ClassPathBeanDefinitionScanner</code>的<code>scan</code>方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int scan(String... basePackages) &#123;</span><br><span class="line">       <span class="comment">//获取当前注册bean的数量</span></span><br><span class="line">int beanCountAtScanStart = <span class="keyword">this</span>.registry.getBeanDefinitionCount();</span><br><span class="line">        <span class="comment">//往下看</span></span><br><span class="line">doScan(basePackages);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.includeAnnotationConfig) &#123;</span><br><span class="line">           <span class="comment">//注册配置处理器</span></span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//返回此次注册的数量</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着往下看<code>doScan</code>方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> Set&lt;<span class="keyword">BeanDefinitionHolder&gt; </span>doScan(<span class="keyword">String... </span><span class="keyword">basePackages) </span>&#123;</span><br><span class="line"><span class="meta">Assert</span>.notEmpty(<span class="keyword">basePackages, </span><span class="string">"At least one base package must be specified"</span>)<span class="comment">;</span></span><br><span class="line">Set&lt;<span class="keyword">BeanDefinitionHolder&gt; </span><span class="keyword">beanDefinitions </span>= new LinkedHashSet&lt;&gt;()<span class="comment">;</span></span><br><span class="line">        //遍历需要扫描的包路径</span><br><span class="line">for (<span class="keyword">String </span><span class="keyword">basePackage </span>: <span class="keyword">basePackages) </span>&#123;</span><br><span class="line">    //先跟进去看，下面的方法先忽略</span><br><span class="line">Set&lt;<span class="keyword">BeanDefinition&gt; </span>candidates = findCandidateComponents(<span class="keyword">basePackage);</span></span><br><span class="line"><span class="keyword"></span>for (<span class="keyword">BeanDefinition </span>candidate : candidates) &#123;</span><br><span class="line">ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)<span class="comment">;</span></span><br><span class="line">candidate.setScope(scopeMetadata.getScopeName())<span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">beanName </span>= this.<span class="keyword">beanNameGenerator.generateBeanName(candidate, </span>this.registry)<span class="comment">;</span></span><br><span class="line"><span class="meta">if</span> (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">postProcessBeanDefinition((AbstractBeanDefinition) candidate, <span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"><span class="meta">if</span> (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">if</span> (checkCandidate(<span class="keyword">beanName, </span>candidate)) &#123;</span><br><span class="line"><span class="keyword">BeanDefinitionHolder </span>definitionHolder = new <span class="keyword">BeanDefinitionHolder(candidate, </span><span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"></span>definitionHolder =</span><br><span class="line">AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)<span class="comment">;</span></span><br><span class="line"><span class="keyword">beanDefinitions.add(definitionHolder);</span></span><br><span class="line"><span class="keyword"></span>registerBeanDefinition(definitionHolder, this.registry)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return <span class="keyword">beanDefinitions;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure><h6><span id="扫描包">扫描包</span></h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set&lt;BeanDefinition&gt; findCandidateComponents(String basePackage) &#123;</span><br><span class="line">       <span class="comment">//判断是否使用Filter指定忽略包不扫描</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.componentsIndex != <span class="literal">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line"><span class="keyword">return</span> addCandidateComponentsFromIndex(<span class="keyword">this</span>.componentsIndex, basePackage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//扫描包</span></span><br><span class="line"><span class="keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接着往下看之前，我们有必要先认识一个东东，MetadataReader。这个接口有三个方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  public<span class="built_in"> interface </span>MetadataReader &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Resource </span>getResource();</span><br><span class="line"></span><br><span class="line">ClassMetadata getClassMetadata();</span><br><span class="line"></span><br><span class="line">AnnotationMetadata getAnnotationMetadata();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个返回Resource就不必多说了，就是配置类的资源对象。第二个第三个根据名字我们可以猜到是类的元数据和注解的元数据<br>可以看一下它们两个的方法<br><img src="/2019/08/05/SpringIOC源码解析（基于注解）/3.png" alt="1"><img src="/2019/08/05/SpringIOC源码解析（基于注解）/4.png" alt="1"></p><p>接着往下看</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;BeanDefinition&gt; scanCandidateComponents(<span class="keyword">String</span> basePackage) &#123;</span><br><span class="line">Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> <span class="type">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//组装扫描路径（组装完成后是这种格式：classpath*:cn/shiyujun/config/**/*.class）</span></span><br><span class="line"><span class="keyword">String</span> packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">resolveBasePackage(basePackage) + <span class="string">'/'</span> + <span class="built_in">this</span>.resourcePattern;</span><br><span class="line">   <span class="comment">//根据路径获取资源对象</span></span><br><span class="line">Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">boolean traceEnabled = logger.isTraceEnabled();</span><br><span class="line">boolean debugEnabled = logger.isDebugEnabled();</span><br><span class="line"><span class="keyword">for</span> (Resource resource : <span class="type">resources</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.<span class="built_in">trace</span>(<span class="string">"Scanning "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">//根据资源对象通过反射获取资源对象的MetadataReader，具体就不展开说了</span></span><br><span class="line">MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line">   <span class="comment">//查看配置类是否有@Conditional一系列的注解，然后是否满足注册Bean的条件，关于这个知识点可以参考我之前的文章：https://mp.weixin.qq.com/s/RXYIh_g5iU1e3liK-8n5zA</span></span><br><span class="line"><span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">ScannedGenericBeanDefinition sbd = <span class="keyword">new</span> <span class="type">ScannedGenericBeanDefinition</span>(metadataReader);</span><br><span class="line">sbd.setResource(resource);</span><br><span class="line">sbd.setSource(resource);</span><br><span class="line"><span class="keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Identified candidate component class: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">candidates.add(sbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Ignored because not a concrete top-level class: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.<span class="built_in">trace</span>(<span class="string">"Ignored because not matching any filter: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanDefinitionStoreException</span>(</span><br><span class="line"><span class="string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.<span class="built_in">trace</span>(<span class="string">"Ignored because not readable: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanDefinitionStoreException</span>(<span class="string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="创建beandefinition">创建BeanDefinition</span></h6><p>现在回到开始的<code>doScan</code>方法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> Set&lt;<span class="keyword">BeanDefinitionHolder&gt; </span>doScan(<span class="keyword">String... </span><span class="keyword">basePackages) </span>&#123;</span><br><span class="line"><span class="meta">Assert</span>.notEmpty(<span class="keyword">basePackages, </span><span class="string">"At least one base package must be specified"</span>)<span class="comment">;</span></span><br><span class="line">Set&lt;<span class="keyword">BeanDefinitionHolder&gt; </span><span class="keyword">beanDefinitions </span>= new LinkedHashSet&lt;&gt;()<span class="comment">;</span></span><br><span class="line">        //遍历需要扫描的包路径</span><br><span class="line">for (<span class="keyword">String </span><span class="keyword">basePackage </span>: <span class="keyword">basePackages) </span>&#123;</span><br><span class="line">    //获取所有符合条件的<span class="keyword">BeanDefinition</span></span><br><span class="line"><span class="keyword"></span>Set&lt;<span class="keyword">BeanDefinition&gt; </span>candidates = findCandidateComponents(<span class="keyword">basePackage);</span></span><br><span class="line"><span class="keyword"></span>for (<span class="keyword">BeanDefinition </span>candidate : candidates) &#123;</span><br><span class="line">             //绑定<span class="keyword">BeanDefinition与Scope</span></span><br><span class="line"><span class="keyword"></span>ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate)<span class="comment">;</span></span><br><span class="line">candidate.setScope(scopeMetadata.getScopeName())<span class="comment">;</span></span><br><span class="line">                //查看是否配置类是否指定<span class="keyword">bean的名称，如没指定则使用类名首字母小写</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">String </span><span class="keyword">beanName </span>= this.<span class="keyword">beanNameGenerator.generateBeanName(candidate, </span>this.registry)<span class="comment">;</span></span><br><span class="line">                //下面两个<span class="meta">if</span>是处理lazy、Autowire、DependencyOn、initMethod、enforceInitMethod、destroyMethod、enforceDestroyMethod、Primary、Role、Description这些逻辑的</span><br><span class="line"><span class="meta">if</span> (candidate instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">postProcessBeanDefinition((AbstractBeanDefinition) candidate, <span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line"><span class="meta">if</span> (candidate instanceof AnnotatedBeanDefinition) &#123;</span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">                //检查<span class="keyword">bean是否存在</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (checkCandidate(<span class="keyword">beanName, </span>candidate)) &#123;</span><br><span class="line">                 //又包装了一层</span><br><span class="line"><span class="keyword">BeanDefinitionHolder </span>definitionHolder = new <span class="keyword">BeanDefinitionHolder(candidate, </span><span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>                   //检查scope是否创建，如未创建则进行创建</span><br><span class="line">definitionHolder =</span><br><span class="line">AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry)<span class="comment">;</span></span><br><span class="line"><span class="keyword">beanDefinitions.add(definitionHolder);</span></span><br><span class="line"><span class="keyword"> </span>                  //重点来了，往下看</span><br><span class="line">registerBeanDefinition(definitionHolder, this.registry)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return <span class="keyword">beanDefinitions;</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure><h6><span id="注册bean">注册bean</span></h6><p>到了一个比较重要的节点了，跟着上文的<code>registerBeanDefinition</code>方法走</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> void registerBeanDefinition(<span class="keyword">BeanDefinitionHolder </span>definitionHolder, <span class="keyword">BeanDefinitionRegistry </span>registry) &#123;</span><br><span class="line"><span class="keyword">BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, </span>registry)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">public</span> static void registerBeanDefinition(</span><br><span class="line"><span class="keyword">BeanDefinitionHolder </span>definitionHolder, <span class="keyword">BeanDefinitionRegistry </span>registry)</span><br><span class="line"><span class="symbol">throws</span> <span class="keyword">BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">String </span><span class="keyword">beanName </span>= definitionHolder.getBeanName()<span class="comment">;</span></span><br><span class="line">// 注册<span class="keyword">bean，往下看</span></span><br><span class="line"><span class="keyword"></span>registry.registerBeanDefinition(<span class="keyword">beanName, </span>definitionHolder.getBeanDefinition())<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//如果存在别名则循环注册别名，逻辑跟上方差不多，就不展开了</span><br><span class="line"><span class="keyword">String[] </span>aliases = definitionHolder.getAliases()<span class="comment">;</span></span><br><span class="line"><span class="meta">if</span> (aliases != null) &#123;</span><br><span class="line">for (<span class="keyword">String </span><span class="meta">alias</span>: aliases) &#123;</span><br><span class="line">registry.registerAlias(<span class="keyword">beanName, </span><span class="meta">alias</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个注册bean的方法是<code>DefaultListableBeanFactory</code>的方法，之前的文章已经解析过了，大体就是下面这么个流程</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="symbol">public</span> void registerBeanDefinition(<span class="keyword">String </span><span class="keyword">beanName, </span><span class="keyword">BeanDefinition </span><span class="keyword">beanDefinition)</span></span><br><span class="line"><span class="keyword"> </span>     throws <span class="keyword">BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">Assert</span>.hasText(<span class="keyword">beanName, </span><span class="string">"Bean name must not be empty"</span>)<span class="comment">;</span></span><br><span class="line">   <span class="meta">Assert</span>.notNull(<span class="keyword">beanDefinition, </span><span class="string">"BeanDefinition must not be null"</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (<span class="keyword">beanDefinition </span>instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         ((AbstractBeanDefinition) <span class="keyword">beanDefinition).validate();</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">      catch (<span class="keyword">BeanDefinitionValidationException </span>ex) &#123;</span><br><span class="line">         throw new <span class="keyword">BeanDefinitionStoreException(...);</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">BeanDefinition </span>oldBeanDefinition<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 所有的 <span class="keyword">Bean </span>注册后都会被放入到这个<span class="keyword">beanDefinitionMap </span>中，查看是否已存在这个<span class="keyword">bean</span></span><br><span class="line"><span class="keyword"> </span>  oldBeanDefinition = this.<span class="keyword">beanDefinitionMap.get(beanName);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  // 处理重复名称的 <span class="keyword">Bean </span>定义的情况</span><br><span class="line">   <span class="meta">if</span> (oldBeanDefinition != null) &#123;</span><br><span class="line">      <span class="meta">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">         // 如果不允许覆盖的话，抛异常</span><br><span class="line">        throw new <span class="keyword">BeanDefinitionStoreException(beanDefinition.getResourceDescription(), </span><span class="keyword">beanName,</span></span><br><span class="line"><span class="keyword"></span><span class="string">"Cannot register bean definition ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"] for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"': There is already ["</span> + oldBeanDefinition + <span class="string">"] bound."</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> <span class="meta">if</span> (oldBeanDefinition.getRole() &lt; <span class="keyword">beanDefinition.getRole()) </span>&#123;</span><br><span class="line">         // 用框架定义的 <span class="keyword">Bean </span>覆盖用户自定义的 <span class="keyword">Bean </span></span><br><span class="line"><span class="meta">if</span> (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">this.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">oldBeanDefinition + <span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> <span class="meta">if</span> (!<span class="keyword">beanDefinition.equals(oldBeanDefinition)) </span>&#123;</span><br><span class="line">         // 用新的 <span class="keyword">Bean </span>覆盖旧的 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">this.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">oldBeanDefinition + <span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> &#123;</span><br><span class="line">         // log...用同等的 <span class="keyword">Bean </span>覆盖旧的 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">this.logger.info(<span class="string">"Overriding bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 覆盖</span><br><span class="line">      this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line">   <span class="meta">else</span> &#123;</span><br><span class="line">      // 判断是否已经有其他的 <span class="keyword">Bean </span>开始初始化了.注意，<span class="string">"注册Bean"</span> 这个动作结束，<span class="keyword">Bean </span>依然还没有初始化 在 Spring 容器启动的最后，会 预初始化 所有的 singleton <span class="keyword">beans</span></span><br><span class="line"><span class="keyword"> </span>     <span class="meta">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">         // Cannot modify startup-time collection elements anymore (for stable <span class="keyword">iteration)</span></span><br><span class="line"><span class="keyword"> </span>        synchronized (this.<span class="keyword">beanDefinitionMap) </span>&#123;</span><br><span class="line">            this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>           List&lt;<span class="keyword">String&gt; </span>updatedDefinitions = new ArrayList&lt;<span class="keyword">String&gt;(this.beanDefinitionNames.size() </span>+ <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">            updatedDefinitions.<span class="keyword">addAll(this.beanDefinitionNames);</span></span><br><span class="line"><span class="keyword"> </span>           updatedDefinitions.<span class="keyword">add(beanName);</span></span><br><span class="line"><span class="keyword"> </span>           this.<span class="keyword">beanDefinitionNames </span>= updatedDefinitions<span class="comment">;</span></span><br><span class="line">            <span class="meta">if</span> (this.manualSingletonNames.contains(<span class="keyword">beanName)) </span>&#123;</span><br><span class="line">               Set&lt;<span class="keyword">String&gt; </span>updatedSingletons = new LinkedHashSet&lt;<span class="keyword">String&gt;(this.manualSingletonNames);</span></span><br><span class="line"><span class="keyword"> </span>              updatedSingletons.remove(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>              this.manualSingletonNames = updatedSingletons<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> &#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">         // 将 <span class="keyword">BeanDefinition </span>放到这个 <span class="meta">map</span> 中，这个 <span class="meta">map</span> 保存了所有的 <span class="keyword">BeanDefinition</span></span><br><span class="line"><span class="keyword"> </span>        this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>        // 这是个 ArrayList，所以会按照 <span class="keyword">bean </span>配置的顺序保存每一个注册的 <span class="keyword">Bean </span>的名字</span><br><span class="line">         this.<span class="keyword">beanDefinitionNames.add(beanName);</span></span><br><span class="line"><span class="keyword"> </span>        // 这是个 LinkedHashSet，代表的是手动注册的 singleton <span class="keyword">bean，</span></span><br><span class="line"><span class="keyword"> </span>        this.manualSingletonNames.remove(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">      this.frozenBeanDefinitionNames = null<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (oldBeanDefinition != null <span class="title">||</span> containsSingleton(<span class="keyword">beanName)) </span>&#123;</span><br><span class="line">      resetBeanDefinition(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在回到文章开始的三句代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">AnnotationConfigApplicationContext</span>(String... basePackages) &#123;</span><br><span class="line"><span class="selector-tag">this</span>();</span><br><span class="line"><span class="selector-tag">scan</span>(basePackages);</span><br><span class="line"><span class="selector-tag">refresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，只剩最后一个<code>refresh()</code>方法了，如果看过之前文章的同学可能都已经知道这里面是什么东西了</p><h5><span id="refresh"><code>refresh()</code></span></h5><p>首先整个方法进来以后跟使用XML的时候是一样的</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 记录容器的启动时间、标记“已启动”状态、检查环境变量</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化BeanFactory容器、注册BeanDefinition</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 扩展点</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         <span class="comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册 BeanPostProcessor 的实现类</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化MessageSource</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化事件广播器</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 扩展点</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册事件监听器</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 广播事件</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 销毁已经初始化的的Bean</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 设置 'active' 状态</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// 清除缓存</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="与xml的不同点">与XML的不同点</span></h6><p><strong><code>obtainFreshBeanFactory()</code>方法</strong><br>还记得在之前的文章中列出了好几万行代码来解析这个方法，但是回忆一个这个方法是干啥的来着，创建bean容器，但是呢，bean容器在scan方法里就已经创建好了，所以这里就没必要再进行额外的逻辑了，你看现在它的代码现在多简单</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">refreshBeanFactory();</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.beanFactory.setSerializationId(getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再接下来，其实就没了，有一个重点就是初始化，但是初始化逻辑是放在这个Spring家族的超级富二代<code>DefaultListableBeanFactory</code>身上的。</p><h4><span id="心得体会">心得体会</span></h4><p>源码阅读入门很难，面对几十兆几百兆的代码不是一时半会就能看明白的，也不是一遍两遍debug就能搞懂的。阅读源码，一定要静下心来花上几个小时甚至几天的时间来钻研。</p><p>一通百通，当你研究明白一部分以后，再去看另外的部分，就好像有人推着你走一样，无比的顺利</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC源码解析（下） </title>
      <link href="/2019/08/02/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2019/08/02/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，看完这篇文章需要很长很长很长时间。。。</p></blockquote><p>本篇文章是<a href="https://mp.weixin.qq.com/s/0zDCy0eQycdM8M9eHGuLEQ" target="_blank" rel="noopener">SpringIOC源码解析（上）</a>的续集，上一篇文章介绍了使用XML的方式启动Spring，然后追踪了BeanFactory容器的创建、配置文件的解析、Bean的注册等。</p><h5><span id="12-finishbeanfactoryinitialization">12. <code>finishBeanFactoryInitialization()</code></span></h5><p>前方超长篇幅预警。。。</p><p>刚才我们提到了bean还没有初始化。这个方法就是负责初始化所有的没有设置懒加载的singleton bean</p><p>开始撸了</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> void finishBeanFactoryInitialization(ConfigurableListableBeanFactory <span class="keyword">beanFactory) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">if</span> (<span class="keyword">beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) </span>&amp;&amp;</span><br><span class="line"><span class="keyword">beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, </span>ConversionService.class)) &#123;</span><br><span class="line"><span class="keyword">beanFactory.setConversionService(</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, </span>ConversionService.class))<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">if</span> (!<span class="keyword">beanFactory.hasEmbeddedValueResolver()) </span>&#123;</span><br><span class="line"><span class="keyword">beanFactory.addEmbeddedValueResolver(strVal </span>-&gt; getEnvironment().resolvePlaceholders(<span class="keyword">strVal));</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br><span class="line">        //先初始化 LoadTimeWeaverAware 类型的 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">String[] </span>weaverAwareNames = <span class="keyword">beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, </span>false, false)<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">String </span>weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">getBean(weaverAwareName)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">       //停止使用用于类型匹配的临时类加载器</span><br><span class="line"><span class="keyword">beanFactory.setTempClassLoader(null);</span></span><br><span class="line"><span class="keyword"> </span>     //冻结所有的<span class="keyword">bean定义，即已注册的bean定义将不会被修改或后处理</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">beanFactory.freezeConfiguration();</span></span><br><span class="line"><span class="keyword"> </span>     //初始化</span><br><span class="line"><span class="keyword">beanFactory.preInstantiateSingletons();</span></span><br><span class="line"><span class="keyword"></span>&#125;</span><br></pre></td></tr></table></figure><p>上方没有解释的代码意义往下看吧</p><h6><span id="conversionservice">conversionService</span></h6><p>这种类型的bean最实用的场景就是用来将前端传过来的参数和后端的controller方法上的参数格式转换的时候使用</p><p>例如：前端要传一个String，后端使用Date接受的时候就可以这样操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> StringToDateConverter <span class="keyword">implements</span> Converter&lt;<span class="built_in">String</span>, <span class="built_in">Date</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">Date</span> convert(<span class="built_in">String</span> date) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dateFormat.parse(date);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"日期转换失败!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再搞个bean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"conversionService"</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">      &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.shiyujun.utils.StringToDateConverter"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/list&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>property&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6><span id="embeddedvalueresolver">EmbeddedValueResolver</span></h6><p>利用EmbeddedValueResolver可以很方便的实现读取配置文件的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesUtil</span> <span class="keyword">implements</span> <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringValueResolver resolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resolver = resolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性时直接传入属性名称即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPropertiesValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder(<span class="string">"$&#123;"</span>).append(key).append(<span class="string">"&#125;"</span>);</span><br><span class="line">        <span class="keyword">return</span> resolver.resolveStringValue(name.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="初始化">初始化</span></h6><p>敲黑板了，重点来了。。。</p><p>这里分析<code>beanFactory.preInstantiateSingletons()</code>方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> preInstantiateSingletons() throws BeansException &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.debug(<span class="string">"Pre-instantiating singletons in "</span> + <span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// this.beanDefinitionNames 保存了所有的 beanNames</span></span><br><span class="line">   List&lt;<span class="built_in">String</span>&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">String</span> beanName : beanNames) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 合并父 Bean 中的配置，主意&lt;bean id="" class="" parent="" /&gt; 中的 parent属性</span></span><br><span class="line">      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 不是抽象类、是单例的且不是懒加载的</span></span><br><span class="line">      <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">         <span class="comment">// 处理 FactoryBean</span></span><br><span class="line">         <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            <span class="comment">//在 beanName 前面加上“&amp;” 符号</span></span><br><span class="line">            final FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            <span class="comment">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现</span></span><br><span class="line">            <span class="built_in">boolean</span> isEagerInit;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">               isEagerInit = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="built_in">Boolean</span>&gt;() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> <span class="built_in">Boolean</span> run() &#123;</span><br><span class="line">                     <span class="keyword">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line"></span><br><span class="line">               getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不是FactoryBean的直接使用此方法进行初始化</span></span><br><span class="line">            getBean(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 如果bean实现了 SmartInitializingSingleton 接口的，那么在这里得到回调</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">String</span> beanName : beanNames) &#123;</span><br><span class="line">      <span class="built_in">Object</span> singletonInstance = getSingleton(beanName);</span><br><span class="line">      <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">         final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="built_in">Object</span>&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> <span class="built_in">Object</span> run() &#123;</span><br><span class="line">                  smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，不管是不是FactoryBean，最后都调用了<code>getBean(beanName)</code>，继续看这个方法吧</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> getBean(<span class="keyword">String</span> name) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; T doGetBean(</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">String</span> name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> <span class="keyword">Object</span>[] args, <span class="built_in">boolean</span> typeCheckOnly)</span><br><span class="line">      <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="comment">// 获取beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，再一个这个方法是可以根据别名来获取Bean的，所以在这里是要转换成最正统的BeanName</span></span><br><span class="line">  <span class="comment">//主要逻辑就是如果是FactoryBean就把&amp;去掉如果是别名就把根据别名获取真实名称后面就不贴代码了</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">String</span> beanName = transformedBeanName(name);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//最后的返回值</span></span><br><span class="line">   <span class="keyword">Object</span> bean; </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 检查是否已初始化</span></span><br><span class="line">   <span class="keyword">Object</span> sharedInstance = getSingleton(beanName);</span><br><span class="line">  <span class="comment">//如果已经初始化过了，且没有传args参数就代表是get，直接取出返回</span></span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"..."</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这里如果是普通Bean 的话，直接返回，如果是 FactoryBean 的话，返回它创建的那个实例对象</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 如果存在prototype类型的这个bean</span></span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果当前BeanDefinition不存在这个bean且具有父BeanFactory</span></span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="keyword">String</span> nameToLookup = originalBeanName(name);</span><br><span class="line"><span class="comment">// 返回父容器的查询结果</span></span><br><span class="line">         <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         <span class="comment">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span></span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 到这就要创建bean了</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 先初始化依赖的所有 Bean， depends-on 中定义的依赖</span></span><br><span class="line">         <span class="keyword">String</span>[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> dep : dependsOn) &#123;</span><br><span class="line">               <span class="comment">// 检查是不是有循环依赖</span></span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 注册一下依赖关系</span></span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="comment">// 先初始化被依赖项</span></span><br><span class="line">               getBean(dep);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果是单例的</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">// 执行创建 Bean，下面说</span></span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                     destroySingleton(beanName);</span><br><span class="line">                     <span class="keyword">throw</span> ex;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果是prototype</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="keyword">Object</span> prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               <span class="comment">// 执行创建 Bean</span></span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果不是 singleton 和 prototype 那么就是自定义的scope、例如Web项目中的session等类型，这里就交给自定义scope的应用方去实现</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">String</span> scopeName = mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.<span class="built_in">get</span>(scopeName);</span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">Object</span> scopedInstance = scope.<span class="built_in">get</span>(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                     beforePrototypeCreation(beanName);</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 执行创建 Bean</span></span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterPrototypeCreation(beanName);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//检查bean的类型</span></span><br><span class="line">   <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; bean != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了上方方法我们知道了原来Spring本身只定义了两种Scope，也知道了SpringMVC的几种Scope是如何实现的了。<br>然后发现一开始会先判断bean存不存在，如果存在就直接返回了。如果不存在那就要接着往下看<code>createBean</code>方法了</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> createBean(<span class="keyword">String</span> beanName, RootBeanDefinition mbd, <span class="keyword">Object</span>[] args) <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 确保 BeanDefinition 中的 Class 被加载</span></span><br><span class="line">   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">   <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">      mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 准备方法覆写，如果bean中定义了 &lt;lookup-method /&gt; 和 &lt;replaced-method /&gt;</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      mbdToUse.prepareMethodOverrides();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">            beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 如果有代理的话直接返回</span></span><br><span class="line">      <span class="keyword">Object</span> bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">      <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> bean; </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 创建 bean</span></span><br><span class="line">   <span class="keyword">Object</span> beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> doCreateBean(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="keyword">Object</span>[] args)</span><br><span class="line">      <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">   BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line"> <span class="comment">//如果是.factoryBean则从缓存删除</span></span><br><span class="line">      instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 实例化 Bean，这个方法里面才是终点，下面说</span></span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//bean实例</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">Object</span> bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//bean类型</span></span><br><span class="line">   Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</span><br><span class="line">   mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 循环调用实现了MergedBeanDefinitionPostProcessor接口的postProcessMergedBeanDefinition方法</span></span><br><span class="line">   <span class="comment">// Spring对这个接口有几个默认的实现，其中大家最熟悉的一个是操作@Autowired注解的</span></span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                  <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 解决循环依赖问题</span></span><br><span class="line">   <span class="built_in">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">         isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">               <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> <span class="comment">//当正在创建A时，A依赖B，此时通过（8将A作为ObjectFactory放入单例工厂中进行early expose，此处B需要引用A，但A正在创建，从单例工厂拿到ObjectFactory，从而允许循环依赖</span></span><br><span class="line">      addSingletonFactory(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">            <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">Object</span> exposedObject = bean;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 负责属性装配,很重要，下面说</span></span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">      <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 这里是处理bean初始化完成后的各种回调，例如init-method、InitializingBean 接口、BeanPostProcessor 接口</span></span><br><span class="line">         exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">         <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//同样的，如果存在循环依赖</span></span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">Object</span> earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">            exposedObject = earlySingletonReference;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">            <span class="keyword">String</span>[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">            Set&lt;<span class="keyword">String</span>&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">String</span>&gt;(dependentBeans.length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">String</span> dependentBean : dependentBeans) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                  actualDependentBeans.<span class="built_in">add</span>(dependentBean);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                     <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                     <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                     <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                     <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                     <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 把bean注册到相应的Scope中</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里第一次初始化的bean也返回了，你以为就这样结束了么。不，还有几个很重要的点</p><h6><span id="创建bean实例createbeaninstance">创建bean实例<code>createBeanInstance ()</code></span></h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 确保已经加载了此 class</span></span><br><span class="line">   Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 校验类的访问权限</span></span><br><span class="line">   <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>)  &#123;</span><br><span class="line">      <span class="comment">// 采用工厂方法实例化</span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> <span class="title">instantiateUsingFactoryMethod</span><span class="params">(beanName, mbd, args)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//是否第一次</span></span><br><span class="line">   <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//是否采用构造函数注入</span></span><br><span class="line">   <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">         <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolved = <span class="keyword">true</span>;</span><br><span class="line">            autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">      <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">         <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 无参构造函数</span></span><br><span class="line">         <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是否采用有参构造函数</span></span><br><span class="line">   Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">   <span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">      <span class="comment">// 构造函数依赖注入</span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, ctors, args)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 调用无参构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选一个无参的构造看一下吧</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">BeanWrapper <span class="title">instantiateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object beanInstance;</span><br><span class="line">      <span class="keyword">final</span> BeanFactory parent = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         beanInstance = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 具体实例化的实现，往下看</span></span><br><span class="line">         beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">      &#125;</span><br><span class="line">      BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">      initBeanWrapper(bw);</span><br><span class="line">      <span class="keyword">return</span> bw;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function">Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span></span><br><span class="line">   <span class="keyword">if</span> (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">      Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">      <span class="keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</span><br><span class="line">         constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">         <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"Specified class is an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                  constructorToUse = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> Constructor&lt;?&gt; run() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  constructorToUse = clazz.getDeclaredConstructor((Class[]) <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"No default constructor found"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 利用构造方法进行实例化</span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> BeanUtils.<span class="title">instantiateClass</span><span class="params">(constructorToUse)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类，这里就不展开了</span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> <span class="title">instantiateWithMethodInjection</span><span class="params">(bd, beanName, owner)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="bean属性注入populatebean">bean属性注入<code>populateBean ()</code></span></h6><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">protected</span> void <span class="keyword">populateBean(String </span><span class="keyword">beanName, </span>RootBeanDefinition mbd, <span class="keyword">BeanWrapper </span><span class="keyword">bw) </span>&#123;</span><br><span class="line">   // <span class="keyword">bean的所有属性</span></span><br><span class="line"><span class="keyword"> </span>  PropertyValues pvs = mbd.getPropertyValues()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (<span class="keyword">bw </span>== null) &#123;</span><br><span class="line">      <span class="meta">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">         throw new <span class="keyword">BeanCreationException(</span></span><br><span class="line"><span class="keyword"> </span>              mbd.getResourceDescription(), <span class="keyword">beanName, </span><span class="string">"Cannot apply property values to null instance"</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> &#123;</span><br><span class="line">         return<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean </span>continueWithPropertyPopulation = true<span class="comment">;</span></span><br><span class="line">   <span class="meta">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      for (<span class="keyword">BeanPostProcessor </span><span class="keyword">bp </span>: getBeanPostProcessors()) &#123;</span><br><span class="line">         <span class="meta">if</span> (<span class="keyword">bp </span>instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) <span class="keyword">bp;</span></span><br><span class="line"><span class="keyword"> </span>           // 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 <span class="keyword">BeanPostProcessor </span>的处理</span><br><span class="line">            <span class="meta">if</span> (!ibp.postProcessAfterInstantiation(<span class="keyword">bw.getWrappedInstance(), </span><span class="keyword">beanName)) </span>&#123;</span><br><span class="line">               continueWithPropertyPopulation = false<span class="comment">;</span></span><br><span class="line">               <span class="keyword">break;</span></span><br><span class="line"><span class="keyword"> </span>           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">      return<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME <span class="title">||</span></span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      MutablePropertyValues newPvs = new MutablePropertyValues(pvs)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      // 通过名字找到所有属性值，如果是 <span class="keyword">bean </span>依赖，先初始化依赖的 <span class="keyword">bean。记录依赖关系</span></span><br><span class="line"><span class="keyword"> </span>     <span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">         autowireByName(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>newPvs)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 通过类型装配。复杂一些</span><br><span class="line">      <span class="meta">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">         autowireByType(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>newPvs)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pvs = newPvs<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean </span>hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors()<span class="comment">;</span></span><br><span class="line">   <span class="keyword">boolean </span>needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (hasInstAwareBpps <span class="title">||</span> needsDepCheck) &#123;</span><br><span class="line">      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(<span class="keyword">bw, </span>mbd.allowCaching)<span class="comment">;</span></span><br><span class="line">      <span class="meta">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">         for (<span class="keyword">BeanPostProcessor </span><span class="keyword">bp </span>: getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="meta">if</span> (<span class="keyword">bp </span>instanceof InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">               InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) <span class="keyword">bp;</span></span><br><span class="line"><span class="keyword"> </span>              // 这里就是上方曾经提到过得对<span class="comment">@Autowired处理的一个BeanPostProcessor了</span></span><br><span class="line">               // 它会对所有标记<span class="comment">@Autowired、@Value 注解的属性进行设值</span></span><br><span class="line">               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, <span class="keyword">bw.getWrappedInstance(), </span><span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>              <span class="meta">if</span> (pvs == null) &#123;</span><br><span class="line">                  return<span class="comment">;</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">if</span> (needsDepCheck) &#123;</span><br><span class="line">         checkDependencies(<span class="keyword">beanName, </span>mbd, filteredPds, pvs)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   // 设置 <span class="keyword">bean </span>实例的属性值</span><br><span class="line">   applyPropertyValues(<span class="keyword">beanName, </span>mbd, <span class="keyword">bw, </span>pvs)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getBean这一块就搞完了</p><h5><span id="13-finishrefresh">13. <code>finishRefresh()</code></span></h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">finishRefresh</span>() &#123;</span><br><span class="line"><span class="comment">//看名字就知道了，清理刚才一系列操作使用到的资源缓存</span></span><br><span class="line"><span class="selector-tag">clearResourceCaches</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化LifecycleProcessor</span></span><br><span class="line"><span class="selector-tag">initLifecycleProcessor</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法的内部实现是启动所有实现了Lifecycle接口的bean</span></span><br><span class="line"><span class="selector-tag">getLifecycleProcessor</span>()<span class="selector-class">.onRefresh</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布ContextRefreshedEvent事件</span></span><br><span class="line"><span class="selector-tag">publishEvent</span>(new ContextRefreshedEvent(this));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查spring.liveBeansView.mbeanDomain是否存在，有就会创建一个MBeanServer</span></span><br><span class="line"><span class="selector-tag">LiveBeansView</span><span class="selector-class">.registerApplicationContext</span>(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="14-resetcommoncaches">14. <code>resetCommonCaches()</code></span></h5><p>最后还是一步还是清除缓存</p><h5><span id="15-refresh总结">15. <strong><code>refresh()</code>总结</strong></span></h5><p>上方用了这么长的篇幅把整个<code>refresh()</code>方法的细节给梳理清楚，这里再把刚开始看的懵懵的<code>refresh()</code>方法贴一下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 记录容器的启动时间、标记“已启动”状态、检查环境变量</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化BeanFactory容器、注册BeanDefinition</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 扩展点</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         <span class="comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册 BeanPostProcessor 的实现类</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化MessageSource</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化事件广播器</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 扩展点</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册事件监听器</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 广播事件</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 销毁已经初始化的的Bean</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 设置 'active' 状态</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// 清除缓存</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="总结">总结</span></h4><p>至此，本文到此结束。鉴于XML方式比较简单、通俗易懂，所以本文基于XML的方式大致介绍了SpringIOC的启动流程、稍微深入的讲解了Bean容器的创建以及Bean的初始化过程。这也是作者第一次阅读开源框架的源码，如文章有错误之处还请您费心指出。</p><p>鉴于现在比较流行SpringBoot和SpringCloud，下篇文章将会从基于注解的方向分析SpringIOC</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1">zhonghao.jpg)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC源码解析（上）</title>
      <link href="/2019/08/01/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/01/SpringIOC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意，看完这篇文章需要很长很长很长时间。。。</p></blockquote><h4><span id="准备工作">准备工作</span></h4><p>本文会分析Spring的IOC模块的整体流程，分析过程需要使用一个简单的demo工程来启动Spring，demo工程我以备好，需要的童鞋自行在下方链接下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shiyujun/</span>spring-framework</span><br></pre></td></tr></table></figure><h5><span id="demo工程示例代码">Demo工程示例代码</span></h5><p>本文源码分析基于Spring5.0.0,所以pom文件中引入5.0的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后写一个简单的接口和实现类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IOCService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hollo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IOCService</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> hollo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,IOC"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个application-ioc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span> <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"iocservice"</span> <span class="attr">class</span>=<span class="string">"cn.shiyujun.service.impl.IOCServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Spring</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IOCDemo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> (<span class="params">String args[]</span>)</span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:application-ioc.xml"</span>);</span><br><span class="line">        IOCService iocService=context.getBean(IOCService.class);</span><br><span class="line">        System.<span class="keyword">out</span>.println(iocService.hollo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方一个简单的demo工程相信各位童鞋在刚刚学习Spring的时候就已经玩的特别6了。我就不详细的说明了，直接开始看源码吧</p><h4><span id="classpathxmlapplicationcontext">ClassPathXmlApplicationContext</span></h4><h5><span id="背景调查">背景调查</span></h5><p>在文章开始的demo工程中，我选择使用了一个xml文件来配置了接口和实现类之间的关系，然后使用了ClassPathXmlApplicationContext这个类来加载这个配置文件。现在我们就先来看一下这个类到底是个什么东东<br>首先看一下继承关系图（只保留了跟本文相关的，省略了很多其他的继承关系）<br><img src="/2019/08/01/SpringIOC源码解析/1.jpg" alt="1"></p><p>可以看到左下角的就是我们今天的主角ClassPathXmlApplicationContext、然后它的旁边是一个同门师兄弟FileSystemXmlApplicationContext。看名字就可以知道它们哥俩都是通过加载配置文件来启动Spring的，只不过一个是从程序内加载一个是从系统内加载。</p><p>除了这两个还有一个类AnnotationConfigApplicationContext比较值得我们关注，这个类是用来处理注解式编程的。</p><p>而最上边的ApplicationContext则是大名鼎鼎的Spring核心上下文了</p><h5><span id="源码分析">源码分析</span></h5><p>看一下这个类的源代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractXmlApplicationContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">//配置文件数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Resource</span>[] configResources;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定ApplicationContext的父容器</span></span><br><span class="line">  public <span class="type">ClassPathXmlApplicationContext</span>(<span class="type">ApplicationContext</span> parent) &#123;</span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public <span class="type">ClassPathXmlApplicationContext</span>(<span class="type">String</span>[] configLocations, boolean refresh, <span class="type">ApplicationContext</span> parent)</span><br><span class="line">      <span class="keyword">throws</span> <span class="type">BeansException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span></span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      refresh(); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到整体来看源码比较简单，只有<code>setConfigLocations</code>和<code>refresh</code>两个方法没有看到具体的实现。但是如果你因为这个而小巧了Spring那可就大错特错了，<code>setConfigLocations</code>只是一个开胃小菜，<code>refresh</code>才是我们本文的重点</p><h6><span id="setconfiglocations"><code>setConfigLocations</code></span></h6><p><code>setConfigLocations</code>方法的主要工作有两个：创建环境对象ConfigurableEnvironment和处理ClassPathXmlApplicationContext传入的字符串中的占位符</p><p>跟着<code>setConfigLocations</code>方法一直往下走</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setConfigLocations(<span class="keyword">String</span>... locations) &#123;</span><br><span class="line">    <span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Assert.noNullElements(locations, <span class="string">"Config locations must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">new</span> <span class="keyword">String</span>[locations.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">            <span class="comment">//往下看</span></span><br><span class="line">            <span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).<span class="built_in">trim</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">String</span> resolvePath(<span class="keyword">String</span> path) &#123; </span><br><span class="line">    <span class="keyword">return</span> getEnironment().resolveRequiredPlaceholders(path); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>getEnironment()</code>就涉及到了创建环境变量相关的操作了</p><h6><span id="获取环境变量">获取环境变量</span></h6><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableEnvironment getEnvironment() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.environment = createEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下<code>ConfigurableEnvironment</code>这个接口的继承图（1张没能截全，两张一块看）<br><img src="/2019/08/01/SpringIOC源码解析/8.jpg" alt="1"><br><img src="/2019/08/01/SpringIOC源码解析/9.jpg" alt="1"><br>这个接口比较重要的就是两部分内容了，一个是设置Spring的环境就是我们经常用的spring.profile配置。另外就是系统资源Property</p><p>接着看<code>createEnvironment()</code>方法，发现它返回了一个<code>StandardEnvironment</code>类，而这个类中的<code>customizePropertySources</code>方法就会往资源列表中添加Java进程中的变量和系统的环境变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">    propertySources.addLast(<span class="keyword">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class="line">    propertySources.addLast(<span class="keyword">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="处理占位符">处理占位符</span></h6><p>再次回到 <code>resolvePath</code>方法后跟进通过上方获取的<code>ConfigurableEnvironment</code>接口的<code>resolveRequiredPlaceholders</code>方法，终点就是下方的这个方法。这个方法主要就是处理所有使用${}方式的占位符</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">String</span> parseStringValue(</span><br><span class="line"><span class="keyword">String</span> value, PlaceholderResolver placeholderResolver, Set&lt;<span class="keyword">String</span>&gt; visitedPlaceholders) &#123;</span><br><span class="line"></span><br><span class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder(value);</span><br><span class="line"><span class="built_in">int</span> startIndex = value.indexOf(<span class="keyword">this</span>.placeholderPrefix);</span><br><span class="line"><span class="keyword">while</span> (startIndex != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">int</span> endIndex = findPlaceholderEndIndex(result, startIndex);</span><br><span class="line"><span class="keyword">if</span> (endIndex != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">String</span> placeholder = result.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</span><br><span class="line"><span class="keyword">String</span> originalPlaceholder = placeholder;</span><br><span class="line"><span class="keyword">if</span> (!visitedPlaceholders.<span class="built_in">add</span>(originalPlaceholder)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</span><br><span class="line">&#125;</span><br><span class="line">placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</span><br><span class="line"><span class="comment">// Now obtain the value for the fully resolved key...</span></span><br><span class="line"><span class="keyword">String</span> propVal = placeholderResolver.resolvePlaceholder(placeholder);</span><br><span class="line"><span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="built_in">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</span><br><span class="line"><span class="keyword">if</span> (separatorIndex != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">String</span> actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line"><span class="keyword">String</span> defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</span><br><span class="line">propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</span><br><span class="line"><span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">propVal = defaultValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Recursive invocation, parsing placeholders contained in the</span></span><br><span class="line"><span class="comment">// previously resolved placeholder value.</span></span><br><span class="line">propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</span><br><span class="line">result.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</span><br><span class="line"><span class="comment">// Proceed with unprocessed value.</span></span><br><span class="line">startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</span><br><span class="line">placeholder + <span class="string">"'"</span> + <span class="string">" in value \""</span> + value + <span class="string">"\""</span>);</span><br><span class="line">&#125;</span><br><span class="line">visitedPlaceholders.remove(originalPlaceholder);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">startIndex = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="refresh">refresh</span></h4><p>配置文件名称解析完毕后，就到了最关键的一步refresh方法。这个方法，接下来会用超级长的篇幅来解析这个方法</p><p>先看一下这个方法里大致内容</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是看着有点懵，不要着急，一行一行往下看，不研究明白誓不罢休</p><h5><span id="1-synchronized">1. <code>synchronized</code></span></h5><p>为了避免<code>refresh()</code> 还没结束，再次发起启动或者销毁容器引起的冲突</p><h5><span id="2-preparerefresh">2. <code>prepareRefresh()</code></span></h5><p>做一些准备工作，记录容器的启动时间、标记“已启动”状态、检查环境变量等</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> void prepareRefresh() &#123;</span><br><span class="line"><span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">this</span>.closed.<span class="keyword">set</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">this</span>.active.<span class="keyword">set</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化加载配置文件方法，并没有具体实现，一个留给用户的扩展点</span></span><br><span class="line">initPropertySources();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查环境变量</span></span><br><span class="line">getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.earlyApplicationEvents = new LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中检查环境变量的核心方法为，简单来说就是如果存在环境变量的value为空的时候就抛异常，然后停止启动Spring</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> validateRequiredProperties() &#123;</span><br><span class="line">MissingRequiredPropertiesException ex = <span class="keyword">new</span> MissingRequiredPropertiesException();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span> : <span class="keyword">this</span>.requiredProperties) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.getProperty(<span class="built_in">key</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">ex.addMissingRequiredProperty(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!ex.getMissingRequiredProperties().isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于这个特性我们可以做一些扩展，提前在集合<code>requiredProperties</code>中放入我们这个项目必须存在的一些环境变量。假说我们的生产环境数据库地址、用户名和密码都是使用环境变量的方式注入进去来代替测试环境的配置，那么就可以在这里添加这个校验，在程序刚启动的时候就能发现问题</p><h5><span id="3-obtainfreshbeanfactory">3. <code>obtainFreshBeanFactory()</code></span></h5><p>乍一看这个方法也没几行代码，但是这个方法负责了BeanFactory的初始化、Bean的加载和注册等事件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 核心</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回刚刚创建的 BeanFactory</span></span><br><span class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="beanfactory">BeanFactory</span></h6><p>先看<code>refreshBeanFactory()</code></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">// 判断当前ApplicationContext是否存在BeanFactory，如果存在的话就销毁所有 Bean，关闭 BeanFactory</span></span><br><span class="line">   <span class="comment">// 注意，一个应用可以存在多个BeanFactory，这里判断的是当前ApplicationContext是否存在BeanFactory</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 初始化DefaultListableBeanFactory</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 加载 Bean 到 BeanFactory 中</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里一开始就实例化了一个DefaultListableBeanFactory，先看一下这个类的继承关系<br><img src="/2019/08/01/SpringIOC源码解析/2.jpg" alt="2"><br>可以看到这个哥们的背景相当大，所有关于容器的接口、抽象类他都继承了。再看他的方法</p><p><img src="/2019/08/01/SpringIOC源码解析/3.jpg" alt="2"><br><img src="/2019/08/01/SpringIOC源码解析/4.jpg" alt="2"><br><img src="/2019/08/01/SpringIOC源码解析/5.jpg" alt="2"><br><img src="/2019/08/01/SpringIOC源码解析/6.jpg" alt="2"><br>这方法简直多的吓人，妥妥的Spring家族超级富二代。看他的方法名称相信就可以猜出他大部分的功能了</p><h6><span id="beandefinition">BeanDefinition</span></h6><p>在看<code>loadBeanDefinitions()</code>这个方法之前，就必须了解一个东西了。那就是：BeanDefinition</p><p>我们知道BeanFactory是一个Bean容器，而BeanDefinition就是Bean的一种形式（它里面包含了Bean指向的类、是否单例、是否懒加载、Bean的依赖关系等相关的属性）。BeanFactory中就是保存的BeanDefinition。</p><p>看BeanDefinition的接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinition</span> <span class="keyword">extends</span> <span class="title">AttributeAccessor</span>, <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Bean的生命周期，默认只提供sington和prototype两种，在WebApplicationContext中还会有request, session, globalSession, application, websocket 等</span></span><br><span class="line">   String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class="line">   String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 设置父Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setParentName</span><span class="params">(String parentName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取父Bean</span></span><br><span class="line">   <span class="function">String <span class="title">getParentName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置Bean的类名称</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setBeanClassName</span><span class="params">(String beanClassName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取Bean的类名称</span></span><br><span class="line">   <span class="function">String <span class="title">getBeanClassName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置bean的scope</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setScope</span><span class="params">(String scope)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getScope</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置是否懒加载</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setLazyInit</span><span class="params">(<span class="keyword">boolean</span> lazyInit)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isLazyInit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置该Bean依赖的所有Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setDependsOn</span><span class="params">(String... dependsOn)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回该Bean的所有依赖</span></span><br><span class="line">   String[] getDependsOn();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置该Bean是否可以注入到其他Bean中</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setAutowireCandidate</span><span class="params">(<span class="keyword">boolean</span> autowireCandidate)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 该Bean是否可以注入到其他Bean中</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 同一接口的多个实现，如果不指定名字的话，Spring会优先选择设置primary为true的bean</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setPrimary</span><span class="params">(<span class="keyword">boolean</span> primary)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 是否是primary的</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrimary</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 指定工厂名称</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setFactoryBeanName</span><span class="params">(String factoryBeanName)</span></span>;</span><br><span class="line">   <span class="comment">// 获取工厂名称</span></span><br><span class="line">   <span class="function">String <span class="title">getFactoryBeanName</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="comment">// 指定工厂类中的工厂方法名称</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setFactoryMethodName</span><span class="params">(String factoryMethodName)</span></span>;</span><br><span class="line">   <span class="comment">// 获取工厂类中的工厂方法名称</span></span><br><span class="line">   <span class="function">String <span class="title">getFactoryMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构造器参数</span></span><br><span class="line">   <span class="function">ConstructorArgumentValues <span class="title">getConstructorArgumentValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Bean 中的属性值，后面给 bean 注入属性值的时候会说到</span></span><br><span class="line">   <span class="function">MutablePropertyValues <span class="title">getPropertyValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 是否 singleton</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 是否 prototype</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果这个 Bean 是被设置为 abstract，那么不能实例化，常用于作为 父bean 用于继承</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAbstract</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getRole</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">String <span class="title">getResourceDescription</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function">BeanDefinition <span class="title">getOriginatingBeanDefinition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="读取配置文件">读取配置文件</span></h6><p>现在可以看<code>loadBeanDefinitions()</code>方法了，这个方法会根据配置，加载各个 Bean，然后放到 BeanFactory 中</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overrideprotected</span> <span class="function"><span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">// 实例化XmlBeanDefinitionReader</span></span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化 BeanDefinitionReader</span></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   <span class="comment">// 接着往下看</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个if是看有没有系统指定的配置文件，如果没有的话就走第二个if加载我们最开始传入的<code>classpath:application-ioc.xml</code></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 循环，处理所有配置文件，咱们这里就传了一个</span></span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">// 继续往下看</span></span><br><span class="line">      counter += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 最后返回加载的所有BeanDefinition的数量</span></span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">loadBeanDefinitions</span><span class="params">(location, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line"><span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Cannot import bean definitions from location ["</span> + location + <span class="string">"]: no ResourceLoader available"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//将配置文件转换为Resource对象</span></span><br><span class="line">Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">  <span class="comment">//接着往下看</span></span><br><span class="line"><span class="keyword">int</span> loadCount = loadBeanDefinitions(resources);</span><br><span class="line"><span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location pattern ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">Resource resource = resourceLoader.getResource(location);</span><br><span class="line"><span class="keyword">int</span> loadCount = loadBeanDefinitions(resource);</span><br><span class="line"><span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">actualResources.add(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> loadCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>离解析越来越近了<br>这里先小小的看一下Spring中的设计模式，我们跟着<code>loadBeanDefinitions()</code>方法往下走，最终会进入类XmlBeanDefinitionReader，这是因为我们这里要解析的配置文件是XML。如果我们使用Java类配置或者是Groovy的话就是另外的类了。看一下这个类继承图：<br><img src="/2019/08/01/SpringIOC源码解析/7.jpg" alt="2"></p><p>接着看</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span>(<span class="params">EncodedResource encodedResource</span>) throws BeanDefinitionStoreException </span>&#123;</span><br><span class="line">Assert.notNull(encodedResource, <span class="string">"EncodedResource must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">get</span>();</span><br><span class="line"><span class="keyword">if</span> (currentResources == <span class="literal">null</span>) &#123;</span><br><span class="line">currentResources = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">set</span>(currentResources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!currentResources.<span class="keyword">add</span>(encodedResource)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//获取文件流</span></span><br><span class="line">InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line"><span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//加载</span></span><br><span class="line"><span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">currentResources.<span class="keyword">remove</span>(encodedResource);</span><br><span class="line"><span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.<span class="keyword">remove</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是分为两步</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> doLoadBeanDefinitions(InputSource inputSource, Resource resource)</span><br><span class="line"><span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将 xml 文件转换为 Document 对象</span></span><br><span class="line">Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">   <span class="comment">//根据Document对象注册Bean</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">registerBeanDefinitions</span><span class="params">(doc, resource)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line"><span class="string">"Line "</span> + ex.getLineNumber() + <span class="string">" in XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line"><span class="string">"XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line"><span class="string">"Parser configuration exception parsing XML from "</span> + resource, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line"><span class="string">"IOException parsing XML document from "</span> + resource, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line"><span class="string">"Unexpected exception parsing XML document from "</span> + resource, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件转换就不详细展开了，接着往下看</p><h6><span id="注册bean">注册Bean</span></h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span>(<span class="params">Document doc, Resource resource</span>) throws BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//构建读取Document的工具类</span></span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="comment">//获取已注册的bean数量</span></span><br><span class="line">   <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">   <span class="comment">// 在这接着往下看</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="comment">//总注册的bean减去之前注册的bean就是本次注册的bean</span></span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span>(<span class="params">Document doc, XmlReaderContext readerContext</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">logger.debug(<span class="string">"Loading bean definitions"</span>);</span><br><span class="line">        <span class="comment">//获取Document的根节点</span></span><br><span class="line">Element root = doc.getDocumentElement();</span><br><span class="line">        <span class="comment">//继续往下</span></span><br><span class="line">doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span>(<span class="params">Element root</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 当前根节点</span></span><br><span class="line">BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.<span class="keyword">delegate</span>;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">delegate</span> = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.<span class="keyword">delegate</span>.isDefaultNamespace(root)) &#123;</span><br><span class="line"><span class="comment">// 获取 &lt;beans ... profile="***" /&gt; 中的 profile参数与当前环境是否匹配，如果不匹配则不再进行解析</span></span><br><span class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line"><span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line"><span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 前置扩展点</span></span><br><span class="line">preProcessXml(root);</span><br><span class="line"><span class="comment">// 往下看</span></span><br><span class="line">parseBeanDefinitions(root, <span class="keyword">this</span>.<span class="keyword">delegate</span>);</span><br><span class="line"><span class="comment">// 后置扩展点</span></span><br><span class="line">postProcessXml(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">delegate</span> = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="改变bean定义的扩展点">改变bean定义的扩展点</span></h6><p>preProcessXml和postProcessXml着两个办法是留给我们实现DefaultBeanDefinitionDocumentReader方法后自定义实现的</p><h6><span id="解析xml">解析XML</span></h6><p>接下来，看核心解析方法 <code>parseBeanDefinitions()</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span>(<span class="params">Element root, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">delegate</span>.isDefaultNamespace(root)) &#123;</span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node instanceof Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">delegate</span>.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">// 解析 default namespace 下面的几个元素</span></span><br><span class="line">               parseDefaultElement(ele, <span class="keyword">delegate</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 解析其他 namespace 的元素</span></span><br><span class="line">               <span class="keyword">delegate</span>.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 解析其他 namespace 的元素</span></span><br><span class="line">      <span class="keyword">delegate</span>.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着往下看这些标签的处理方式</p><h6><span id="default标签处理">default标签处理</span></h6><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// 处理 &lt;import /&gt; 标签</span></span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// 处理 &lt;alias /&gt; 标签</span></span><br><span class="line">      <span class="comment">// &lt;alias name="fromName" alias="toName"/&gt;</span></span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// 处理 &lt;bean /&gt; 标签定义</span></span><br><span class="line">      processBeanDefinition(ele, <span class="keyword">delegate</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">delegate</span>.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// 处理 &lt;beans /&gt; 标签</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看一下<bean> 标签的处理方式</bean></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//创建BeanDefinition</span></span><br><span class="line">BeanDefinitionHolder bdHolder = <span class="keyword">delegate</span>.parseBeanDefinitionElement(ele);</span><br><span class="line"><span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">bdHolder = <span class="keyword">delegate</span>.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Register the final decorated instance.</span></span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Send registration event.</span></span><br><span class="line">getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先从第一行往下看</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">public</span> <span class="keyword">BeanDefinitionHolder </span>parseBeanDefinitionElement(Element ele) &#123;</span><br><span class="line">    return parseBeanDefinitionElement(ele, null)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">public</span> <span class="keyword">BeanDefinitionHolder </span>parseBeanDefinitionElement(Element ele, <span class="keyword">BeanDefinition </span>containingBean) &#123;</span><br><span class="line">   <span class="keyword">String </span>id = ele.getAttribute(ID_ATTRIBUTE)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">String </span>nameAttr = ele.getAttribute(NAME_ATTRIBUTE)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   List&lt;<span class="keyword">String&gt; </span>aliases = new ArrayList&lt;<span class="keyword">String&gt;();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  // 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span><br><span class="line">   <span class="meta">if</span> (<span class="keyword">StringUtils.hasLength(nameAttr)) </span>&#123;</span><br><span class="line">      <span class="keyword">String[] </span>nameArr = <span class="keyword">StringUtils.tokenizeToStringArray(nameAttr, </span><span class="keyword">MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span></span><br><span class="line"><span class="keyword"> </span>     aliases.<span class="keyword">addAll(Arrays.asList(nameArr));</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">String </span><span class="keyword">beanName </span>= id<span class="comment">;</span></span><br><span class="line">   // 如果没有指定id, 那么用别名列表的第一个名字作为<span class="keyword">beanName</span></span><br><span class="line"><span class="keyword"> </span>  <span class="meta">if</span> (!<span class="keyword">StringUtils.hasText(beanName) </span>&amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">beanName </span>= aliases.remove(<span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">      <span class="meta">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"No XML 'id' specified - using '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line">               <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (containingBean == null) &#123;</span><br><span class="line">      checkNameUniqueness(<span class="keyword">beanName, </span>aliases, ele)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 根据 &lt;<span class="keyword">bean </span>...&gt;...&lt;/<span class="keyword">bean&gt; </span>中的配置创建 <span class="keyword">BeanDefinition，然后把配置中的信息都设置到实例中,</span></span><br><span class="line"><span class="keyword"> </span>  // 这行执行完毕，一个 <span class="keyword">BeanDefinition </span>实例就出来了。等下接着往下看</span><br><span class="line">   AbstractBeanDefinition <span class="keyword">beanDefinition </span>= parseBeanDefinitionElement(ele, <span class="keyword">beanName, </span>containingBean)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // &lt;<span class="keyword">bean </span>/&gt; 标签完成</span><br><span class="line">   <span class="meta">if</span> (<span class="keyword">beanDefinition </span>!= null) &#123;</span><br><span class="line">      // 如果没有设置 id 和 name，那么此时的 <span class="keyword">beanName </span>就会为 null</span><br><span class="line">      <span class="meta">if</span> (!<span class="keyword">StringUtils.hasText(beanName)) </span>&#123;</span><br><span class="line">         try &#123;</span><br><span class="line">            <span class="meta">if</span> (containingBean != null) &#123;</span><br><span class="line">               <span class="keyword">beanName </span>= <span class="keyword">BeanDefinitionReaderUtils.generateBeanName(</span></span><br><span class="line"><span class="keyword"> </span>                    <span class="keyword">beanDefinition, </span>this.readerContext.getRegistry(), true)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">else</span> &#123;</span><br><span class="line">               <span class="keyword">beanName </span>= this.readerContext.generateBeanName(<span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>              <span class="keyword">String </span><span class="keyword">beanClassName </span>= <span class="keyword">beanDefinition.getBeanClassName();</span></span><br><span class="line"><span class="keyword"> </span>              <span class="meta">if</span> (<span class="keyword">beanClassName </span>!= null &amp;&amp;</span><br><span class="line">                     <span class="keyword">beanName.startsWith(beanClassName) </span>&amp;&amp; <span class="keyword">beanName.length() </span>&gt; <span class="keyword">beanClassName.length() </span>&amp;&amp;</span><br><span class="line">                     !this.readerContext.getRegistry().<span class="keyword">isBeanNameInUse(beanClassName)) </span>&#123;</span><br><span class="line">                  // 把 <span class="keyword">beanClassName </span>设置为 <span class="keyword">Bean </span>的别名</span><br><span class="line">                  aliases.<span class="keyword">add(beanClassName);</span></span><br><span class="line"><span class="keyword"> </span>              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + <span class="keyword">beanName </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         catch (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele)<span class="comment">;</span></span><br><span class="line">            return null<span class="comment">;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">String[] </span>aliasesArray = <span class="keyword">StringUtils.toStringArray(aliases);</span></span><br><span class="line"><span class="keyword"> </span>     // 返回 <span class="keyword">BeanDefinitionHolder</span></span><br><span class="line"><span class="keyword"> </span>     return new <span class="keyword">BeanDefinitionHolder(beanDefinition, </span><span class="keyword">beanName, </span>aliasesArray)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return null<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="创建beandefinition">创建BeanDefinition</span></h6><p><strong>接着是最重要的地方，如何根据配置创建 BeanDefinition 实例</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> AbstractBeanDefinition parseBeanDefinitionElement(</span><br><span class="line">      Element ele, <span class="keyword">String</span> beanName, BeanDefinition containingBean) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">String</span> className = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">      className = ele.getAttribute(CLASS_ATTRIBUTE).<span class="built_in">trim</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">String</span> parent = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">         parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建 BeanDefinition，然后设置类信息</span></span><br><span class="line">      AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span></span><br><span class="line">      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，</span></span><br><span class="line"><span class="comment">       * 解析出来以后的信息都放到 bd 的属性中</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 解析 &lt;meta /&gt;</span></span><br><span class="line">      parseMetaElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;lookup-method /&gt;</span></span><br><span class="line">      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">      <span class="comment">// 解析 &lt;replaced-method /&gt;</span></span><br><span class="line">      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">    <span class="comment">// 解析 &lt;constructor-arg /&gt;</span></span><br><span class="line">      parseConstructorArgElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;property /&gt;</span></span><br><span class="line">      parsePropertyElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;qualifier /&gt;</span></span><br><span class="line">      parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">      bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">      error(<span class="string">"Bean class ["</span> + className + <span class="string">"] not found"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">      error(<span class="string">"Class that bean class ["</span> + className + <span class="string">"] depends on not found"</span>, ele, err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      error(<span class="string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于终于这么长时间把这个BeanDefinition搞出来了，太不容易了！！！</p><p>接着回到刚才的代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span>(<span class="params">Element ele, BeanDefinitionParserDelegate <span class="keyword">delegate</span></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 上面说的一堆</span></span><br><span class="line">   BeanDefinitionHolder bdHolder = <span class="keyword">delegate</span>.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有自定义属性的话，进行相应的解析</span></span><br><span class="line">      bdHolder = <span class="keyword">delegate</span>.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 注册Bean</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注册完成后，发送事件</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="bean的注册">Bean的注册</span></h6><p>这次看注册bean的实现</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">public</span> static void registerBeanDefinition(</span><br><span class="line">      <span class="keyword">BeanDefinitionHolder </span>definitionHolder, <span class="keyword">BeanDefinitionRegistry </span>registry)</span><br><span class="line">      throws <span class="keyword">BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">String </span><span class="keyword">beanName </span>= definitionHolder.getBeanName()<span class="comment">;</span></span><br><span class="line">   // 注册这个 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"> </span>  registry.registerBeanDefinition(<span class="keyword">beanName, </span>definitionHolder.getBeanDefinition())<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 如果配置有别名的话，也要根据别名全部注册一遍</span><br><span class="line">   <span class="keyword">String[] </span>aliases = definitionHolder.getAliases()<span class="comment">;</span></span><br><span class="line">   <span class="meta">if</span> (aliases != null) &#123;</span><br><span class="line">      for (<span class="keyword">String </span><span class="meta">alias</span> : aliases) &#123;</span><br><span class="line">         registry.registerAlias(<span class="keyword">beanName, </span><span class="meta">alias</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是一个长方法。。。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="symbol">public</span> void registerBeanDefinition(<span class="keyword">String </span><span class="keyword">beanName, </span><span class="keyword">BeanDefinition </span><span class="keyword">beanDefinition)</span></span><br><span class="line"><span class="keyword"> </span>     throws <span class="keyword">BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">Assert</span>.hasText(<span class="keyword">beanName, </span><span class="string">"Bean name must not be empty"</span>)<span class="comment">;</span></span><br><span class="line">   <span class="meta">Assert</span>.notNull(<span class="keyword">beanDefinition, </span><span class="string">"BeanDefinition must not be null"</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (<span class="keyword">beanDefinition </span>instanceof AbstractBeanDefinition) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         ((AbstractBeanDefinition) <span class="keyword">beanDefinition).validate();</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">      catch (<span class="keyword">BeanDefinitionValidationException </span>ex) &#123;</span><br><span class="line">         throw new <span class="keyword">BeanDefinitionStoreException(...);</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">BeanDefinition </span>oldBeanDefinition<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 所有的 <span class="keyword">Bean </span>注册后都会被放入到这个<span class="keyword">beanDefinitionMap </span>中，查看是否已存在这个<span class="keyword">bean</span></span><br><span class="line"><span class="keyword"> </span>  oldBeanDefinition = this.<span class="keyword">beanDefinitionMap.get(beanName);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  // 处理重复名称的 <span class="keyword">Bean </span>定义的情况</span><br><span class="line">   <span class="meta">if</span> (oldBeanDefinition != null) &#123;</span><br><span class="line">      <span class="meta">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">         // 如果不允许覆盖的话，抛异常</span><br><span class="line">        throw new <span class="keyword">BeanDefinitionStoreException(beanDefinition.getResourceDescription(), </span><span class="keyword">beanName,</span></span><br><span class="line"><span class="keyword"></span><span class="string">"Cannot register bean definition ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"] for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"': There is already ["</span> + oldBeanDefinition + <span class="string">"] bound."</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> <span class="meta">if</span> (oldBeanDefinition.getRole() &lt; <span class="keyword">beanDefinition.getRole()) </span>&#123;</span><br><span class="line">         // 用框架定义的 <span class="keyword">Bean </span>覆盖用户自定义的 <span class="keyword">Bean </span></span><br><span class="line"><span class="meta">if</span> (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">this.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">oldBeanDefinition + <span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> <span class="meta">if</span> (!<span class="keyword">beanDefinition.equals(oldBeanDefinition)) </span>&#123;</span><br><span class="line">         // 用新的 <span class="keyword">Bean </span>覆盖旧的 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (this.logger.isWarnEnabled()) &#123;</span><br><span class="line">this.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">oldBeanDefinition + <span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> &#123;</span><br><span class="line">         // log...用同等的 <span class="keyword">Bean </span>覆盖旧的 <span class="keyword">Bean</span></span><br><span class="line"><span class="keyword"></span><span class="meta">if</span> (this.logger.isInfoEnabled()) &#123;</span><br><span class="line">this.logger.info(<span class="string">"Overriding bean definition for bean '"</span> + <span class="keyword">beanName </span>+</span><br><span class="line"><span class="string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + <span class="keyword">beanDefinition </span>+ <span class="string">"]"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 覆盖</span><br><span class="line">      this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line">   <span class="meta">else</span> &#123;</span><br><span class="line">      // 判断是否已经有其他的 <span class="keyword">Bean </span>开始初始化了.注意，<span class="string">"注册Bean"</span> 这个动作结束，<span class="keyword">Bean </span>依然还没有初始化 在 Spring 容器启动的最后，会 预初始化 所有的 singleton <span class="keyword">beans</span></span><br><span class="line"><span class="keyword"> </span>     <span class="meta">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">         // Cannot modify startup-time collection elements anymore (for stable <span class="keyword">iteration)</span></span><br><span class="line"><span class="keyword"> </span>        synchronized (this.<span class="keyword">beanDefinitionMap) </span>&#123;</span><br><span class="line">            this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>           List&lt;<span class="keyword">String&gt; </span>updatedDefinitions = new ArrayList&lt;<span class="keyword">String&gt;(this.beanDefinitionNames.size() </span>+ <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">            updatedDefinitions.<span class="keyword">addAll(this.beanDefinitionNames);</span></span><br><span class="line"><span class="keyword"> </span>           updatedDefinitions.<span class="keyword">add(beanName);</span></span><br><span class="line"><span class="keyword"> </span>           this.<span class="keyword">beanDefinitionNames </span>= updatedDefinitions<span class="comment">;</span></span><br><span class="line">            <span class="meta">if</span> (this.manualSingletonNames.contains(<span class="keyword">beanName)) </span>&#123;</span><br><span class="line">               Set&lt;<span class="keyword">String&gt; </span>updatedSingletons = new LinkedHashSet&lt;<span class="keyword">String&gt;(this.manualSingletonNames);</span></span><br><span class="line"><span class="keyword"> </span>              updatedSingletons.remove(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>              this.manualSingletonNames = updatedSingletons<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">else</span> &#123;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">         // 将 <span class="keyword">BeanDefinition </span>放到这个 <span class="meta">map</span> 中，这个 <span class="meta">map</span> 保存了所有的 <span class="keyword">BeanDefinition</span></span><br><span class="line"><span class="keyword"> </span>        this.<span class="keyword">beanDefinitionMap.put(beanName, </span><span class="keyword">beanDefinition);</span></span><br><span class="line"><span class="keyword"> </span>        // 这是个 ArrayList，所以会按照 <span class="keyword">bean </span>配置的顺序保存每一个注册的 <span class="keyword">Bean </span>的名字</span><br><span class="line">         this.<span class="keyword">beanDefinitionNames.add(beanName);</span></span><br><span class="line"><span class="keyword"> </span>        // 这是个 LinkedHashSet，代表的是手动注册的 singleton <span class="keyword">bean，</span></span><br><span class="line"><span class="keyword"> </span>        this.manualSingletonNames.remove(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>     &#125;</span><br><span class="line">      this.frozenBeanDefinitionNames = null<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">if</span> (oldBeanDefinition != null <span class="title">||</span> containsSingleton(<span class="keyword">beanName)) </span>&#123;</span><br><span class="line">      resetBeanDefinition(<span class="keyword">beanName);</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里已经初始化了 Bean 容器，<bean>的配置也相应的转换为了一个个BeanDefinition，然后注册了所有的BeanDefinition到beanDefinitionMap</bean></p><h5><span id="4-preparebeanfactory">4. <code>prepareBeanFactory()</code></span></h5><p>现在回到最开始的<code>refresh()</code>方法<br><code>prepareBeanFactory()</code>这个方法主要会设置BeanFactory的类加载器、添加几个 BeanPostProcessor、手动注册几个特殊的bean</p><p>继续撸代码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">protected</span> void prepareBeanFactory(ConfigurableListableBeanFactory <span class="keyword">beanFactory) </span>&#123;</span><br><span class="line"></span><br><span class="line">   // 设置为加载当前ApplicationContext类的类加载器</span><br><span class="line">   <span class="keyword">beanFactory.setBeanClassLoader(getClassLoader());</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  // 设置 <span class="keyword">BeanExpressionResolver</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.setBeanExpressionResolver(new </span>StandardBeanExpressionResolver(<span class="keyword">beanFactory.getBeanClassLoader()));</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.addPropertyEditorRegistrar(new </span>ResourceEditorRegistrar(this, getEnvironment()))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 这里是Spring的又一个扩展点</span><br><span class="line">   //在所有实现了Aware接口的<span class="keyword">bean在初始化的时候，这个 </span>processor负责回调，</span><br><span class="line">   // 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span><br><span class="line">   // 注意：它不仅仅回调 ApplicationContextAware，还会负责回调 EnvironmentAware、ResourceLoaderAware 等</span><br><span class="line">   <span class="keyword">beanFactory.addBeanPostProcessor(new </span>ApplicationContextAwareProcessor(this))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 下面几行的意思就是，如果某个 <span class="keyword">bean </span>依赖于以下几个接口的实现类，在自动装配的时候忽略它们，Spring 会通过其他方式来处理这些依赖。</span><br><span class="line">   <span class="keyword">beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>  //下面几行就是为特殊的几个 <span class="keyword">bean </span>赋值，如果有 <span class="keyword">bean </span>依赖了以下几个，会注入这边相应的值</span><br><span class="line">   <span class="keyword">beanFactory.registerResolvableDependency(BeanFactory.class, </span><span class="keyword">beanFactory);</span></span><br><span class="line"><span class="keyword"> </span>  <span class="keyword">beanFactory.registerResolvableDependency(ResourceLoader.class, </span>this)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, </span>this)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">beanFactory.registerResolvableDependency(ApplicationContext.class, </span>this)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 注册 事件监听器</span><br><span class="line">   <span class="keyword">beanFactory.addBeanPostProcessor(new </span>ApplicationListenerDetector(this))<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">   // 如果存在<span class="keyword">bean名称为loadTimeWeaver的bean则注册一个BeanPostProcessor</span></span><br><span class="line"><span class="keyword"> </span>  <span class="meta">if</span> (<span class="keyword">beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) </span>&#123;</span><br><span class="line">      <span class="keyword">beanFactory.addBeanPostProcessor(new </span>LoadTimeWeaverAwareProcessor(<span class="keyword">beanFactory));</span></span><br><span class="line"><span class="keyword"> </span>     // Set a temporary ClassLoader for type matching.</span><br><span class="line">      <span class="keyword">beanFactory.setTempClassLoader(new </span>ContextTypeMatchClassLoader(<span class="keyword">beanFactory.getBeanClassLoader()));</span></span><br><span class="line"><span class="keyword"> </span>  &#125;</span><br><span class="line"></span><br><span class="line">   // 如果没有定义 <span class="string">"environment"</span> 这个 <span class="keyword">bean，那么 </span>Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="meta">if</span> (!<span class="keyword">beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) </span>&#123;</span><br><span class="line">      <span class="keyword">beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, </span>getEnvironment())<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">   // 如果没有定义 <span class="string">"systemProperties"</span> 这个 <span class="keyword">bean，那么 </span>Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="meta">if</span> (!<span class="keyword">beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) </span>&#123;</span><br><span class="line">      <span class="keyword">beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, </span>getEnvironment().getSystemProperties())<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">   // 如果没有定义 <span class="string">"systemEnvironment"</span> 这个 <span class="keyword">bean，那么 </span>Spring 会 <span class="string">"手动"</span> 注册一个</span><br><span class="line">   <span class="meta">if</span> (!<span class="keyword">beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) </span>&#123;</span><br><span class="line">      <span class="keyword">beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, </span>getEnvironment().getSystemEnvironment())<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="5-postprocessbeanfactory">5. <code>postProcessBeanFactory()</code></span></h5><p>这个比较简单，又是Spring的一个扩展点</p><p>如果有Bean实现了BeanFactoryPostProcessor接口，<br>那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</p><h5><span id="6-invokebeanfactorypostprocessors">6. <code>invokeBeanFactoryPostProcessors()</code></span></h5><p>调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</p><h5><span id="7-registerbeanpostprocessors">7. <code>registerBeanPostProcessors()</code></span></h5><p>又是一个扩展点</p><p>注册 BeanPostProcessor 的实现类，注意不是BeanFactoryPostProcessor<br>此接口有两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization<br>分别会在Bean初始化之前和初始化之后得到执行</p><h5><span id="8-initmessagesource">8. <code>initMessageSource()</code></span></h5><p>初始化当前 ApplicationContext 的 MessageSource，有想了解国际化的相关知识可以深入研究一下</p><h5><span id="9-initapplicationeventmulticaster">9. <code>initApplicationEventMulticaster()</code></span></h5><p>这个方法主要为初始化当前 ApplicationContext 的事件广播器</p><p>撸代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void initApplicationEventMulticaster() throws BeansException &#123;</span><br><span class="line">    <span class="comment">//如果用户配置了自定义事件广播器，就使用用户的</span></span><br><span class="line">      <span class="keyword">if</span> (containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME )) &#123;</span><br><span class="line">           <span class="keyword">this</span>.applicationEventMulticaster = (ApplicationEventMulticaster)</span><br><span class="line">                   getBean( APPLICATION_EVENT_MULTICASTER_BEAN_NAME , </span><br><span class="line">                                 ApplicationEventMulticaster.<span class="keyword">class</span> );</span><br><span class="line">           <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                   logger.info(<span class="string">"Using ApplicationEventMulticaster ["</span> </span><br><span class="line">                                     + <span class="keyword">this</span>. applicationEventMulticaster + <span class="string">"]"</span> );</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//使用默认的时间广播器</span></span><br><span class="line">           <span class="keyword">this</span>.applicationEventMulticaster = new SimpleApplicationEventMulticaster();</span><br><span class="line">           <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               logger.info(<span class="string">"Unable to locate ApplicationEventMulticaster with name '"</span>+</span><br><span class="line">                        APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</span><br><span class="line">                        <span class="string">"': using default ["</span> + <span class="keyword">this</span> .applicationEventMulticaster + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5><span id="10-onrefresh">10. <code>onRefresh()</code></span></h5><p>又是一个扩展点，子类可以在这里来搞事情</p><h5><span id="11-registerlisteners">11. <code>registerListeners()</code></span></h5><p>注册事件监听器</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> registerListeners() &#123;</span><br><span class="line"><span class="comment">//先添加手动set的一些监听器</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取到监听器的名称，设置到广播器</span></span><br><span class="line">String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.<span class="keyword">class</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span> (String <span class="string">listenerBeanName :</span> listenerBeanNames) &#123;</span><br><span class="line">getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在早期应用事件，发布</span></span><br><span class="line">Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="keyword">this</span>.earlyApplicationEvents;</span><br><span class="line"><span class="keyword">this</span>.earlyApplicationEvents = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (earlyEventsToProcess != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (ApplicationEvent <span class="string">earlyEvent :</span> earlyEventsToProcess) &#123;</span><br><span class="line">getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里不要以为文章结束了，上方那么大的篇幅其实总结起来仅仅只介绍了Bean容器的创建过程，由于平台的字数限制所以本篇文章只能写到这里了。后续内容请看明天的下篇</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五大基础排序算法</title>
      <link href="/2019/07/25/%E4%BA%94%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/07/25/%E4%BA%94%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4><span id="选择排序">选择排序</span></h4><p>假如我们现在要排序的数组为[3,1,0,2,8,4,2]。那么选择排序的排序流程为：</p><ol><li>在这个数组中找出最小值与第一个元素交换，现在数组为[0,1,3,2,8,4,2]</li><li>在这个数组中除了第一个位置的元素外找出最小值与第二个元素交换，因为第二个元素就是最小的所以此次没有发生变化。现在数组为[0,1,3,2,8,4,2]</li><li>在这个数组中除了第一个、第二个位置的元素外找出最小值与第三个元素交换，现在数组为[0,1,2,3,8,4,2]</li><li>在这个数组中除了第一个、第二个、第三个位置的元素外找出最小值与第四个元素交换，现在数组为[0,1,2,2,8,4,3]</li><li>在这个数组中除了第一个、第二个、第三个、第四个位置的元素外找出最小值与第五个元素交换，现在数组为[0,1,2,2,3,4,8]</li><li>在这个数组中除了第一个、第二个、第三个、第四个、第五个位置的元素外找出最小值与第六个个元素交换，因为第六个元素就是最小的所以此次没有发生变化。现在数组为[0,1,2,2,3,4,8]</li></ol><p>现在整个数组是不是已经变得有序了呢。接下来我们看图解版本<br><img src="/2019/07/25/五大基础排序算法/1.png" alt="1"><br>接下来上代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;        <span class="comment">// 有序区的末尾位置</span></span><br><span class="line"><span class="keyword">int</span> j;        <span class="comment">// 无序区的起始位置</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>;    <span class="comment">// 无序区中最小元素位置</span></span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span>(i=<span class="number">0</span>,n=a.length; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="built_in">min</span>=i;</span><br><span class="line">    <span class="comment">// 找出"a[i+1] ... a[n]"之间的最小元素，并赋值给min。</span></span><br><span class="line">    <span class="built_in">for</span>(j=i+<span class="number">1</span>; j&lt;n; j++) &#123;</span><br><span class="line">        <span class="built_in">if</span>(a[j] &lt; a[<span class="built_in">min</span>])</span><br><span class="line">            <span class="built_in">min</span>=j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若min!=i，则交换 a[i] 和 a[min]。</span></span><br><span class="line">    <span class="comment">// 交换之后，保证了a[0] ... a[i] 之间的元素是有序的。</span></span><br><span class="line">    <span class="built_in">if</span>(<span class="built_in">min</span> != i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">        a[i] = a[<span class="built_in">min</span>];</span><br><span class="line">        a[<span class="built_in">min</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="插入排序">插入排序</span></h4><p>相信大家都有打扑克的经历，那么我们今天的插入排序就以拿牌为例开始讲（注意只是举例，不是按打牌的规则哦）</p><ol><li>我们拿到了一张牌3，我们把它放手里，现在手里有牌[3]</li><li>我们拿到了一张牌1，拿它与手里最后一张牌也就是3比较，发现1比3小，所以我们把它插入到3的前面，现在手里有牌[1,3]</li><li>我们拿到了一张牌0，拿它与手里最后一张牌也就是3比较，发现0比3小，所以我们把它插入到3的前面，接着与3的上一张比较发现0比1还小，那么就把0在插入到1的前面，现在手里有牌[0,1,3]</li><li>我们拿到了一张牌2，拿它与手里最后一张牌也就是3比较，发现2比3小，所以我们把它插入到3的前面，接着与3的上一张比较发现2比1大，那么就不需要动了，现在手里有牌[0,1,2,3]</li><li>我们拿到了一张牌8，拿它与手里最后一张牌也就是3比较，8比3大，那么就不需要动了，现在手里有牌[0,1,2,3,8]</li><li>。。。</li></ol><p>现在你明白什么叫做插入排序了么？如果你不明白的话也没关系，我还专门画了一张图：<br><img src="/2019/07/25/五大基础排序算法/2.png" alt="2"></p><p>接下来上代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">int</span> []<span class="built_in">num</span>=<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>,n=<span class="built_in">num</span>.length;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>[i]&lt;<span class="built_in">num</span>[i<span class="number">-1</span>])&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">num</span>[j]&lt;<span class="built_in">num</span>[j<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="built_in">int</span> temp=<span class="built_in">num</span>[j];</span><br><span class="line">                <span class="built_in">num</span>[j]=<span class="built_in">num</span>[j<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">num</span>[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i:<span class="built_in">num</span>)&#123;</span><br><span class="line">    System.out.<span class="built_in">print</span>(i+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="快速排序">快速排序</span></h4><p>快速排序是一个运用了分治法和递归算法的排序方式。假如我们现在要排序的数组为[3,1,0,2,8,4,2]。那么在进行快速排序的时候我们先要进行一些准备：</p><ul><li>n作为一个数组中的标杆，一趟排序过后我们要把数组中所有大于n的数放在它的右边，所有小于n的放在它的左边。一般情况下我们会取数组第一个元素作为n，在此数组中就是n=3</li><li>i我们使用i来找数组中大于标杆的值，i初始指向数组第一个位置</li><li>j我们使用j来找数组中小于标杆的值，j初始指向数组最后一个位置</li></ul><p>下面开始排序：</p><ol><li>先从数组右边开始，我们发现j指向的元素2比标杆n小，那么我们将j指向的元素赋值给i指向的元素，停止操作。此时数组为[2,1,0,2,8,4,2]，i指向第一个位置，j仍指向最后一个。</li><li>从数组左边开始，i指向的元素2比标杆小，所以不做操作，使i++，i指向的元素1比标杆小，所以不做操作，使i++，一直到i指向8的时候比标杆大（注意此处如果等于的话也要操作），那么就把i指向的元素赋值给j指向的元素，此时数组为[2,1,0,2,8,4,8]，i指向第五个位置。也就是元素8，j仍然指向最后一个位置。</li><li>继续从右边操作，j指向的8不比n小，所以不做操作，j–，4不比3小，不做操作，j–。现在i和j的位置重合了，把n放到这个位置上。我们此轮的操作也就结束了</li><li>接下来我们把3所在的位置左边分为一个数组，右边位置分为一个数组再次进行刚才的操作。（此处就是一个递归调用了）<br>接下来就来看一个图片描述的过程<br><img src="/2019/07/25/五大基础排序算法/3.png" alt="3"></li></ol><h4><span id="希尔排序">希尔排序</span></h4><p>希尔排序呢，其实可以理解为插入算法排序的一个升级版了.<br>回忆一下当使用插入排序在进行排序数据量非常大的数据时，有一个很小的数据出现在了数组的最后，那么我们就要移动了这个数据前面所有的元素给它放置到合适的元素。例如：我们要排序的数组为[1,2,3,4,5,6,7，。。。此处省略一百万。。.,0]<br>相信大家肯定不喜欢这个0往前移动一百万此吧，希尔排序的出现其实就是为了解决这个问题的<br>希尔排序使用了分治算法，先把整个大的数组根据某个增量分为若干个组，先对这若干个组进行一个调整，保证大部分小的数据会被调整到前面来。到最后再次进行插入排序，这样就大大加快了效率了。<br>来一个例子，如图所示，我们要排序的数组为[3, 1, 0, 2, 8, 4, 2,6,9,1,3,-2,8],<br><img src="/2019/07/25/五大基础排序算法/4.png" alt="4"></p><ul><li>上方图片所说的增量就是我们进行分组的依据了。我们在这里初始值取得是数组得2分之一（此值没有标准的定义，只需保证大于1且小于数组长度即可），而红线所指向得就是我们根据这个增量所分的组了，我们分别针对每组进行排序。</li><li>可以在增量为3的结果种看到，第一组3，2，8 变为了2，3，8、第二组第三组没变、第四组变为了1，2、第五组变为了3，8、第六组变为了-2，4.</li><li>接下来增量减半，我们的数组分为3组，分别进行排序。</li><li>现在增量值经过再次减半后已经变为1了，我们可以通过观察数组发现，在数组的后面基本不可能出现最小的数据了，现在对数组进行插入排序的效率已经非常高了</li></ul><p>不知道现在的你明白希尔排序了么？来看一看代码吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">list</span>[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> gap,i,j,temp;</span><br><span class="line">     <span class="keyword">for</span> (gap = length/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i = gap; i &lt; length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j = i-gap; j&gt;=<span class="number">0</span> &amp;&amp; <span class="built_in">list</span>[j]&gt;<span class="built_in">list</span>[j+gap]; j -= gap)&#123;</span><br><span class="line">              temp = <span class="built_in">list</span>[j];</span><br><span class="line">                <span class="built_in">list</span>[j] = <span class="built_in">list</span>[j+gap];</span><br><span class="line">                <span class="built_in">list</span>[j+gap] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="冒泡排序">冒泡排序</span></h4><p>冒泡排序在排序算法中效率算最慢的一类了，但是因为它简单的缘故仍然是工作1-3年的程序员面试经常会碰到的算法问题。<br>假如我们现在要排序的数组为[3,1,0,2,8,4,2]</p><ol><li>第一轮排序为比较3和1，发现3比1大，那么我们就交换3和1，数组变成了[1,3,0,2,8,4,2]</li><li>比较3和0，发现3比0大，那么我们就交换3和0，数组变成了[1,0,3,2,8,4,2]</li><li>比较3和2，发现3比2大，那么我们就交换3和2，数组变成了[1,0,2,3,8,4,2]</li><li>比较3和8，发现3没有8大，那么不操作，数组还是[1,0,2,3,8,4,2]</li><li>比较8和4，发现8比4大，那么我们就交换8和4，数组变成了[1,0,2,3,4,8,2]</li><li>比较8和2，发现8比2大，那么我们就交换8和2，数组变成了[1,0,2,3,4,2,8]</li><li>现在第一轮的排序已经完成了，我们就筛选出来了最大值8，此时数字8已经在数组最后的位置了，下一轮排序我们就可以排除它了。第二轮排序为：比较1和0，发现1比0大，那么我们就交换1和0，数组变成了[0,1,2,3,4,2,8]</li><li>比较1和2，发现1没有2大，那么不操作，数组还是[0,1,2,3,4,2,8]</li><li>比较2和3，发现2没有3大，那么不操作，数组还是[0,1,2,3,4,2,8]</li><li>比较3和4，发现3没有4大，那么不操作，数组还是[0,1,2,3,4,2,8]</li><li>比较4和2，发现4比2大，那么我们就交换4和2，数组变成了[0,1,2,3,2,4,8]</li><li>现在第二轮排序完成了，数组最后的4和8是不是已经有序了呢<br>聪明的你是不是已经发现了冒泡排序的规律了呢，代码实现：</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> flag;                 <span class="comment">// 标记</span></span><br><span class="line"><span class="built_in">for</span> (i=a.length<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">    flag = <span class="number">0</span>;            <span class="comment">// 初始化标记为0</span></span><br><span class="line">    <span class="comment">// 将a[0...i]中最大的数据放在末尾</span></span><br><span class="line">    <span class="built_in">for</span> (j=<span class="number">0</span>; j&lt;i; j++) &#123;</span><br><span class="line">        <span class="built_in">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 交换a[j]和a[j+1]</span></span><br><span class="line">            <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">            a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">            a[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            flag = <span class="number">1</span>;    <span class="comment">// 若发生交换，则设标记为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">break</span>;            <span class="comment">// 若没发生交换，则说明数列已有序。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> ii:a)&#123;</span><br><span class="line">    System.out.<span class="built_in">print</span>(ii+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文源码可见<a href="https://github.com/shiyujun/syj-study-demo" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫谈性能调优</title>
      <link href="/2019/07/24/%E6%BC%AB%E8%B0%88%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2019/07/24/%E6%BC%AB%E8%B0%88%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>作为一名高级工程师，性能调优是必不可少的技能，本篇文章是性能调优系列文章的第一篇</p><h4><span id="导致性能瓶颈的几点原因">导致性能瓶颈的几点原因</span></h4><ol><li><strong>CPU</strong>：如果系统中存在视频分析、3D渲染、大量计算这样的应用时，大量的CPU资源的竞争就会引起性能瓶颈</li><li><strong>内存</strong>：一般来说内存不会成为性能瓶颈，为啥人家redis快，就是因为是基于内存的。但是呢内存资源不够用确实是个很致命的问题，就像Java中的OOM大部分都是因为内存资源不够引起的</li><li><strong>磁盘</strong>：我们都知道买一个256G的硬盘的价钱勉强才可以买一个8G的内存条，它们之间的价格差距如此之大主要就是因为内存的读写速度比磁盘大的多，所以说如果程序中存在大量的读写磁盘的场景那么就很容易成为性能瓶颈</li><li><strong>网络</strong>：曾经有人说过网络环境可能是最复杂的，且最不受程序控制的，一个包发出去在哪丢的都不知道。所以如果程序中需要从第三方获取服务的场景就很容易成为瓶颈</li><li><strong>数据库</strong>：数据库是一个程序必须使用到的组件，所有的数据库都存在连接数量、读写速度、数据合并等因素的制约。再者如果使用关系型数据库且没有利用索引等技术的时候更是一场灾难</li><li><strong>锁竞争</strong>：对于高并发应用来说，使用锁来维护数据的一致性是避免不了的。但是维护了一致性就要承受锁竞争带来的线程上下文切换时带来的开销、甚至还有死锁的发生</li></ol><h4><span id="哪些指标可以衡量系统的性能">哪些指标可以衡量系统的性能</span></h4><ol><li><strong>响应时间</strong>：应用系统从用户发起请求到做出响应的时间，例如我们平时打游戏时如果响应时间大于几百毫秒我们就会说这玩意真卡，这网速不行啊等等。。</li><li><strong>启动时间</strong>：应用系统从开始运行到可以正常处理业务所浠要花费的时间，比如从点击王者荣耀图标到进入系统开始撸的时间</li><li><strong>吞吐量（TPS）</strong>：应用程序单位时间内处理的请求数量，例如微信后台服务器一秒可以处理几十万的用户发消息的请求</li><li><strong>每秒查询率（QPS）</strong>：相对特殊的TPS，可以理解为查询服务的TPS并发用户数：系统可以同时支撑正常使用功能的用户量，例如某某游戏周年庆时号称1千万人同时在线</li><li><strong>系统负载</strong>：当系统压力上升时，上述的各项指标的变化曲线是否平缓</li></ol><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java代码中可以优化性能的小细节</title>
      <link href="/2019/07/24/ava%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
      <url>/2019/07/24/ava%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<p><strong>避免对boolean类型的判定</strong><br>反例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(<span class="comment">"a"</span>.equles(<span class="comment">"a"</span>)==<span class="keyword">true</span>）`&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(Objects.equles(<span class="string">"a"</span>,<span class="string">"a"</span>)</span></span>）`&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**多用条件判断符 **</p><p>反例：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>）`<span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"> &#125;</span></span><br><span class="line"><span class="javascript"></span>``<span class="javascript"></span>` </span><br><span class="line">正例：</span><br></pre></td></tr></table></figure><p>a&lt;0?0:1;</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*避免使用instanceof、避免把子类向父类转型*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">掌握好多态即可</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*建议多使用局部变量*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">局部变量保存在栈中，占用的内存随着方法的执行完毕而被释放</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*多使用位运算代替算术运算*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">就是可读性差点</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*一维数组和二维数组的恩怨情仇*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">保存同样的数据使用一维数组和二维数组的区别是前者以时间换空间后者是以空间换时间</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*不要经常使用取反操作符*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">反例：</span></span><br></pre></td></tr></table></figure><p>if(!a&lt;0）`{<br>return 0;<br>}else{<br>return 1;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正例：</span><br></pre></td></tr></table></figure><p>if(a&gt;=0）`{<br>return 0;<br>}else{<br>return 1;<br>}</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**快速操作一个超大<span class="keyword">List</span>的连续性数据**</span><br><span class="line"></span><br><span class="line">使用集合的`<span class="keyword">List</span>&lt;E&gt; subList(<span class="keyword">int</span> fromIndex,<span class="keyword">int</span> toIndex)`方法可以返回一个超大<span class="keyword">List</span>的一段连续性数据，此时对这个subList的所有操作比如`clear()`等操作都会影响到原<span class="keyword">List</span></span><br><span class="line"></span><br><span class="line">**当一个方法的返回值是<span class="keyword">List</span>的时候请返回一个size为<span class="number">0</span>的<span class="keyword">list</span>而不是<span class="keyword">null</span>从而避免空指针异常**</span><br><span class="line"></span><br><span class="line">**单个字符串连接时使用单引号代替双引号**</span><br><span class="line">反例：</span><br></pre></td></tr></table></figure><p>“abc”+“d”;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正例：</span><br></pre></td></tr></table></figure><p>“abc”+‘d’;</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*<span class="strong">*大量字符串拼接时使用StringBuffer代替+*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*切割字符串的时候使用StringTokenizer代替split*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">*</span><span class="strong">*提前计算出需要循环的次数*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">反例：</span></span><br></pre></td></tr></table></figure><p>for(int i=0i&lt;a.size();;i++){<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正例：</span><br></pre></td></tr></table></figure><p>for(int i=0,n=a.size();i&lt;n;i++){<br>}</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*<span class="strong">*减少不必要的需要循环的次数*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">反例：</span></span><br></pre></td></tr></table></figure><p>int index=-1;<br>for(int i=0,n=a.size();i&lt;n;i++){<br>if(a.get(i)==3){<br>index=i;<br>}<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正例：</span><br></pre></td></tr></table></figure><p>int index=-1;<br>for(int i=0,n=a.size();i&lt;n;i++){<br>if(a.get(i)==3){<br>index=i;<br>break;<br>}<br>}</p><pre><code>**不要在循环中改变数组/List的大小****使用`System.arrayCopy`进行复制数组****使用Buffer进行IO操作****释放资源的代码要放在finally代码块中****多用java.util.Obects工具类**&lt;h4 style=&quot;color:red&quot;&gt;推荐阅读&lt;/h4&gt; 1. [SpringCloud学习系列汇总](https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A)    2. [为什么一线大厂面试必问redis，有啥好问的？](https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg)    3. [多线程面试必备基础知识汇总](https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/)  4. [Java集合源码分析汇总-JDK1.8](https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ)      5. [Linux常用命令速查-汇总篇](https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA)      6. [JVM系列文章汇总](https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw)      7. [MySQL系列文章汇总](https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA) 7. [RabbitMQ系列文章汇总](https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw)    &lt;h4 style=&quot;color:red&quot;&gt;博客所有文章首发于公众号《Java学习录》转载请保留扫码关注公众号即可领取2000GJava学习资源 &lt;/h4&gt;![1](https://shiyujun.cn/img/gongzhonghao.jpg)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s时区问题解决方案</title>
      <link href="/2019/07/20/k8s%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/07/20/k8s%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>前几天在使用k8s中的CronJob时发现了一个很奇怪的问题， 按照官方文档的demo跑起来是没有任何问题的，<br>但是当我想要设置每天一个固定时间点例如12点20执行一个job的时候，到了时间之后无论如何都不会执行。</p><p>一开始怀疑是cron表达式写的有问题，但是经过多次试验倒是没问题，然后就想到了时区的问题。</p><p>首先我先尝试使用PodPreset来修改所有容器的时区（在pod 创建时,用户可以使用 podpreset 对象将特定信息注入 pod 中,这些信息可以包括 secret、 卷、 卷挂载和环境变量）</p><p>默认k8s是没有开启PodPreset的，开启PodPreset需要修改master节点上的/etc/kubernetes/manifests/kube-apiserver.yaml文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先在<span class="keyword">CMD</span><span class="bash">末尾添加一个--runtime-config=settings.k8s.io/v1alpha1=<span class="literal">true</span></span></span><br><span class="line"><span class="bash">在--<span class="built_in">enable</span>-admission-plugins的后面增加一个PodPreset</span></span><br><span class="line"><span class="bash">重启k8ssystemctl restart kubelet</span></span><br></pre></td></tr></table></figure><p>创建一个yml，为所有的pod挂载一个时区的环境变量</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: settings.k8s.io/v1alpha1</span><br><span class="line"><span class="attribute">kind</span>: PodPreset</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: tz-env</span><br><span class="line">  <span class="attribute">namespace</span>: unicode-pay</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line">  <span class="attribute">selector</span>:</span><br><span class="line">    <span class="attribute">matchLabels</span>:</span><br><span class="line">  <span class="attribute">env</span>:</span><br><span class="line">    - <span class="attribute">name</span>: TZ</span><br><span class="line">      <span class="attribute">value</span>: Asia/Shanghai</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>Pod Preset是namespace级别的对象，其作用范围只能是同一个命名空间下容器</li><li>matchLabels为空代表选择所有</li></ol><p>此时再次尝试CronJob之后发现还是不执行，然后进入该命名空间下的其他pod之后查看时间发现也没问题。</p><p>此时想到了虽然把pod的时区更改了，但是k8s调度器可不是按照pod的时间进行调度的，原来此时需要修改的是k8s的时区</p><p>再次来到/etc/kubernetes/manifests目录，使用如下方式修改此目录下4个k8s的组件的时间</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">   name: time</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    volumeMounts:</span><br><span class="line">    -  name: config</span><br><span class="line">       mountPath: /etc/localtime</span><br><span class="line">       readOnly: <span class="literal">true</span></span><br><span class="line">   volumes:</span><br><span class="line">    - name: config</span><br><span class="line">       hostPath:</span><br><span class="line">           path: /etc/localtime</span><br></pre></td></tr></table></figure><p>重启k8s，搞定</p><pre><code>systemctl restart kubelet</code></pre><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何参与一个开源项目!</title>
      <link href="/2019/07/19/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/07/19/%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>1、首先在github上注册一个自己的账号</p><p>2、然后在左上部分搜索一个开源项目,比如说我的项目syj-ratelimit</p><p><img src="/2019/07/19/如何参与一个开源项目/1.png" alt="1"></p><p>3、进入项目之后，单击右上角的fork按钮，github就会在你的帐户下fork一个同样的项目。<br><img src="/2019/07/19/如何参与一个开源项目/2.png" alt="2"><br>4、此时点击右上角自己的头像，可以看到一个your repositories，点击进入就可以看到刚才的那个项目了</p><p><img src="/2019/07/19/如何参与一个开源项目/3.png" alt="3"></p><p>5、现在你就可以在这个项目里取发挥你的个人才智进行修改bug、开发新功能等各种方式的贡献了</p><p>6、当你贡献完毕后就可以把你的贡献推荐给这个项目的开发者了。再次打开github，在你项目的页面上有个这样的按钮，单击它</p><p><img src="/2019/07/19/如何参与一个开源项目/4.png" alt="4"></p><p>7、在新的页面中会显示你这次的改动，继续单击create pull request在弹出的页面中输入本次提交的说明信息，输入完后，单击提交按钮 comment<br><img src="/2019/07/19/如何参与一个开源项目/5.png" alt="5"></p><p>8、到此，你的任务就完成了，等到开源项目的管理人员审核，通过了，他就把你的改动合并到相应的开发分支上。</p><p>9、除了改动代码参与一个开源项目外，为一个项目提出bug也是一种贡献。发现开源项目的bug时，进入项目主页，单击Issue然后选择New Issue在弹出的页面中输入项目bug的描述信息即可</p><p><img src="/2019/07/19/如何参与一个开源项目/6.png" alt="6"></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开源组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Spring所有注解大揭秘 </title>
      <link href="/2019/07/16/Spring%E6%89%80%E6%9C%89%E6%B3%A8%E8%A7%A3%E5%A4%A7%E6%8F%AD%E7%A7%98/"/>
      <url>/2019/07/16/Spring%E6%89%80%E6%9C%89%E6%B3%A8%E8%A7%A3%E5%A4%A7%E6%8F%AD%E7%A7%98/</url>
      
        <content type="html"><![CDATA[<h4><span id="声明bean的注解">声明bean的注解</span></h4><ul><li>@Component 组件，没有明确的角色</li><li>@Service 在业务逻辑层使用（service层）</li><li>@Repository 在数据访问层使用（dao层）</li><li>@Controller 在展现层使用，控制器的声明</li></ul><h4><span id="注入bean的注解">注入bean的注解</span></h4><ul><li>@Autowired：由Spring提供，根据类型进行自动装配，如果组合@Qualifier使用将按名称进行装配</li><li>@Inject：由JSR-330提供使用时需要导入javax.inject.Inject;实现注入同样是根据类型进行自动装配，如果需要按名称进行装配，则需要配合@Named</li><li>@Resource：由JSR-250提供，使用需要导入javax.annotation，根据名称进行自动装配的，一般会指定一个name属性</li></ul><h4><span id="功能注解">功能注解</span></h4><ul><li>@Transactional声明事务</li><li>@Cacheable声明缓存</li></ul><h4><span id="配置类相关注解">配置类相关注解</span></h4><ul><li>@Configuration 声明当前类为配置类</li><li>@Bean 注解在方法上，声明当前方法的返回值为一个bean</li><li>@ComponentScan 用于对Component进行扫描，</li><li>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</li></ul><h4><span id="切面aop相关注解">切面（AOP）相关注解</span></h4><ul><li>@Aspect 声明一个切面</li><li>@After 在方法执行之后执行</li><li>@Before 在方法执行之前执行</li><li>@Around 在方法执行之前与之后都执行</li><li>@PointCut 声明切点</li></ul><h4><span id="bean的属性支持">@Bean的属性支持</span></h4><p>@Scope设置Spring新建Bean的类型，可选择包括：</p><ul><li>Singleton 单例,一个Spring容器中只有一个bean实例，默认模式</li><li>Protetype 每次调用新建一个bean</li><li>Request web项目中，给每个http request新建一个bean</li><li>Session web项目中，给每个http session新建一个bean</li><li>GlobalSession（给每一个 global http session新建一个Bean实例</li></ul><h4><span id="类生命周期注解">类生命周期注解</span></h4><ul><li>@PostConstruct 由JSR-250提供，在类的构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</li><li>@PreDestory 由JSR-250提供，在Bean销毁之前执行</li></ul><h4><span id="配置注入">配置注入</span></h4><p>@Value为属性注入值，支持如下方式的注入：</p><ul><li>普通字符@Value(“Michael Jackson”)</li><li>操作系统属性@Value(&quot;#{systemProperties[‘<a href="http://os.name" target="_blank" rel="noopener">os.name</a>’]}&quot;)</li><li>表达式结果@Value(&quot;#{ T(java.lang.Math).random() * 100 }&quot;)</li><li>其它bean属性@Value(&quot;#{<a href="http://domeClass.name" target="_blank" rel="noopener">domeClass.name</a>}&quot;)</li><li>文件资源@Value(“classpath:cn/shiyujun/test.txt”)</li><li>网站资源@Value(“<a href="https://shiyujun.cn">https://shiyujun.cn</a>”)</li><li>配置文件属性@Value(&quot;${<a href="http://book.name" target="_blank" rel="noopener">book.name</a>}&quot;)</li></ul><p>注入配置文件@PropertySource(“classpath:cn/shiyujun/test.propertie”)</p><h4><span id="环境切换">环境切换</span></h4><ul><li>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境</li><li>@Conditional根据代码中设置的条件装载不同的bean，包括一系列的注解<ul><li>@ConditionalOnBean存在bean</li><li>@ConditionalOnMissingBean不存在bean</li><li>@ConditionalOnClass存在某个类</li><li>@ConditionalOnMissingClass不存在某个类</li><li>@ConditionalOnProperty(prefix = “syj”, name = “algorithm”, havingValue = “token”)当存在配置文件中以syj为前缀的属性，属性名称为algorithm，然后它的值为token时才会实例化一个类。</li><li>@ConditionalOnProperty(prefix = “syj”, name = “algorithm”, havingValue = “counter”, matchIfMissing = true)如果所有的都不满足的话就选择counter为默认实现</li><li>@ConditionalOnJava如果是Java应用</li><li>@ConditionalOnWebApplication如果是Web应用</li></ul></li></ul><h4><span id="异步相关">异步相关</span></h4><ul><li>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务</li></ul><h4><span id="定时任务相关">定时任务相关</span></h4><ul><li>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型</li></ul><h4><span id="开启某些功能">开启某些功能</span></h4><ul><li>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</li><li>@EnableAsync 开启异步方法的支持</li><li>@EnableScheduling 开启计划任务的支持</li><li>@EnableWebMvc 开启Web MVC的配置支持</li><li>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</li><li>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</li><li>@EnableTransactionManagement 开启注解式事务的支持</li><li>@EnableCaching 开启注解式的缓存支持</li></ul><h4><span id="测试相关注解">测试相关注解</span></h4><ul><li>@RunWith Spring中通常用于对JUnit的支持</li><li>@ContextConfiguration 用来加载配置ApplicationContext</li></ul><h4><span id="springmvc部分">SpringMVC部分</span></h4><ul><li>@RequestMapping 用于映射Web请求，包括访问路径和参数</li><li>ResponseBody 支持将返回值放在response内，而不是一个页面</li><li>@PathVariable 用于接收路径参数</li><li>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody</li><li>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，<br>这对所有注解了 @RequestMapping的控制器内的方法有效。</li><li>@ExceptionHandler 用于全局处理控制器里的异常</li><li>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</li><li>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</li></ul><h4><span id="springboot相关">SpringBoot相关</span></h4><ul><li>@EnableAutoConfiguration自动载入应用程序所需的所有Bean。该注解组合了@Import注解，@Import注解导入了EnableAutoCofigurationImportSelector类，它使用SpringFactoriesLoader.loaderFactoryNames方法来扫描具有META-INF/spring.factories文件的jar包。而spring.factories里声明了有哪些自动配置<br>​+  @SpingBootApplication SpringBoot的核心注解，主要目的是开启自动配置。它也是一个组合注解，主要组合了@Configurer，@EnableAutoConfiguration（核心）和@ComponentScan。可以通过@SpringBootApplication(exclude={想要关闭的自动配置的类名.class})来关闭特定的自动配置</li><li>@ImportResource加载xml配置的</li><li>@AutoConfigureAfter在指定的自动配置类之后再配置</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s常用命令</title>
      <link href="/2019/07/11/k8s-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/11/k8s-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4><span id="主节点相关操作">主节点相关操作</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">更改配置文件，重新加载</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">启动master相关组件</span><br><span class="line">systemctl <span class="keyword">start</span> kube-apiserver/kube-controller-manager/ube-scheduler/etcd.service</span><br><span class="line"></span><br><span class="line">停止<span class="keyword">master</span>相关组件</span><br><span class="line">systemctl <span class="keyword">stop</span> kube-apiserver/kube-controller-manager/ube-scheduler/etcd.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重启<span class="keyword">master</span>相关组件</span><br><span class="line">systemctl restart kube-apiserver/kube-controller-manager/ube-scheduler/etcd.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看<span class="keyword">master</span>相关组件状态</span><br><span class="line">systemctl <span class="keyword">status</span> kube-apiserver/kube-controller-manager/ube-scheduler/etcd.service</span><br><span class="line"></span><br><span class="line">查看各组件信息</span><br><span class="line">kubectl <span class="keyword">get</span> componentstatuses</span><br><span class="line"></span><br><span class="line">查看kubelet进程启动参数</span><br><span class="line">ps -ef | grep kubelet</span><br><span class="line"></span><br><span class="line">查看日志:</span><br><span class="line">journalctl -u kubelet -f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看集群信息</span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line">查看各组件信息</span><br><span class="line">kubectl -s <span class="keyword">http</span>://localhost:<span class="number">8080</span> <span class="keyword">get</span> componentstatuses</span><br></pre></td></tr></table></figure><h4><span id="工作节点相关操作">工作节点相关操作</span></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动worker端相关组件</span><br><span class="line">systemctl start kube-proxy<span class="regexp">/docker/</span>kubelet</span><br><span class="line"></span><br><span class="line">停止worker端相关组件</span><br><span class="line">systemctl stop kube-proxy<span class="regexp">/docker/</span>kubelet</span><br><span class="line"></span><br><span class="line">重启worker端相关组件</span><br><span class="line">systemctl restart kube-proxy<span class="regexp">/docker/</span>kubelet</span><br><span class="line"></span><br><span class="line">查看worker端相关组件状态</span><br><span class="line">systemctl status kube-proxy<span class="regexp">/docker/</span>kubelet</span><br></pre></td></tr></table></figure><h4><span id="节点相关操作">节点相关操作</span></h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">设为<span class="keyword">node</span><span class="title">为不可调度状态：</span></span><br><span class="line"><span class="title">kubectl</span> cordon node1</span><br><span class="line"></span><br><span class="line">解除<span class="keyword">node</span><span class="title">不可调度状态</span></span><br><span class="line"><span class="title">kubectl</span> uncordon node1</span><br><span class="line"></span><br><span class="line">将pod赶到其他节点：</span><br><span class="line">kubectl drain node1</span><br><span class="line"></span><br><span class="line"><span class="literal">master</span>运行pod</span><br><span class="line">kubectl taint nodes <span class="literal">master</span>.k8s <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="literal">master</span>-</span><br><span class="line"></span><br><span class="line"><span class="literal">master</span>不运行pod</span><br><span class="line">kubectl taint nodes <span class="literal">master</span>.k8s <span class="keyword">node</span><span class="title">-role</span>.kubernetes.io/<span class="attr">master=</span>:NoSchedule</span><br></pre></td></tr></table></figure><h4><span id="查看类命令">查看类命令</span></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">获取节点相应服务的信息：</span><br><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br><span class="line"></span><br><span class="line">查看pod相关信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods </span><br><span class="line"></span><br><span class="line">查看指定namespace的pod信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods -n namespace</span><br><span class="line"></span><br><span class="line">按selector名来查找pod</span><br><span class="line">kubectl <span class="builtin-name">get</span> pod --selector <span class="attribute">name</span>=redis</span><br><span class="line"></span><br><span class="line">查看集群所有的pod信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods -A</span><br><span class="line"></span><br><span class="line">查看pods所在的运行节点</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods -o wide</span><br><span class="line"></span><br><span class="line">查看pods定义的详细信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> pods -o yaml</span><br><span class="line"></span><br><span class="line">查看运行的pod的环境变量</span><br><span class="line">kubectl exec pod名 env</span><br><span class="line"></span><br><span class="line">查看指定pod的日志</span><br><span class="line">kubectl logs  podname </span><br><span class="line"></span><br><span class="line">滚动查看指定pod的日志</span><br><span class="line">kubectl logs -f podname </span><br><span class="line"></span><br><span class="line">查看service相关信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> services</span><br><span class="line"></span><br><span class="line">查看deployment相关信息</span><br><span class="line">kubectl <span class="builtin-name">get</span> deployment</span><br><span class="line"></span><br><span class="line">查看指定pod的详细信息</span><br><span class="line">kubectl describe pods-dasdeqwew2312-g6q8c</span><br><span class="line"></span><br><span class="line">查看deployment历史修订版本</span><br><span class="line">kubectl rollout history deployment/nginx-deployment</span><br></pre></td></tr></table></figure><h4><span id="操作类命令">操作类命令</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">创建资源</span><br><span class="line">kubectl <span class="keyword">create</span> -f xx.yaml</span><br><span class="line"></span><br><span class="line">重建资源</span><br><span class="line">kubectl <span class="keyword">replace</span> -f xx.yaml  [<span class="comment">--force]</span></span><br><span class="line"></span><br><span class="line">删除资源</span><br><span class="line">kubectl <span class="keyword">delete</span> -f xx.yaml</span><br><span class="line"></span><br><span class="line">删除指定pod</span><br><span class="line">kubectl <span class="keyword">delete</span> pod podname</span><br><span class="line"></span><br><span class="line">删除指定rc</span><br><span class="line">kubectl <span class="keyword">delete</span> rc rcname</span><br><span class="line"></span><br><span class="line">删除指定service</span><br><span class="line">kubectl <span class="keyword">delete</span> service servicename</span><br><span class="line"></span><br><span class="line">删除所有pod</span><br><span class="line">kubectl <span class="keyword">delete</span> pod <span class="comment">--all</span></span><br><span class="line"></span><br><span class="line">导出所有configmap</span><br><span class="line">kubectl <span class="keyword">get</span> configmap -n kube-<span class="keyword">system</span> -o wide -o yaml &gt; configmap.yaml</span><br><span class="line"></span><br><span class="line">进入pod</span><br><span class="line">kubectl exec -it redis-<span class="keyword">master</span><span class="number">-1033017107</span>-q47hh /<span class="keyword">bin</span>/sh</span><br><span class="line"></span><br><span class="line">增加lable值</span><br><span class="line">kubectl label pod redis-<span class="keyword">master</span><span class="number">-1033017107</span>-q47hh <span class="keyword">role</span>=<span class="keyword">master</span> </span><br><span class="line"></span><br><span class="line">修改lable值</span><br><span class="line">kubectl label pod redis-<span class="keyword">master</span><span class="number">-1033017107</span>-q47hh <span class="keyword">role</span>=backend <span class="comment">--overwrite </span></span><br><span class="line"></span><br><span class="line">更新资源</span><br><span class="line">kubectl <span class="keyword">patch</span> pod rc-nginx<span class="number">-2</span>-kpiqt -p <span class="string">'&#123;"metadata":&#123;"labels":&#123;"app":"nginx-3"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4><span id="升级相关">升级相关</span></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">指定资源副本数量</span><br><span class="line">kubectl scale rc nginx <span class="comment">--replicas=5 </span></span><br><span class="line"></span><br><span class="line">版本升级</span><br><span class="line">kubectl rolling-<span class="keyword">update</span> redis-<span class="keyword">master</span> <span class="comment">--image=redis-master:2.0</span></span><br><span class="line"></span><br><span class="line">版本回滚</span><br><span class="line">kubectl <span class="keyword">rolling</span>-<span class="keyword">update</span> redis-<span class="keyword">master</span> <span class="comment">--image=redis-master:1.0 --rollback </span></span><br><span class="line"></span><br><span class="line">实时观察滚动升级状态</span><br><span class="line">kubectl rollout <span class="keyword">status</span> deployment/nginx-deployment</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s核心yml--Pod、Deployment、Service</title>
      <link href="/2019/07/09/l-pod%E3%80%81deployment%E3%80%81service/"/>
      <url>/2019/07/09/l-pod%E3%80%81deployment%E3%80%81service/</url>
      
        <content type="html"><![CDATA[<h5><span id="pod">Pod</span></h5><p>Kubernetes 使用 Pod 来管理容器，每个 Pod 可以包含一个或多个紧密关联的容器。<br>Pod 是一组紧密关联的容器集合，它们共享 PID、IPC、Network 和 UTS namespace，是 Kubernetes 调度的基本单位。Pod 内的多个容器共享网络和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务</p><p>一个pod的yaml文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1       <span class="meta">#版本号</span></span><br><span class="line"><span class="symbol">kind:</span> Pod       <span class="meta">#Pod</span></span><br><span class="line"><span class="symbol">metadata:</span>       <span class="meta">#元数据</span></span><br><span class="line"><span class="symbol">  name:</span> string       <span class="meta">#Pod名称</span></span><br><span class="line"><span class="symbol">  namespace:</span> string    <span class="meta">#Pod所属的命名空间</span></span><br><span class="line"><span class="symbol">  labels:</span>      <span class="meta">#自定义标签</span></span><br><span class="line">    - name: string     <span class="meta">#自定义标签名字</span></span><br><span class="line"><span class="symbol">  annotations:</span>       <span class="meta">#自定义注释列表</span></span><br><span class="line">    - name: string</span><br><span class="line"><span class="symbol">spec:</span>         <span class="meta">#Pod中容器的详细定义</span></span><br><span class="line"><span class="symbol">  containers:</span>      <span class="meta">#Pod中容器列表</span></span><br><span class="line">  - name: string     <span class="meta">#容器名称</span></span><br><span class="line"><span class="symbol">    image:</span> string    <span class="meta">#容器的镜像名称</span></span><br><span class="line"><span class="symbol">    imagePullPolicy:</span> [Always | Never | IfNotPresent] <span class="meta">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line"><span class="symbol">    command:</span> [string]    <span class="meta">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line"><span class="symbol">    args:</span> [string]     <span class="meta">#容器的启动命令参数列表</span></span><br><span class="line"><span class="symbol">    workingDir:</span> string     <span class="meta">#容器的工作目录</span></span><br><span class="line"><span class="symbol">    volumeMounts:</span>    <span class="meta">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    - name: string     <span class="meta">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line"><span class="symbol">      mountPath:</span> string    <span class="meta">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line"><span class="symbol">      readOnly:</span> boolean    <span class="meta">#是否为只读模式</span></span><br><span class="line"><span class="symbol">    ports:</span>       <span class="meta">#需要暴露的端口库号列表</span></span><br><span class="line">    - name: string     <span class="meta">#端口号名称</span></span><br><span class="line"><span class="symbol">      containerPort:</span> int   <span class="meta">#容器需要监听的端口号</span></span><br><span class="line"><span class="symbol">      hostPort:</span> int    <span class="meta">#容器所在主机需要监听的端口号，默认与Container相同</span></span><br><span class="line"><span class="symbol">      protocol:</span> string     <span class="meta">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line"><span class="symbol">    env:</span>       <span class="meta">#容器运行前需设置的环境变量列表</span></span><br><span class="line">    - name: string     <span class="meta">#环境变量名称</span></span><br><span class="line"><span class="symbol">      value:</span> string    <span class="meta">#环境变量的值</span></span><br><span class="line"><span class="symbol">    resources:</span>       <span class="meta">#资源限制和请求的设置</span></span><br><span class="line"><span class="symbol">      limits:</span>      <span class="meta">#资源限制的设置</span></span><br><span class="line"><span class="symbol">        cpu:</span> string    <span class="meta">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line"><span class="symbol">        memory:</span> string     <span class="meta">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line"><span class="symbol">      requests:</span>      <span class="meta">#资源请求的设置</span></span><br><span class="line"><span class="symbol">        cpu:</span> string    <span class="meta">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line"><span class="symbol">        memory:</span> string     <span class="meta">#内存请求，容器启动的初始可用数量</span></span><br><span class="line"><span class="symbol">    livenessProbe:</span>     <span class="meta">#对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可</span></span><br><span class="line"><span class="symbol">      exec:</span>      <span class="meta">#对Pod容器内检查方式设置为exec方式</span></span><br><span class="line"><span class="symbol">        command:</span> [string]  <span class="meta">#exec方式需要制定的命令或脚本</span></span><br><span class="line"><span class="symbol">      httpGet:</span>       <span class="meta">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span></span><br><span class="line"><span class="symbol">        path:</span> string</span><br><span class="line"><span class="symbol">        port:</span> number</span><br><span class="line"><span class="symbol">        host:</span> string</span><br><span class="line"><span class="symbol">        scheme:</span> string</span><br><span class="line"><span class="symbol">        HttpHeaders:</span></span><br><span class="line">        - name: string</span><br><span class="line"><span class="symbol">          value:</span> string</span><br><span class="line"><span class="symbol">      tcpSocket:</span>     <span class="meta">#对Pod内个容器健康检查方式设置为tcpSocket方式</span></span><br><span class="line"><span class="symbol">         port:</span> number</span><br><span class="line"><span class="symbol">       initialDelaySeconds:</span> <span class="number">0</span>  <span class="meta">#容器启动完成后首次探测的时间，单位为秒</span></span><br><span class="line"><span class="symbol">       timeoutSeconds:</span> <span class="number">0</span>   <span class="meta">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span></span><br><span class="line"><span class="symbol">       periodSeconds:</span> <span class="number">0</span>    <span class="meta">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span></span><br><span class="line"><span class="symbol">       successThreshold:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">       failureThreshold:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">       securityContext:</span></span><br><span class="line"><span class="symbol">         privileged:</span>false</span><br><span class="line"><span class="symbol">    restartPolicy:</span> [Always | Never | OnFailure]<span class="meta">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line"><span class="symbol">    nodeSelector:</span> obeject  <span class="meta">#设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定</span></span><br><span class="line"><span class="symbol">    imagePullSecrets:</span>    <span class="meta">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    - name: string</span><br><span class="line"><span class="symbol">    hostNetwork:</span>false      <span class="meta">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line"><span class="symbol">    volumes:</span>       <span class="meta">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    - name: string     <span class="meta">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line"><span class="symbol">      emptyDir:</span> &#123;&#125;     <span class="meta">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line"><span class="symbol">      hostPath:</span> string     <span class="meta">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line"><span class="symbol">        path:</span> string     <span class="meta">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line"><span class="symbol">      secret:</span>      <span class="meta">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line"><span class="symbol">        scretname:</span> string  </span><br><span class="line"><span class="symbol">        items:</span>     </span><br><span class="line">        - key: string</span><br><span class="line"><span class="symbol">          path:</span> string</span><br><span class="line"><span class="symbol">      configMap:</span>     <span class="meta">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line"><span class="symbol">        name:</span> string</span><br><span class="line"><span class="symbol">        items:</span></span><br><span class="line">        - key: string</span><br><span class="line"><span class="symbol">          path:</span> string</span><br></pre></td></tr></table></figure><p>其中比较值得说明有这么几个点</p><ol><li>k8s中的apiVersion版本,可以使用命令kubectl api-versions查看，这里列举三个常见的</li></ol><ul><li>alpha：开发版，可能包含错误，随时可能会丢弃对该功能的支持</li><li>beta：测试版，软件经过很好的测试，启用功能被认为是安全的，细节可能会改变，但功能在后续版本不会被删除</li><li>stable：稳定版，将出现在后续发布的软件版本中</li></ul><ol start="2"><li>harbor默认是https协议的，如果想要通过http协议拉取harbor的镜像需要修改k8s每个节点上的/etc/docker/daemon.json文件</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"insecure-registries"</span>:[<span class="string">"http://your-harbor-url"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启docker</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl dadmon-reload</span> </span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h5><span id="deployment">Deployment</span></h5><ul><li>定义Deployment来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><p>一个Deployment的yaml文件（限于篇幅，很多内容已省略）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span>   </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span>                 </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">string</span>               <span class="comment">#Deployment名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span> <span class="comment">#目标副本数量</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span>  </span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">1</span>      <span class="comment">#滚动升级时最大同时升级1个pod</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span> <span class="comment">#滚动升级时最大允许不可用的pod个数</span></span><br><span class="line"><span class="attr">  template:</span>         </span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">string</span>  <span class="comment">#模板名称</span></span><br><span class="line"><span class="attr">    sepc:</span> <span class="comment">#定义容器模板，该模板可以包含多个容器</span></span><br><span class="line"><span class="attr">      containers:</span>                                                                   </span><br><span class="line"><span class="attr">        - name:</span> <span class="string">string</span>                                                           </span><br><span class="line"><span class="attr">          image:</span> <span class="string">string</span> </span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">8080</span> <span class="comment">#对service暴露端口</span></span><br></pre></td></tr></table></figure><p>k8s如何滚动升级和回滚应用</p><p>进行滚动升级的时候先在yaml文件中更新镜像的版本，然后根据设置需求设置maxSurge、和maxUnavailable的值即可完成</p><p>k8s如何完成扩容和缩容</p><p>修改replicas的值后重新发布即可</p><h5><span id="service">Service</span></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">matadata:</span>                                <span class="comment">#元数据</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">string</span>                           <span class="comment">#service的名称</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">string</span>                      <span class="comment">#命名空间  </span></span><br><span class="line"><span class="attr">  labels:</span>                                <span class="comment">#自定义标签属性列表</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  annotations:</span>                           <span class="comment">#自定义注解属性列表  </span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">spec:</span>                                    <span class="comment">#详细描述</span></span><br><span class="line"><span class="attr">  selector:</span> <span class="string">[]</span>                           <span class="comment">#label selector配置，将选择具有label标签的Pod作为管理 范围</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span>                           <span class="comment">#service的类型，指定service的访问方式，默认为clusterIp</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">string</span>                      <span class="comment">#虚拟服务地址      </span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">string</span>                <span class="comment">#是否支持session</span></span><br><span class="line"><span class="attr">  ports:</span>                                 <span class="comment">#service需要暴露的端口列表</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">string</span>                         <span class="comment">#端口名称</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">string</span>                     <span class="comment">#端口协议，支持TCP和UDP，默认TCP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="string">int</span>                            <span class="comment">#服务监听的端口号</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">int</span>                      <span class="comment">#需要转发到后端Pod的端口号</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="string">int</span>                        <span class="comment">#当type = NodePort时，指定映射到物理机的端口号</span></span><br><span class="line"><span class="attr">  status:</span>                                <span class="comment">#当spce.type=LoadBalancer时，设置外部负载均衡器的地址</span></span><br><span class="line"><span class="attr">    loadBalancer:</span>                        <span class="comment">#外部负载均衡器    </span></span><br><span class="line"><span class="attr">      ingress:</span>                           <span class="comment">#外部负载均衡器 </span></span><br><span class="line"><span class="attr">        ip:</span> <span class="string">string</span>                       <span class="comment">#外部负载均衡器的Ip地址值</span></span><br><span class="line"><span class="attr">        hostname:</span> <span class="string">string</span>                 <span class="comment">#外部负载均衡器的主机名</span></span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器，到底是什么东西？</title>
      <link href="/2019/07/07/%E5%99%A8%EF%BC%8C%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%EF%BC%9F/"/>
      <url>/2019/07/07/%E5%99%A8%EF%BC%8C%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>通俗的来说容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬来搬去。不过，这两个能力说起来简单，但要用技术手段去实现它们，确并不是很容易。所以，本篇文章就来剖析一下容器的实现方式</p><p>我们知道一个程序被执行起来之后，它就会从磁盘上的二进制文件，变成了计算机内存中的数据、寄存器里的值、堆栈中的指令、被打开的文件，以及各种设备的状态信息的一个集合也就是一个进程</p><p>所以，对于进程来说，它的静态表现就是程序，平常都安安静静地待在磁盘上；而一旦运行起来，它就变成了计算机里的数据和状态的总和，这就是它的动态表现。<br>而容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界”。正是因为这个边界才会让容器里面的程序看不到宿主机上其他的程序从而给程序一种它就是在一个独立的操作系统上的假象</p><p>对于 Docker 等大多数 Linux 容器来说，Cgroups和Namespace 技术就是它们实现的关键</p><p>接下来的内容是以你已经初步了解docker的使用为基础的</p><h5><span id="namespace">Namespace</span></h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> holloword /bin/sh</span><br></pre></td></tr></table></figure><p>我们知道使用如上命令就可以直接启动一个holloword容器<br>如果这个时候我们在容器里执行一下 ps 指令，就会发现一些比较有趣的事情：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PID <span class="built_in"> USER </span>  TIME COMMANDine  </span><br><span class="line">1 root   0:00 /bin/sh </span><br><span class="line">10 root   0:00 ps</span><br></pre></td></tr></table></figure><p>可以看到，我们在 Docker 里最开始执行的 /bin/sh，就是这个容器内部的第 1 号进程（PID=1），而这个容器里一共只有两个进程在运行。这就意味着，<br>前面执行的 /bin/sh，以及我们刚刚执行的 ps，已经被 Docker 隔离在了一个跟宿主机完全不同的世界当中</p><p>本来，每当我们在宿主机上运行了一个 /bin/sh 程序，操作系统都会给它分配一个进程编号，比如 PID=100。这个编号是进程的唯一标识，就像员工的工牌一样。所以 PID=100，可以粗略地理解为这个 /bin/sh 是我们公司里的第 100 号员工，而第 1 号员工就自然是比尔 · 盖茨这样统领全局的人物</p><p>而现在，我们要通过 Docker 把这个 /bin/sh 程序运行在一个容器当中。这时候，Docker 就会在这个第 100 号员工入职时给他施一个“障眼法”，让他永远看不到前面的其他 99 个员工，更看不到比尔 · 盖茨。这样，他就会错误地以为自己就是公司里的第 1 号员工</p><p>这种机制，其实就是对被隔离应用的进程空间做了手脚，使得这些进程只能看到重新计算过的进程编号，比如 PID=1。可实际上，他们在宿主机的操作系统里，还是原来的第 100 号进程</p><p>这种技术，就是 Linux 里面的 Namespace 机制。而 Namespace 的使用方式也非常有意思：它其实只是 Linux 创建新进程的一个可选参数。我们知道，<br>在 Linux 系统中创建线程的系统调用是 clone()，比如：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = <span class="keyword">clone</span>(main_function, stack_size, SIGCHLD, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>这个系统调用就会为我们创建一个新的进程，并且返回它的进程号 pid。<br>而当我们用 clone() 系统调用创建一个新进程时，就可以在参数中指定 CLONE_NEWPID 参数，比如：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = clone(main_function, stack_size, <span class="built_in">CLONE_NEWPID</span> | SIGCHLD, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>这时，新创建的这个进程将会“看到”一个全新的进程空间，在这个进程空间里，它的 PID 是 1。之所以说“看到”，是因为这只是一个“障眼法”，<br>在宿主机真实的进程空间里，这个进程的 PID 还是真实的数值，比如 100。<br>当然，我们还可以多次执行上面的 clone() 调用，这样就会创建多个 PID Namespace，而每个 Namespace 里的应用进程，都会认为自己是当前容器里的<br>第 1 号进程，它们既看不到宿主机里真正的进程空间，也看不到其他 PID Namespace 里的具体情况</p><p>而除了我们刚刚用到的 PID Namespace，<br>Linux 操作系统还提供了 Mount、UTS、IPC、Network 和 User 这些 Namespace，用来对各种不同的进程上下文进行“障眼法”操作</p><p>比如:</p><ul><li>Mount Namespace，用于让被隔离进程只看到当前 Namespace 里的挂载点信息；</li><li>Network Namespace，用于让被隔离进程看到当前 Namespace 里的网络设备和配置。<br>这，就是 Linux 容器实现的第一个机制了</li></ul><p>所以，Docker 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 Namespace 参数。这样，容器就只能“看”到当前 Namespace 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了</p><p>说到这里，其实你就明白了，跟真实存在的虚拟机不同，在使用 Docker 的时候，并没有一个真正的“Docker 容器”运行在宿主机里面。Docker 项目帮助用户启动的，还是原来的应用进程，只不过在创建这些进程时，Docker 为它们加上了各种各样的 Namespace 参数。</p><p>这时，这些进程就会觉得自己是各自 PID Namespace 里的第 1 号进程，只能看到各自 Mount Namespace 里挂载的目录和文件，只能访问到各自 Network Namespace 里的网络设备，就仿佛运行在一个个“容器”里面，与世隔绝</p><h5><span id="cgroups">Cgroups</span></h5><p>实际上只是使用Namespace隔离了进程还不能称之为容器，例如：</p><p>虽然容器内的第 1 号进程在“障眼法”的干扰下只能看到容器里的情况，但是宿主机上，它作为第 100 号进程与其他所有进程之间依然是平等的竞争关系。<br>这就意味着，虽然第 100 号进程表面上被隔离了起来，<br>但是它所能够使用到的资源（比如 CPU、内存），却是可以随时被宿主机上的其他进程（或者其他容器）占用的。<br>当然，这个 100 号进程自己也可能把所有资源吃光。这些情况，显然都不是一个“沙盒”应该表现出来的合理行为。</p><p>而Linux Cgroups 就是 Linux 内核中用来为进程设置资源限制的一个重要功能它最主要的作用是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽以及对进程进行优先级设置、审计，以及将进程挂起和恢复等操作</p><p>除 CPU 子系统外，Cgroups 的每一项子系统都有其独有的资源限制能力，比如：</p><ul><li>blkio，为块设备设定I/O 限制，一般用于磁盘等设备</li><li>cpuset，为进程分配单独的 CPU 核和对应的内存节点</li><li>memory，为进程设定内存使用的限制</li></ul><p>Linux Cgroups 的设计还是比较易用的，简单粗暴地理解呢，它就是一个子系统目录加上一组资源限制文件的组合。<br>而对于 Docker 等 Linux 容器项目来说，它们只需要在每个子系统下面，为每个容器创建一个控制组（即创建一个新目录），然后在启动容器进程之后，把这个进程的 PID 填写到对应控制组的 tasks 文件中就可以了。<br>而至于在这些控制组下面的资源文件里填上什么值，就靠用户执行 docker run 时的参数指定了，比如这样一条命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it <span class="attribute">--cpu-period</span>=100000 <span class="attribute">--cpu-quota</span>=20000 ubuntu /bin/sh</span><br></pre></td></tr></table></figure><p>在启动这个容器后，我们可以通过查看 Cgroups 文件系统下，CPU 子系统中，“docker”这个控制组里的资源限制文件的内容来确认：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="meta-keyword">/sys/</span>fs<span class="meta-keyword">/cgroup/</span>cpu<span class="meta-keyword">/docker/</span><span class="number">5</span>d5c9f67d/cpu.cfs_period_us </span><br><span class="line"><span class="number">100000</span></span><br><span class="line">$ cat <span class="meta-keyword">/sys/</span>fs<span class="meta-keyword">/cgroup/</span>cpu<span class="meta-keyword">/docker/</span><span class="number">5</span>d5c9f67d/cpu.cfs_quota_us </span><br><span class="line"><span class="number">20000</span></span><br></pre></td></tr></table></figure><p>这就意味着这个 Docker 容器，只能使用到 20% 的 CPU 带宽。</p><p>一个正在运行的 Docker 容器，其实就是一个启用了多个 Linux Namespace 的应用进程，而这个进程能够使用的资源量，则受 Cgroups 配置的限制。</p><p>这也是容器技术中一个非常重要的概念，即：容器是一个“单进程”模型</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes是什么东西？</title>
      <link href="/2019/07/07/ubernetes%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%EF%BC%9F/"/>
      <url>/2019/07/07/ubernetes%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes一词来源于希腊语，翻译来的意思就是舵手或者船长的意思，而它的logo也是很符合这个词的<br><img src="/2019/07/07/ubernetes是什么东西？/1.png" alt="1"><br>至于k8s则是通过将ubernetes这8个字母替换为8而导出的缩写</p><h4><span id="kubernetes是什么">Kubernetes是什么？</span></h4><p>k8s是Google开源的容器集群管理系统（思想来源于谷歌内部系统Borg）。在Docker技术的基础上，为容器化的应用提供以下一系列功能来提高大规模容器集群管理的便捷性：</p><ul><li>服务发现</li><li>负载均衡</li><li>自动发布与回滚</li><li>资源调度</li><li>弹性伸缩</li><li>自动恢复</li><li>健康检查</li><li>。。。</li></ul><p>现在的k8s托管于CNCF基金会，也是CNCF的第一个项目。下面是CNCF的全景图<br><img src="/2019/07/07/ubernetes是什么东西？/2.png" alt="2"></p><h4><span id="kubernetes的架构组成">Kubernetes的架构组成</span></h4><p><img src="/2019/07/07/ubernetes是什么东西？/3.png" alt="2"></p><p>k8s由 Master 和 Node 两种节点组成，而这两种角色分别对应着控制节点和计算节点<br>其中最上方是UI和CLI代表了两种操控k8s的方式，即dashboar和命令行方式</p><p>Master节点是集群中的控制节点，它是由以下几个独立组件组合而成的：<br><img src="/2019/07/07/ubernetes是什么东西？/4.png" alt="2"></p><ul><li>负责 API 服务的 kube-apiserver<ul><li>提供集群管理的 REST API 接口，包括认证授权、数据校验以及集群状态变更</li><li>提供其他模块之间的数据交互和通信的枢纽（其他模块通过 API Server 查询或修改数据</li></ul></li><li>负责调度的 kube-scheduler<ul><li>负责分配调度 Pod 到集群内的节点上，它监听 kube-apiserver，查询还未分配 Node 的 Pod，然后根据调度策略为这些 Pod 分配节点</li><li>调度器需要充分考虑诸多的因素：<ul><li>公平调度</li><li>资源高效利用</li><li>QoS</li><li>affinity 和 anti-affinity</li><li>数据本地化</li><li>内部负载干扰</li><li>deadlines</li></ul></li></ul></li><li>负责容器编排的 kube-controller-manager<ul><li>由 kube-controller-manager 和 cloud-controller-manager 组成，是 Kubernetes 的大脑，它通过 apiserver 监控整个集群的状态，并确保集群处于预期的工作状态</li></ul></li><li>整个集群的持久化数据，则由 kube-apiserver 处理后保存在 Etcd中</li><li>分布式存储Etcd<ul><li>分布式 key-value 存储，可用于服务发现、共享配置以及一致性保障</li></ul></li></ul><p>计算节点上是运行所有业务容器的节点<br><img src="/2019/07/07/ubernetes是什么东西？/5.png" alt="2"></p><ul><li>在 Kubernetes 项目中，每个节点上都运行一个 kubelet 服务进程，默认监听 10250 端口，接收并执行 master 发来的指令，管理 Pod 及 Pod 中的容器。每个 kubelet 进程会在 API Server 上注册节点自身信息，定期向 master 节点汇报节点的资源使用情况，并通过 cAdvisor 监控节点和容器的资源</li><li>每台机器上都运行一个 kube-proxy 服务，它监听 API server 中 service 和 endpoint 的变化情况，并通过 iptables 等来为服务配置负载均衡</li></ul><p>除了主节点和计算节点还有一些组件是全局通用的</p><ul><li>负责整个集群dns服务的CoreDNS</li><li>提供跨 Region 跨服务商 K8s 集群服务的集群联邦（Federation）</li><li>Kubernetes 的命令行工具（CLI）kubectl</li></ul><h4><span id="kubernetes的组件通信">Kubernetes的组件通信</span></h4><p>以用户需要操作一个pod为例：<br><img src="/2019/07/07/ubernetes是什么东西？/6.png" alt="2"></p><ol><li>当用户在k8s的ui界面或者是通过命令行与APIServer交互</li><li>APIServer首先会把用户的命令存储到etcd中</li><li>调度器kube-scheduler会通过watch机制从APIServer获取到需要调度一个pod的信息</li><li>kube-scheduler得到信息后根据自身的内存状态进行一次决策，然后再通知到APIServer</li><li>APIServer得到kube-scheduler的通知同样先把命令存储到etcd中</li><li>相应节点的kubelet通过watch机制得知需要操作的pod去调用相应的存储插件、网络插件来操作响应的pod</li></ol><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ高级面试题</title>
      <link href="/2019/07/07/abbitMQ%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/07/07/abbitMQ%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：投递失败的消息怎么处理、如何实现延时队列、如何指定消息的优先级、消息的持久化是如何实现的、如何保证消息不丢失</p></blockquote><h5><span id="投递失败的消息怎么处理">投递失败的消息怎么处理</span></h5><p>首先投递失败存在如下两个情况</p><ul><li>当交换器无法根据自身的类型和路由键找到符合条件的队列</li><li>如果交换器在将消息路由到队列时发现队列上并不存在任何消费者<br>解决方案：<br>在生产者投递消息时指定mandatory或者imrnediate参数设为 true 时，RabbitMQ 会把无法投递的消息通过Basic.Return 命令将消息返回给生产者，此时生产者需要调用channel.addReturnListener 来添加 ReturnListener 监昕器实现监听投递失败的消息</li></ul><p>如果设置了上方两个参数就要添加ReturnListener 逻辑，使生产者的逻辑变得复杂，RabbitMQ中的备份交换机也可以处理这个问题<br>以通过在声明交换器(调用 channel.exchangeDeclare 方法)的时候添加alternate-exchange 参数来实现<br>对于备份交换器，使用时包含几种特殊情况:<br>如果设置的备份交换器不存在，客户端和 RabbitMQ 服务端都不会有异常出现，此时消息会丢失<br>如果备份交换器没有绑定任何队列，客户端和 RabbitMQ 服务端都不会有异常出现，此时消息会丢失<br>如果备份交换器没有任何匹配的队列，客户端和 RabbitMQ 服务端都不会有异常出现，此时消息会丢失<br>如果备份交换器和 mandatory 参数一起使用，那么 mandatory 参数无效</p><h5><span id="如何设置消息的过期时间">如何设置消息的过期时间</span></h5><p>设置队列属性，队列中所有消息都有相同的过期时间<br>对消息本身进行单独设置，每条消息的 TTL 可以不同<br>如果两种方法一起使用，则消息的 TTL 以两者之间较小的那个数值为准</p><h5><span id="如何实现延时队列">如何实现延时队列</span></h5><ul><li>使用死信交换机<br>消息投递到一个没有消费者的队列中，为这个队列指定死信队列，当消息达到设置过期时间还没有被消费时将会被发布到死信队列中，而消费者订阅死信队列直接消费到了一份延时消息</li></ul><p>延时消息插件<br>从以下地址下载延时插件rabbitmq_delayed_message_exchange</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//www.rabbitmq.com/community-plugins.html</span></span><br></pre></td></tr></table></figure><p>把下载好的插件放到以下目录</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/<span class="title">lib</span>/<span class="title">rabbitmq_server3</span>.6.4/<span class="title">plugins</span></span></span><br></pre></td></tr></table></figure><p>启动插件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>声明交换器类型为x-delayed-message来标示此交换机为延时交换机<br>发送消息时在header中添加”x-delay”参数来控制消息的延时时间</p><h5><span id="如何指定消息的优先级">如何指定消息的优先级</span></h5><p>设置队列的 max priority 参数，RabbitMQ中消息的优先级默认是0，最大值是10</p><h5><span id="消息的持久化是如何实现的">消息的持久化是如何实现的</span></h5><p>RabbitMQ的持久化分为:交换器的持久化、队列的持久化和消息的持久化</p><h5><span id="交换器和队列的持久化都是通过在声明时将-durable-参数置为-true-实现的">交换器和队列的持久化都是通过在声明时将 durable 参数置为 true 实现的</span></h5><p>消息的持久化是在发送消息指定deliveryMode为2实现的</p><h5><span id="如何保证消息不丢失">如何保证消息不丢失</span></h5><p>生产者开启事务或者发送方确认机制，交换机、队列和消息全部设置持久化，消费者开启消费确认机制</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ如何实现高可用</title>
      <link href="/2019/07/07/abbitMQ%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2019/07/07/abbitMQ%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ一共具有三种模式：单机、普通集群、镜像集群</p><h4><span id="单机模式">单机模式</span></h4><p>单机模式，就是我们平常玩的demo，生产上肯定不能用。具体安装部署过程可以参考我的这篇文章：<a href="">CentsOS原生RabbitMQ安装过程</a></p><h4><span id="普通集群">普通集群</span></h4><p>普通集群就是在多台机器上启动多个实例。每个队列只会存在其中的一个实例上，然后所有实例同步这些队列的元数据。消费者在进行消费的时候，如果连接的实例上恰好不是队列所在的实例，就会根据队列的元数据去队列所在实例上拉取数据</p><p>由此可知，集群模式并没做到分布式，如果队列所在的实例宕机了，会导致接下来其他实例就无法从那个实例拉取消息</p><p>所以集群主要是提高吞吐量的</p><p>关于集群模式的安装部署过程可以参考我的这篇文章：RabbitMQ集群安装</p><h4><span id="镜像集群">镜像集群</span></h4><p>跟普通集群模式不一样的是，在镜像集群模式下，无论队列中的元数据还是消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 队列的一个完整镜像。然后每次写消息到队列的时候，都会自动把消息同步到多个实例上</p><p>如何开启镜像集群</p><p>首先镜像集群是在普通集群的基础上的，所以你要先搭建一个普通集群，然后在随意一个实例上执行如下命令创建一个策略即可开启<br>rabbitmqctl set_policy -p vhostName name  “^xxqueue” '{“ha-mode”:“all”}'<br>name是策略的名字</p><p>xxqueue是需要匹配的队列名称，如果要匹配所有的话使用^</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/rDqhdBk879neFM_CZzK9Yw" target="_blank" rel="noopener">RabbitMQ系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令速查-系统监控</title>
      <link href="/2019/07/07/inux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2019/07/07/inux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Linux中进程管理命令：ps、pstree、grep、vmstat、进程树及进程搜索，查看系统负载命令uptime，查看内存信息free命令，常用工具top命令，磁盘监控df、du命令</p></blockquote><p>◆</p><p>进程管理</p><p>◆</p><p>查看进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ps</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-A 列出所有的行程</li><li>-u 指定用户的进程</li><li>-ef 所有进程以及启动命令</li><li>-aux 显示所有包含其他使用者的行程</li></ul><p>查看进程树</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pstree</span></span><br></pre></td></tr></table></figure><p>搜索进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> 线程名称</span><br></pre></td></tr></table></figure><p>◆</p><p>查看系统负载</p><p>◆</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@master1 ~]</span># <span class="selector-tag">uptime</span></span><br><span class="line"></span><br><span class="line"> 21<span class="selector-pseudo">:50</span><span class="selector-pseudo">:25</span> <span class="selector-tag">up</span> 225 <span class="selector-tag">days</span>,  3<span class="selector-pseudo">:24</span>,  3 <span class="selector-tag">user</span>,  <span class="selector-tag">load</span> <span class="selector-tag">average</span>: 1<span class="selector-class">.26</span>, 2<span class="selector-class">.05</span>, 2<span class="selector-class">.23</span></span><br></pre></td></tr></table></figure><p>上述结果意义：</p><ul><li>当前时间 21:50:25</li><li>系统运行时间 up 225 days, 3:24</li><li>当前在线用户 3</li><li>最近1分钟负载1.26、 5分钟负载2.0515分钟系统的负载</li></ul><p>◆</p><p>查看内存信息</p><p>◆</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-b 以字节为单位</li><li>-m 以MB为单位</li><li>-g 以GB为单位</li><li>-h 易读格式</li><li>-o 不显示-/+buffers/cache行</li><li>-t 显示RAM + swap的总和</li><li>-s n 刷新间隔为n秒</li><li>-c n 刷新n次后即退出</li></ul><p>查看具体线程的内存信息</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_5_centos ~]# cat /proc/pid/maps</span><br><span class="line"></span><br><span class="line"><span class="number">560d</span>d<span class="number">2550000</span>-<span class="number">560d</span>d<span class="number">2646000</span> r-xp <span class="number">00000000</span> fd:<span class="number">01 287702</span>                     /usr/sbin/nginx</span><br><span class="line"><span class="number">560d</span>d<span class="number">2846000</span>-<span class="number">560d</span>d<span class="number">2848000</span> r--p <span class="number">000f6000</span> fd:<span class="number">01 287702</span>                     /usr/sbin/nginx</span><br><span class="line"><span class="number">560d</span>d<span class="number">2848000</span>-<span class="number">560d</span>d<span class="number">2861000</span> rw-p <span class="number">000f8000</span> fd:<span class="number">01 287702</span>                     /usr/sbin/nginx</span><br></pre></td></tr></table></figure><p>上述结果意义：</p><ul><li>地址：库在进程里地址范围</li><li>权限：虚拟内存的权限，r=读，w=写,x=,s=共享,p=私有</li><li>偏移量：库在进程里地址范围</li><li>设备：映像文件的主设备号和次设备号</li><li>节点：映像文件的节点号</li><li>路径: 映像文件的路径</li></ul><p>◆</p><p>Top命令</p><p>◆</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">top</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/07/inux常用命令速查-系统管理/1.png" alt="1"></p><p>上述结果意义：</p><ul><li><p>第一行的意义与uptime相似</p></li><li><p>第二行表示进程的相关信息：系统现在共有198个进程，其中处于运行中的有2个，196个在休眠，停止状态的有0个，僵尸状态的0个</p></li><li><p>第三行表示CPU相关信息：us： 运行用户进程的CPU时间，sy: 运行内核进程的CPU时间，ni：运行已调整优先级的用户进程的CPU时间，wa: 用于等待IO完成的CPU时间，hi：处理硬件中断的CPU时间，si: 处理软件中断的CPU时间，st：hypervisor使用的CPU时间</p></li><li><p>第四行表示物理内存的相关信息：可参考free命令</p></li><li><p>第五行表示虚拟内存的相关信息</p></li><li><p>接下来是各进程状态:</p><ul><li>PID：进程ID</li><li>USER：进程所有者的实际用户名</li><li>PR：进程的调度优先级</li><li>NI：进程的（优先级）</li><li>VIRT：进程使用的虚拟内存</li><li>RES：未被换出的物理内存大小</li><li>SHR：SHR是进程使用的共享内存。共享内存大小，单位kb</li><li>S：进程的状态</li><li>%CPU：自从上一次更新时到现在任务所使用的CPU时间百分比</li><li>MEM：进程使用的可用物理内存百分比</li><li>TIME+：任务启动后到现在所使用的全部CPU时间，精确到百分之一秒</li><li>COMMAND：运行进程所使用的命令</li></ul></li></ul><p>常用参数：</p><ul><li>d：指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</li><li>p:通过指定监控进程ID来仅仅监控某个进程的状态。</li><li>q:该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。</li><li>S：指定累计模式。</li><li>s：使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</li><li>i：使top不显示任何闲置或者僵死进程。</li><li>c:显示整个命令行而不只是显示命令名。</li></ul><p>常用命令介绍：</p><ul><li>Ctrl+L：擦除并且重写屏幕</li><li>K：终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。</li><li>i：忽略闲置和僵死进程。这是一个开关式命令。</li><li>q：退出程序</li><li>r:重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。</li><li>S：切换到累计模式。</li><li>s：改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。</li><li>f或者F：从当前显示中添加或者删除项目。</li><li>o或者O：改变显示项目的顺序</li><li>l：切换显示平均负载和启动时间信息。</li><li>m:切换显示内存信息。</li><li>t:切换显示进程和CPU状态信息。</li><li>c:切换显示命令名称和完整命令行。</li><li>M:根据驻留内存大小进行排序。</li><li>P:根据CPU使用百分比大小进行排序。</li><li>T:根据时间/累计时间进行排序。</li><li>W:将当前设置写入~/.toprc文件中。</li></ul><p>◆</p><p>vmstat命令</p><p>◆</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vmstat</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/07/inux常用命令速查-系统管理/2.png" alt="2"></p><p>上述结果意义：</p><ul><li>r：等待运行的进程个数</li><li>b：IO阻塞队列长度</li><li>swpd：交换内存使用</li><li>ree：空闲物理内存量</li><li>buff：用于buffer的内存总量</li><li>cache：用于cache的内存总量</li><li>si：数据进入swap中的速率(kb/s)</li><li>so：数据离开swap的速率(kb/s)</li><li>bi：从块设备读入数据到系统的速率</li><li>bo：保存数据至块设备的速率</li><li>in：interrupts 中断速率，每秒被中断的次数</li><li>cs：context switch 进程切换的速率</li><li>us：user space 用户运行程序占用CPU百分比</li><li>sy：system(kernel space)用于运行内核占用CPU的百分比</li><li>id：idle空闲CPU百分比</li><li>wa：wait io等待I/O花费时间</li><li>st：stolen，被虚拟机偷走的百分比</li></ul><p>常用参数：</p><ul><li>-s：显示内存统计数据</li><li>-S  k, K, m or M 指定单位</li><li>x y：每隔x秒刷新y次</li></ul><p>◆</p><p>查看磁盘使用情况</p><p>◆</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df</span><br><span class="line"></span><br><span class="line">Filesystem     <span class="number">1</span>K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/vda1       <span class="number">51473888</span> <span class="number">1930336</span>  <span class="number">46905804</span>   <span class="number">4</span>% /</span><br><span class="line">devtmpfs          <span class="number">497168</span>       <span class="number">0</span>    <span class="number">497168</span>   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs             <span class="number">507780</span>      <span class="number">24</span>    <span class="number">507756</span>   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs             <span class="number">507780</span>     <span class="number">448</span>    <span class="number">507332</span>   <span class="number">1</span>% /run</span><br><span class="line">tmpfs             <span class="number">507780</span>       <span class="number">0</span>    <span class="number">507780</span>   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs             <span class="number">101560</span>       <span class="number">0</span>    <span class="number">101560</span>   <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-a：显示所有的文件系统，包括虚拟文件系统</li><li>-h：以人们易读的GB、MB、KB等格式</li></ul><p>◆</p><p>查看具体目录磁盘占用</p><p>◆</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">du</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>  ./<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"><span class="number">4</span>  ./games</span><br><span class="line"><span class="number">4</span>  ./src</span><br><span class="line"><span class="number">4</span>  ./libexec</span><br><span class="line"><span class="number">4</span>  ./bin</span><br><span class="line"><span class="number">4</span>  ./etc</span><br><span class="line"><span class="number">24</span>  .</span><br></pre></td></tr></table></figure><p>上述结果意义:</p><ul><li>左侧数字4是代表右侧子目录的大小</li><li>最下面24代表当前目录的大小</li></ul><p>常用参数：</p><ul><li>-a  显示目录中个别文件的大小</li><li>-k  以KB(1024bytes)为单位输出</li><li>-m  以MB为单位输出</li><li>-h   以K，M，G为单位，提高信息的可读性。</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息传递流程</title>
      <link href="/2019/06/24/RabbitMQ%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/06/24/RabbitMQ%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5><span id="两个新名词">两个新名词</span></h5><p>本篇文章以上篇文章《<a href="">Rabbit的基础概念</a>》为基础，且在上篇文章的前提下又引入了两个新的概念：</p><h6><span id="连接-connection">连接( Connection)</span></h6><p>我们知道绝大部分的通信都是基于网络协议的，其中TCP协议就是广为人知的一种协议，在RabbitMQ中，生产者和消费者与RabbitMQ的通信就是基于TCP连接的。不过呢我们知道TCP连接的创建和销毁在高并发场景下对于操作系统来说都是特别昂贵的开销，所以RabbitMQ又引入了信道的概念</p><h6><span id="信道channel">信道（Channel）</span></h6><p>信道是一个类似于NIO（一种TCP多路复用技术）的技术<br>在RabbitMQ中每个生产者、消费者线程各把持一个信道，多个信道复用了同一个TCP 连接。当每个信道的流量不是很大时，复用单连接可以在产生性能瓶颈的情况下有效地节 TCP 连接资源。当信道本身的流量很大时，就会开辟多连接，将这些信道均摊到这些连接中</p><h5><span id="消息流转过程">消息流转过程</span></h5><p>还是先看一下上篇文章的那副图<br><img src="/2019/06/24/RabbitMQ消息传递流程/1.jpg" alt="1"></p><h6><span id="生产者消息投递过程">生产者消息投递过程</span></h6><ol><li>生产者连接到Broker 建立一个连接，然后开启一个信道</li><li>接着生产者声明一个交换器 ，并设置相关属性，比如交换机类型、是否持久化、是否自动删除、是否内置等</li><li>生产者声明一个队列井设置相关属性，比如是否排他、是否持久化、是否自动删除、消息最大过期时间、消息最大长度、消息最大字节数等</li><li>生产者通过路由键将交换器和队列绑定起来</li><li>生产者发送消息至Broker ，发送的消息包含消息体和含有路由键、交换器、优先级、是否持久化、过期时间、延时时间等信息的标签</li><li>相应的交换器根据接收到的路由键查找相匹配的队列如果找到 ，则将从生产者发送过来的消息存入相应的队列中</li><li>如果没有找到 ，则根据生产者配置的属性选择丢弃还是回退给生产者</li><li>关闭信道</li><li>关闭连接</li></ol><h6><span id="消费者消费消息过程">消费者消费消息过程</span></h6><ol><li>消费者连接到Broker ，建立一个连接，开启一个信道</li><li>消费者向 RabbitMQ Broker 请求消费相应队列中的消息，在这个过程中可能会设置消费者标签、是否自动确认、是否排他等</li><li>等待 RabbitMQ Broker 回应并投递相应队列中的消息， 消费者接收消息。</li><li>消费者确认接收到的消息</li><li>RabbitMQ从队列中删除相应己经被确认的消息</li><li>关闭信道</li><li>关闭连接</li></ol><h5><span id="涉及名词解释">涉及名词解释</span></h5><p>在上方的消息流转过程中涉及了以下几个名词</p><h6><span id="是否持久化">是否持久化</span></h6><p>将数据持久化到磁盘中</p><h6><span id="是否自动删除">是否自动删除</span></h6><p>当一个队列或交换机的所有消费者都与之断开连接时则这个队列或交换机就会自动删除</p><h6><span id="是否内置">是否内置</span></h6><p>客户端程序无法直接发送消息到这个交换器中，只能通过交换器路由到交换器这种方式</p><h6><span id="是否排他">是否排他</span></h6><p>如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。这里需要注意的是：<br>排他队列是基于连接可见的，同一个连接的不同信道是可以同时访问同一连接创建的排他队列; &quot;首次&quot;是指如果一个连接己经声明了排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同:即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除，这种队列适用于一个客户端同时发送和读取消息的应用场景。</p><h6><span id="自动确认">自动确认</span></h6><p>消费者在订阅队列时，可以指定 autoAck 参数，当 autoAck 等于 false时， RabbitMQ会等待消费者显式地回复确认信号后才从内存(或者磁盘)中移去消息(实质上是先打上删除标记，之后再删除)<br>当 autoAck 等于 true 时， RabbitMQ 会自动把发送出去的消息置为确认，然后从内存(或者磁盘)中删除，而不管消费者是否真正地消费到了这些消息<br>采用消息确认机制后，只要设置 autoAck 参数为 false ，消费者就有足够的时间处理消息，不用担心处理消息过程中消费者进程挂掉后消息丢失的问题。因为 RabbitMQ 会一直等待持有消息直到消费者显式确认收到消息</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit的基础概念</title>
      <link href="/2019/06/24/Rabbit%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/06/24/Rabbit%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为金融级必选的消息中间件，RabbitMQ 凭借其高可靠、易扩展、高可用及丰富的功能等特性受到越来越多企业的青睐，本篇文章简单介绍一下在初次学习RabbitMQ时涉及的一些基础的概念以及名词的解释</p></blockquote><p>首先看一下RabbitMQ的消息流转图：<br><img src="/2019/06/24/Rabbit的基础概念/1.jpg" alt="1"></p><p>简单解释一下上方涉及的几个组件</p><h6><span id="producer生产者">Producer生产者</span></h6><p>消息发送方，生产者创建消息，然后发布到 RabbitMQ 中</p><h6><span id="消息">消息</span></h6><p>一个消息一般是由两部分组成的:消息体和标签</p><ul><li>消息体也可以称之为 payload ，就是我们需要MQ为我们传输的消息，例如JSONString、String、Byte等。</li><li>标签：消息的详细参数， 比如目的交换器名称、路由键、延时时间等</li></ul><h6><span id="broker">Broker</span></h6><p>可以看作 RabbitMQ 服务</p><h6><span id="交换器exchange">交换器Exchange</span></h6><p>生产者将消息发送到交换器，由交换器将消息路由到一个或者多个队列中，如果路由不到，或许会返回给生产者，或许直接丢弃</p><p>RabbitMQ 常用的交换器类型有 anout、direct、topic、headers</p><ul><li>fanout会把所有发送到该交换器的消息路由到所有与该交换器绑定的队列中</li><li>direct类型的交换器会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中</li><li>topic与direct类型的交换器相似也是将消息路由到BindingKey RoutingKey相匹配的队列中但是与direct 类型不同的是topic 类型的交换器在匹配规则上进行了扩展它约定:RoutingKey和BindingKey为一个点号&quot;.“分隔的字符串且BindingKey中可以存在两种特殊字符串”*“和”#&quot;，用于做模糊匹配</li><li>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中headers属性进行匹配。在绑定队列和交换器时制定一组键值对 当发送消息到交换器时，RabbitMQ会获取到该消息的 headers (也是一个键值对的形式) ，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列</li></ul><h6><span id="绑定binding">绑定Binding</span></h6><p>将交换器与队列的关系就是通过绑定关联起来的，将一个队列绑定到交换机的时候一般会指定一个绑定键BindingKey ，这样当生产者投递到交换机的消息就会根据消息标签中的BindingKey 投递到对应的队列中<br><img src="/2019/06/24/Rabbit的基础概念/2.jpg" alt="2"></p><h6><span id="路由键routingkey">路由键RoutingKey</span></h6><p>在使用direct和topic这两种交换机的时候生产者想要准确的投递到队列中就必须指定RoutingKey</p><h6><span id="队列queue">队列Queue</span></h6><p>队列是 RabbitMQ 的内部对象，用 于存储消息，且只存储消息体。因为消息的标签是存储的消息的路由、延迟等信息，所以当交换机把消息投递到队列时这些标签就没有作用了，也就被丢弃了。<br>与Kafka将消息存储在 topic 中不同的是RabbitMQ 中消息都只能存储在队列中</p><h6><span id="消费者conumer">消费者Conumer</span></h6><p>消息接受方。消费者连接到 RabbitMQ 服务器，并订阅到队列上 。<br>消费者只会消费到消息体不知道消息的生产者是谁，当然也不知道Broker</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> RabbitMQ常用命令 </title>
      <link href="/2019/06/24/abbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/24/abbitMQ%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>服务启动:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-<span class="keyword">server</span> –detached</span><br></pre></td></tr></table></figure><p>服务关闭:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl <span class="built_in">stop</span> 若单机有多个实例，则在rabbitmqctl后加–n 指定名称</span><br></pre></td></tr></table></figure><p>开启某个插件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="builtin-name">enable</span> xxx</span><br></pre></td></tr></table></figure><p>关闭某个插件：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rabbitmq-plugins disablexxx</span></span><br></pre></td></tr></table></figure><p>注意：重启服务器后生效。</p><p>新建virtual_host:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rabbitmqctl</span> <span class="keyword">add_vhost </span>xxx</span><br></pre></td></tr></table></figure><p>撤销virtual_host:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rabbitmqctl</span> delete_vhost xxx</span><br></pre></td></tr></table></figure><p>新建用户：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rabbitmqctl</span> <span class="keyword">add_user </span>xxx pwd</span><br></pre></td></tr></table></figure><p>删除用户:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rabbitmqctl</span> delete_user xxx</span><br></pre></td></tr></table></figure><p>改密码:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">rabbimqctl change_password </span><span class="template-variable">&#123;username&#125;</span><span class="xml"> </span><span class="template-variable">&#123;newpassword&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>设置用户角色：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags &#123;username&#125; &#123;<span class="keyword">tag</span> <span class="title">...&#125;</span></span><br></pre></td></tr></table></figure><p>Tag可以为 administrator,monitoring, management</p><p>权限设置：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">set_permissions [-pvhostpath] </span><span class="template-variable">&#123;user&#125;</span><span class="xml"> </span><span class="template-variable">&#123;conf&#125;</span><span class="xml"> </span><span class="template-variable">&#123;write&#125;</span><span class="xml"> </span><span class="template-variable">&#123;read&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><ul><li>VhostpathVhost路径</li><li>user 用户名</li><li>Conf一个正则表达式match哪些配置资源能够被该用户访问</li><li>Write一个正则表达式match哪些配置资源能够被该用户读</li><li>Read一个正则表达式match哪些配置资源能够被该用户访问</li></ul><p>服务器状态：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rabbitmqctl status</span></span><br></pre></td></tr></table></figure><p>队列信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_queues<span class="string">[-p vhostpath]</span> <span class="string">[queueinfoitem ...]</span></span><br></pre></td></tr></table></figure><p>Queueinfoitem可以为：name，durable，auto_delete，arguments，messages_ready，messages_unacknowledged，messages，consumers，memory</p><p>Exchange信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_exchanges<span class="string">[-p vhostpath]</span> <span class="string">[exchangeinfoitem ...]</span></span><br></pre></td></tr></table></figure><p>Exchangeinfoitem有：name，type，durable，auto_delete，internal，arguments.</p><p>Binding信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctllist_bindings<span class="string">[-p vhostpath]</span> <span class="string">[bindinginfoitem ...]</span></span><br></pre></td></tr></table></figure><p>Bindinginfoitem有：source_name，source_kind，destination_name，destination_kind，routing_key，arguments</p><p>Connection信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctllist_connections <span class="string">[connectioninfoitem ...]</span></span><br></pre></td></tr></table></figure><p>Connectioninfoitem有：recv_oct，recv_cnt，send_oct，send_cnt，send_pend等。</p><p>Channel信息：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_channels<span class="string">[channelinfoitem ...]</span></span><br></pre></td></tr></table></figure><p>Channelinfoitem有consumer_count，messages_unacknowledged，messages_uncommitted，acks_uncommitted，messages_unconfirmed，prefetch_count，client_flow_blocked</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> RabbitMQ集群安装 </title>
      <link href="/2019/06/18/abbitMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2019/06/18/abbitMQ%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>首先参考上一篇文章【<a href="https://mp.weixin.qq.com/s/WCwslZeW6NZZpzGn4zYvGA" target="_blank" rel="noopener">CentsOS原生RabbitMQ安装过程</a>】在两到三台机器上先安装单独的RabbitMQ节点</p><p>修改一下hostname</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@rnode1 ~]# vim /etc/hosts</span><br><span class="line"><span class="number">172.16</span><span class="number">.20</span><span class="number">.110</span> rnode1</span><br><span class="line"><span class="number">172.16</span><span class="number">.20</span><span class="number">.111</span> rnode2</span><br><span class="line"><span class="number">172.16</span><span class="number">.20</span><span class="number">.112</span> rnode3</span><br></pre></td></tr></table></figure><p>erlang节点之间通信需要相同的cookie文件，将其中一个机器上的cookie文件copy到另外两个机器</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/.<span class="title">erlang</span>.<span class="title">cookie</span> <span class="title">rnode2</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">rabbitmq</span></span></span><br><span class="line">scp /var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>/.<span class="title">erlang</span>.<span class="title">cookie</span> <span class="title">rnode3</span>:/<span class="title">var</span>/<span class="title">lib</span>/<span class="title">rabbitmq</span></span></span><br></pre></td></tr></table></figure><p>首先在rnode1上观察一下节点状态如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@rnode1 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@rnode1</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@rnode1]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@rnode1]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@rnode1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@rnode1,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>分别在rnode2、rnode3上执行以下命令使其与rnode1组成集群</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@rnode2 ~]<span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line">Stopping rabbit application on <span class="keyword">node</span> <span class="title">rabbit</span>@rnode2</span><br><span class="line">[root@rnode2 ~]<span class="comment"># rabbitmqctl join_cluster --ram rabbit@rnode1</span></span><br><span class="line">Clustering <span class="keyword">node</span> <span class="title">rabbit</span>@rnode2 with rabbit@rnode1</span><br><span class="line">[root@rnode2 ~]<span class="comment"># rabbitmqctl start_app</span></span><br><span class="line">Starting <span class="keyword">node</span> <span class="title">rabbit</span>@rnode2</span><br></pre></td></tr></table></figure><p>随便选择一台集群观察节点状态发现集群已经搭建完毕</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@rnode3 ~]<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@rnode3</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit@rnode1]&#125;,&#123;ram,[rabbit@rnode3,rabbit@rnode2]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit@rnode2,rabbit@rnode1,rabbit@rnode3]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;<span class="string">"rabbit@rnode1"</span><span class="meta">&gt;&gt;</span>&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit@rnode2,[]&#125;,&#123;rabbit@rnode1,[]&#125;,&#123;rabbit@rnode3,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>安装过程中可能会出现如下问题</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@rnode1 ~]<span class="comment"># rabbitmqctl status</span></span><br><span class="line">Status of <span class="keyword">node</span> <span class="title">rabbit</span>@rnode1</span><br><span class="line">Error: unable to connect to <span class="keyword">node</span> <span class="title">rabbit</span>@rnode1: nodedown</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">===========</span><br><span class="line"></span><br><span class="line">attempted to contact: [rabbit@rnode1]</span><br><span class="line"></span><br><span class="line">rabbit@rnode1:</span><br><span class="line">  * connected to epmd (port <span class="number">4369</span>) on rnode1</span><br><span class="line">  * epmd reports: <span class="keyword">node</span> <span class="title">'rabbit</span>' not running at all</span><br><span class="line">                  no other nodes on rnode1</span><br><span class="line">  * suggestion: <span class="literal">start</span> the <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">current</span> <span class="keyword">node</span> details:<span class="title"></span></span><br><span class="line"><span class="title">- node</span> name: 'rabbitmq-cli-<span class="number">01</span>@rnode1'</span><br><span class="line">- home dir: /var/lib/rabbitmq</span><br><span class="line">- cookie hash: <span class="attr">DGMyi0De4NLhiCnlJmHsTg=</span>=</span><br></pre></td></tr></table></figure><p>此问题停止RabbitMQ的服务再重新启动即可解决</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-<span class="built_in">server</span> <span class="keyword">stop</span></span><br><span class="line">rabbitmq-<span class="built_in">server</span> -detached</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> CentsOS原生RabbitMQ安装过程 </title>
      <link href="/2019/06/17/CentsOS%E5%8E%9F%E7%94%9FRabbitMQ%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/06/17/CentsOS%E5%8E%9F%E7%94%9FRabbitMQ%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4><span id="版本依赖问题">版本依赖问题</span></h4><p>RabbitMQ安装时与Erlang的版本一定要保持以下的对应关系，否则会引发无法启动的问题<br><img src="/2019/06/17/CentsOS原生RabbitMQ安装过程/1.jpg" alt="1"><br><img src="/2019/06/17/CentsOS原生RabbitMQ安装过程/2.jpg" alt="1"></p><h4><span id="安装erlang">安装Erlang</span></h4><p>下载Erlang依赖</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>erlang.org<span class="regexp">/download/</span>otp_src_20.<span class="number">3</span>.tar.gz</span><br></pre></td></tr></table></figure><p>解压后进入资源文件夹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">xvf</span> <span class="selector-tag">otp_src_20</span><span class="selector-class">.3</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>下载编译所需组件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> unixODBC-devel openssl-devel ncurses-devel  gcc</span><br></pre></td></tr></table></figure><p>配置</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--prefix=/app/erlang</span> <span class="params">--with-ssl</span> <span class="params">--enable-threads</span> <span class="params">--enable-smp-support</span> <span class="params">--enable-kernel-poll</span> <span class="params">--enable-hipe</span> <span class="params">--without-javac</span></span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> -j8</span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>修改环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#在profile中添加以下三行</span></span><br><span class="line"><span class="attribute">ERLANG_HOME</span>=/app/erlang</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ERLANG_HOME/bin</span><br><span class="line"><span class="builtin-name">export</span> ERLANG_HOME</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>查看Erlang版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">erl</span></span><br></pre></td></tr></table></figure><h4><span id="安装rabbitmq">安装RabbitMQ</span></h4><p>下载文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>www.rabbitmq.com<span class="regexp">/releases/</span>rabbitmq-server<span class="regexp">/v3.6.15/</span>rabbitmq-server-<span class="number">3.6</span>.<span class="number">15</span>-<span class="number">1</span>.el6.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rpm</span> <span class="selector-tag">-ivh</span> <span class="selector-tag">--nodeps</span> <span class="selector-tag">--force</span> <span class="selector-tag">rabbitmq-server-3</span><span class="selector-class">.6</span><span class="selector-class">.15-1</span><span class="selector-class">.el6</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></span><br></pre></td></tr></table></figure><p>后台启动</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-<span class="keyword">server</span> -detached</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL系列文章汇总</title>
      <link href="/2019/06/05/ySQL%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/"/>
      <url>/2019/06/05/ySQL%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484247&amp;idx=1&amp;sn=dc5bb6bfa3d95e82f89ea446f91e8905&amp;chksm=fe396969c94ee07f0789c030f1fec05fbf35a349d932cd3b3271ea42a821232a8adfbe0b4d54&amp;scene=21#wechat_redirect" target="_blank">MySQL常用sql语句大全</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484253&amp;idx=1&amp;sn=5a52a821b10808004a595b2d8c16a082&amp;chksm=fe396963c94ee0754dbaa8f20c87cbc5d8ad4288a544f1bb4599702bcc968f6b388f23f67d54&amp;scene=21#wechat_redirect" target="_blank">MySQL里默认的几个库是干啥的？</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484257&amp;idx=1&amp;sn=261598aeeebe318b6d65d9333a1fc34d&amp;chksm=fe39695fc94ee049a2a5fd56cf8d0ad834fcc8447828c6004c0eb6b7fb8a19274130525c15e4&amp;scene=21#wechat_redirect" target="_blank">MySQL中神奇的show命令详解</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484261&amp;idx=1&amp;sn=2a6d392dd4fc8c3626a3b7a6f411ed2f&amp;chksm=fe39695bc94ee04d0d92599c85bf9bddc5d54bb11daab4ea3d9d5e1e7504acc302f0731c3cba&amp;scene=21#wechat_redirect" target="_blank">MySQL调优之数据类型选择原则</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484268&amp;idx=1&amp;sn=650c9f0f65a51e31391bc1167fdf108c&amp;chksm=fe396952c94ee044ec2db5155695a173ec2d32fd8ee45aaebd6e286a424c6d91f1346a4844f2&amp;scene=21#wechat_redirect" target="_blank">MySQL索引-基础版</a><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484298&amp;idx=1&amp;sn=ecb93cc1cd0f597b4c1d2b001d15e032&amp;chksm=fe3969b4c94ee0a2e7466af3794d72a38c302bda57429119c46080b99dba890f875be49442e4&amp;scene=21#wechat_redirect" target="_blank">MySQL索引失效及使用索引的优缺点</a><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484301&amp;idx=1&amp;sn=f105b08cc38d9210f1687eb232e0259f&amp;chksm=fe3969b3c94ee0a54df4dbca92fb5d008d39bf86538e255174f096ba190f86cd0616a3773ca7&amp;scene=21#wechat_redirect" target="_blank">使用索引的注意事项</a><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484276&amp;idx=1&amp;sn=089b7015e2da01c63dd7969fbbca7385&amp;chksm=fe39694ac94ee05c49fc1ced477ef0d1a0b6f179f43bc78ed97fe17557dc23b946174b5c6a64&amp;scene=21#wechat_redirect" target="_blank">你真的知道如何优化SQL么？</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484304&amp;idx=1&amp;sn=a8b7e5a39f563f8fe2d31f988d31b47b&amp;chksm=fe3969aec94ee0b8a1a9234aaecf80ae7581355b859b69310eae286892f3f5bd99abc158cfcc&amp;scene=21#wechat_redirect" target="_blank">MySQL架构与SQL执行流程</a><br><br><br><a href="http://mp.weixin.qq.com/s?__biz=MzU5MDgzOTYzMw==&amp;mid=2247484311&amp;idx=1&amp;sn=e3306f9c979fac067586d1f2d762bbca&amp;chksm=fe3969a9c94ee0bf185252c41c868217bec6f5ff0237669678ed4d94b70baca89fd6a278a127&amp;scene=21#wechat_redirect" target="_blank">初窥MySQL性能调优</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li><li><a href="https://mp.weixin.qq.com/s/SUV1DRSFhOIksj9C_qC7aA" target="_blank" rel="noopener">MySQL系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥MySQL性能调优</title>
      <link href="/2019/06/04/%E7%AA%A5MySQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2019/06/04/%E7%AA%A5MySQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：MySQL自带的性能测试工具mysqlslap的使用及几个性能调优的方法</p></blockquote><h4><span id="性能测试工具mysqlslap">性能测试工具—mysqlslap</span></h4><p>mysqlslap是MySQL自带的一款非常优秀的性能测试工具。使用它可以<br>模拟多个客户端并发向服务器发出查询、更新等请求,然后输出简单的报告</p><h6><span id="可选参数">可选参数</span></h6><ul><li>–engines：代表要测试的引擎，可以有多个，用分隔符隔开</li><li>–iterations：代表要运行这些测试多少次</li><li>–auto-generate-sql ：代表用系统自己生成的SQL脚本来测试</li><li>–auto-generate-sql-load-type： 代表要测试的是读还是写还是两者混合的（read,write,update,mixed）</li><li>–number-of-queries：代表总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算</li><li>–debug-info 代表要额外输出CPU以及内存的相关信息</li><li>–number-int-cols ：创建测试表的 int 型字段数量</li><li>-auto-generate-sql-add-autoincrement : 代表对生成的表自动添加auto_increment列</li><li>–number-char-cols 创建测试表的 char 型字段数量</li><li>–create-schema 测试的database</li><li>–query  使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试</li><li>–only-print 如果只想打印看看SQL语句是什么，可以用这个选项</li></ul><p>如下就是一个简单的使用示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]# mysqlslap -uroot -proot</span><br><span class="line"> <span class="attribute">--concurrency</span>=500 <span class="attribute">--iterations</span>=1 </span><br><span class="line"> <span class="attribute">--create-schema</span>=<span class="string">'test'</span> </span><br><span class="line"> <span class="attribute">--query</span>=<span class="string">'select * from u_trade_pay_order limit1000;'</span> </span><br><span class="line"> <span class="attribute">--number-of-queries</span>=10</span><br></pre></td></tr></table></figure><h4><span id="影响mysql性能的原因">影响MySQL性能的原因</span></h4><h5><span id="连接数不够">连接数不够</span></h5><p>当连接数使用超过85%以上就说明连接数已经快要不够用了</p><h6><span id="连接数相关查看方法">连接数相关查看方法</span></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Max_used_connections'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_connections%'</span>;</span><br></pre></td></tr></table></figure><h6><span id="连接数不够的原因">连接数不够的原因</span></h6><ul><li>连接数设置过低或过高</li><li>慢查询导致IO阻塞，导致连接长时间不释放</li><li>SQL执行完，连接未释放</li></ul><h6><span id="修改mysql的连接数">修改MySQL的连接数</span></h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> global <span class="comment">max_connections = 1024</span>;</span><br></pre></td></tr></table></figure><h5><span id="慢查询">慢查询</span></h5><p>原则上应该单次执行时间超过100ms的SQL就需要考虑优化的事情了</p><h6><span id="查看慢sql">查看慢SQL</span></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Slow_queries’;</span></span><br></pre></td></tr></table></figure><h6><span id="出现慢查询的原因">出现慢查询的原因</span></h6><ul><li>索引不合理或没有索引</li><li>查询的数据量过大</li><li>存在锁</li></ul><h5><span id="缓存命中率低">缓存命中率低</span></h5><p>若查询缓存命中率 &lt; 95%，则表明缓存大小可能设置过低或者存在大量缓存碎片</p><h6><span id="缓存命中率计算方法">缓存命中率计算方法</span></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Qcache_hits – Qcache_inserts) / Qcache_hits * 100%</span><br></pre></td></tr></table></figure><h6><span id="开启查询缓存">开启查询缓存</span></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span> query_cache_type=<span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><h6><span id="提高缓存利用率">提高缓存利用率</span></h6><ul><li>使用相同的SQL，例如在MyBatist中使用#而不是$</li><li>客户端与服务端使用相同的字符集</li><li>增大缓存区的大小</li><li>insert和update会引起缓存失效</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL架构与SQL执行流程</title>
      <link href="/2019/05/31/MySQL%E6%9E%B6%E6%9E%84%E4%B8%8ESQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/05/31/MySQL%E6%9E%B6%E6%9E%84%E4%B8%8ESQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5><span id="mysql架构设计">MySQL架构设计</span></h5><p>下面是一张MySQL的架构图：</p><p><img src="/2019/05/31/MySQL架构与SQL执行流程/1.jpg" alt="1"></p><p>上方各个组件的含义如下：</p><h6><span id="connectors">Connectors</span></h6><p>指的是不同语言中与SQL的交互</p><h6><span id="management-serveices-amp-utilities">Management Serveices &amp; Utilities：</span></h6><p>系统管理和控制工具</p><h6><span id="connection-pool连接池">Connection Pool：连接池</span></h6><p>管理缓冲用户连接，线程处理等需要缓存的需求。<br>负责监听对 MySQL Server 的各种请求，接收连接请求，转发所有连接请求到线程管理模块。每一个连接上 MySQL Server 的客户端请求都会被分配（或创建）一个连接线程为其单独服务。而连接线程的主要工作就是负责 MySQL Server 与客户端的通信，<br>接受客户端的命令请求，传递 Server 端的结果信息等。线程管理模块则负责管理维护这些连接线程。包括线程的创建，线程的 cache 等</p><h6><span id="sql-interfacesql接口">SQL Interface：SQL接口</span></h6><p>接受用户的SQL命令，并且返回用户需要查询的结果。比如select from就是调用SQL Interface</p><h6><span id="parser命令解析器">Parser：命令解析器</span></h6><p>SQL命令传递到解析器的时候会被解析器验证和解析。解析器是由Lex和YACC实现的，是一个很长的脚本。<br>在 MySQL中我们习惯将所有 Client 端发送给 Server 端的命令都称为 query ，在 MySQL Server 里面，连接线程接收到客户端的一个 Query 后，会直接将该 query 传递给专门负责将各种 Query 进行分类然后转发给各个对应的处理模块。<br>主要功能：<br>a . 将SQL语句进行语义和语法的分析，分解成数据结构，然后按照不同的操作类型进行分类，然后做出针对性的转发到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。<br>b.  如果在分解构成中遇到错误，那么就说明这个sql语句是不合理的</p><h6><span id="optimizer-查询优化器">Optimizer: 查询优化器</span></h6><p>SQL语句在查询之前会使用查询优化器对查询进行优化。就是优化客户端请求的 query（sql语句） ，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果<br>他使用的是“选取-投影-联接”策略进行查询。<br>用一个例子就可以理解：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select uid,name <span class="keyword">from</span><span class="built_in"> user </span>where gender = 1;</span><br></pre></td></tr></table></figure><p>这个select 查询先根据where 语句进行选取，而不是先将表全部查询出来以后再进行gender过滤<br>这个select查询先根据uid和name进行属性投影，而不是将属性全部取出以后再进行过滤<br>将这两个查询条件联接起来生成最终查询结果</p><h6><span id="cache和buffer-查询缓存">Cache和Buffer： 查询缓存。</span></h6><p>他的主要功能是将客户端提交 给MySQL 的 Select 类 query 请求的返回结果集 cache 到内存中，与该 query 的一个 hash 值 做<br>一个对应。该 Query 所取数据的基表发生任何数据的变化之后， MySQL 会自动使该 query 的Cache 失效。在读写比例非常高的应用系统中， Query Cache 对性能的提高是非常显著的。当然它对内存的消耗也是非常大的<br>如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等<br>存储引擎接口<br>存储引擎接口模块可以说是 MySQL 数据库中最有特色的一点了。目前各种数据库产品中，基本上只有 MySQL 可以实现其底层数据存储引擎的插件式管理。这个模块实际上只是 一个抽象类，但正是因为它成功地将各种数据处理高度抽象化，才成就了今天 MySQL 可插拔存储引擎的特色。<br>注意：存储引擎是基于表的，而不是数据库。</p><h5><span id="sql语句执行流程">SQL语句执行流程</span></h5><h6><span id="连接">连接</span></h6><ul><li>客户端发来一条SQL语句，监听客户端的‘连接管理模块’接收请求</li><li>将请求转发到‘连接进/线程模块’</li><li>调用‘用户模块’来进行授权检查</li><li>通过检查后，‘连接进/线程模块’从‘线程连接池’中取出空闲的被缓存的连接线程和客户端请求对接，如果失败则创建一个新的连接请求</li></ul><h6><span id="处理">处理</span></h6><ul><li>如果是查询语句则先查询缓存，检查语句是否完全匹配，接着再检查是否具有权限，都成功则直接取数据返回</li><li>上一步有失败则转交给‘命令解析器’，经过词法分析，语法分析后生成解析树</li><li>接下来是预处理阶段，处理解析器无法解决的语义，检查权限等，生成新的解析树</li><li>再转交给对应的模块处理</li><li>如果是查询还会经由‘查询优化器’做大量的优化，生成执行计划</li><li>模块收到请求后，通过‘访问控制模块’检查所连接的用户是否有访问目标表和目标字段的权限</li><li>有则调用‘表管理模块’，先是查看table cache中是否存在，有则直接对应的表和获取锁，否则重新打开表文件</li><li>根据表的meta数据，获取表的存储引擎类型等信息，通过接口调用对应的存储引擎处理</li><li>上述过程中产生数据变化的时候，若打开日志功能，则会记录到相应二进制日志文件中</li></ul><h6><span id="结果">结果</span></h6><ul><li>SQL执行完成后，将结果集返回给‘连接进/线程模块’</li><li>返回的也可以是相应的状态标识，如成功或失败等</li><li>连接进/线程模块’进行后续的清理工作，并继续等待请求或断开与客户端的连接</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用索引的注意事项</title>
      <link href="/2019/05/30/%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2019/05/30/%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<ul><li>为经常需要搜索的列加索引,可以加快索引的速度</li><li>主键列上可以确保列的唯一性</li><li>在表与表的连接条件上加索引,可以加快连接查询的速度</li><li>在经常需要排序、分组、distinct的列上加索引，可以加快排序查询速度</li><li>在使用包含&lt; &lt;= &gt; &gt;= BETWEEN IN 等查询条件的联合索引时条件判断一定要放在最后</li><li>使用like查询时使用“str%”</li><li>索引键不要包含NULL</li><li>如果你的一个字段是Char(32)或者int(32),在创建索引的时候指定前缀长度 比如前10个字符 (前提是多数值是唯一的…)那么短索引可以提高查询速度,并且可以减少磁盘的空间,也可以减少I/0操作</li><li>不要在索引列上进行函数操作或运算</li><li>选择越小的数据类型越好,因为通常越小的数据类型通常在磁盘,内存,cpu,缓存中 占用的空间很少,处理起来更快</li><li>查询中很少使用到的列 不应该创建索引</li><li>重复数据多的列不应该建立索引,比如性别、状态等字段</li><li>定义为text和image和bit数据类型的列不应该增加索引,</li><li>当表的修改(UPDATE,INSERT,DELETE)操作远远大于检索(SELECT)操作时不应该创建索引</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引失效及使用索引的优缺点</title>
      <link href="/2019/05/29/MySQL%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2019/05/29/MySQL%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文所有实验基于MySQL5.7.21，实验将会用到Explain工具，不了解的同学可参考此文章：MySQL性能优化神器Explain详解</p></blockquote><h5><span id="联合索引失效">联合索引失效</span></h5><p>先创建一个包含三个字段的联合索引，索引顺序如下：<br><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/1.jpg" alt="1"><br>由以下三张图的key_len字段我们可以得出三个索引的长度分别为：title长303，author长122，price长5.<br><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/2.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/3.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/4.jpg" alt="1"></p><p>联合索引使用时遵循最左匹配原则，如果不是从最左列开始时，整个索引失效，如果最左匹配则依次往右使用索引，直到碰到不匹配的地方之后生效之前匹配到的索引<br><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/5.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/6.jpg" alt="1"></p><h5><span id="范围查询会引起索引失效">范围查询会引起索引失效</span></h5><p>为以上联合索引更换字段顺序为title，price，author。如果查询时包含范围查询则范围字段后面的字段失效<br><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/7.jpg" alt="1"></p><h5><span id="like查询失效">like查询失效</span></h5><p>使用模糊查询时，%只有在最右方的时候才能生效</p><p>为title设置一个单独的索引</p><p><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/8.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/9.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/10.jpg" alt="1"></p><h5><span id="查询中含有不等于或者or则索引不生效">查询中含有不等于或者or则索引不生效</span></h5><p><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/11.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/12.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/13.jpg" alt="1"></p><h5><span id="在索引列上做计算或函数导致失效">在索引列上做计算或函数导致失效</span></h5><p>删除刚才创建的联合索引，为price字段创建一个单独的索引</p><p><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/14.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/15.jpg" alt="1"></p><h5><span id="字符串类型不加引号同样会失效">字符串类型不加引号同样会失效</span></h5><p><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/16.jpg" alt="1"></p><h5><span id="is-null和-is-not-null">is null和 is not null</span></h5><p>为title字段创建一个单独的索引<br><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/17.jpg" alt="1"><img src="/2019/05/29/MySQL索引失效及使用索引的优缺点/18.jpg" alt="1"></p><h5><span id="注意事项">注意事项</span></h5><p>在进行索引使用测试时，可能会因为测试数据太少从而MySQL会认为查询语句走全表扫描比走索引更有效，所以会自动去除索引，为避免测试结果误导可使用如下方式强制MySQL使用索引</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">FORCE</span> <span class="keyword">index</span>(索引名称) <span class="keyword">where</span> price=<span class="number">1</span>+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5><span id="使用索引的优点">使用索引的优点</span></h5><ul><li>唯一索引或主键索引可以保证数据库表的唯一性</li><li>可以提高查询效率和性能</li><li>加速表连接的速度</li><li>加快排序的效率</li></ul><h5><span id="使用索引的缺点">使用索引的缺点</span></h5><ul><li>每次更新修改删除都需要维护索引、从而消耗性能</li><li>索引文件会占用物理空间</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL性能优化神器Explain</title>
      <link href="/2019/05/28/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8Explain/"/>
      <url>/2019/05/28/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%A5%9E%E5%99%A8Explain/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：MySQL性能优化神器Explain的使用</p></blockquote><h5><span id="简介">简介</span></h5><p>虽然使用Explain不能够马上调优我们的SQL，它也不能给予我们一些调整建议，但是它能够让我们了解MySQL 优化器是如何执行SQL 语句的</p><p>通过Explain，我们可以分析出以下结果：</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p>Explain命令的用法十分简单, 在 select语句前加上 Explain 就可以了, 例如:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>它的结果主要包含以下字段<br>id、select_type、table、partitions、type、possible_keys、key、ref、rows、filtered、extra<br>接下来我们来看一下各个字段的含义</p><h5><span id="id-查询序列号">id 查询序列号</span></h5><p>加载表的顺序<br><img src="/2019/05/28/MySQL性能优化神器Explain/1.jpg" alt="1"><br>连接查询各个表的加载顺序是相同的，所以都为1</p><p><img src="/2019/05/28/MySQL性能优化神器Explain/2.jpg" alt="2"><br>包含子查询的时候，先执行子查询，所以user表的id值最大</p><h5><span id="select_type-查询类型">select_type 查询类型</span></h5><p>常用取值有:</p><ul><li>SIMPLE：简单的select查询，不包含子查询和索引</li><li>PRIMARY：查询中若包含任何子查询，最外层查询则为记为PRIMARY</li><li>SUBQUERY：在SELECT或WHERE列表中包含了子查询</li><li>DERIVED：在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放在临时表中</li><li>UNION：若第二个SELECT出现在索引之后，则被标记为UNION：若索引包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED</li><li>UNION RESULT：从索引表获取结果的查询</li></ul><h5><span id="table查询涉及的表或衍生表">table查询涉及的表或衍生表</span></h5><h5><span id="type查询类型">type查询类型</span></h5><p>通过 type 字段, 我们可以判断此次查询是全表扫描还是索引扫描等，type 常用的取值有:</p><ul><li>system：表只有一条数据</li><li>const：针对主键或唯一索引的等值查询扫描, 简单理解为一次读取就获取到了数据，例如下面这个主键索引的查询<br><img src="/2019/05/28/MySQL性能优化神器Explain/3.jpg" alt="3"></li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行</li><li>range：表示使用索引范围查询，例如=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS、 NULL、&lt;=&gt;、BETWEEN、IN等</li><li>index: 所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据，例如:<br><img src="/2019/05/28/MySQL性能优化神器Explain/4.jpg" alt="4"></li><li>ALL: 表示全表扫描, 这个类型的查询是性能最差的查询</li></ul><p>type 类型的性能比较<br>通常来说, 不同的 type 类型的性能关系如下:<br>ALL &lt; index &lt; range &lt; ref &lt; eq_ref &lt; const &lt; system</p><h5><span id="possible_keys查询时能够使用到的索引">possible_keys查询时能够使用到的索引.</span></h5><p>possible_keys 表示 MySQL 在查询时, 能够使用到的索引. 注意并不是一定用，实际使用是由 由 key 字段决定</p><h5><span id="key-查询使用的索引">key 查询使用的索引</span></h5><p>此字段是 MySQL 在当前查询时所真正使用到的索引.</p><h5><span id="key_len使用索引的字节数">key_len使用索引的字节数</span></h5><p>这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.</p><h5><span id="rows-mysql估算要查找到结果集需要扫描读取的数据行数">rows MySQL估算要查找到结果集需要扫描读取的数据行数</span></h5><h5><span id="extra额外的信息">Extra额外的信息</span></h5><p>常见的有以下几种内容:</p><ul><li>Using filesort：MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li><li>Using index：表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li><li>Using temporary：查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li><li>Using where：表明使用了where过滤</li><li>Using join buffer：表明使用了连接缓存,比如说在查询的时候，多表join的次数非常多，那么将配置文件中的缓冲区的join buffer调大一些</li><li>impossible where：where子句的值总是false，不能用来获取任何元组</li><li>select tables optimized away：在没有GROUPBY子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li><li>distinct：优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引-基础版</title>
      <link href="/2019/05/27/ySQL%E7%B4%A2%E5%BC%95-%E5%9F%BA%E7%A1%80%E7%89%88/"/>
      <url>/2019/05/27/ySQL%E7%B4%A2%E5%BC%95-%E5%9F%BA%E7%A1%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：MySQL的索引类型及区别和如何建立、删除、查看索引</p></blockquote><h5><span id="索引类型">索引类型</span></h5><p>MySQL中的的索引分为单列索引和组合索引</p><ul><li>单列索引:主键索引,唯一索引,普通索引都可以作为一个单列索引，单列索引只包含一个列,一个表可以有多个单列索引</li><li>组合索引:一个组合索引包含两个或两个以上的列</li><li>当这样一条语句select * from user where id=1 and name=‘张三’ and age=18 执行时，如果 id、name、age三个字段使用的是组合索引则该组合索引可以被使用、而如果是三个字段分别使用单列索引则只使用其中一个索引</li></ul><h5><span id="普通索引">普通索引</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> title_index <span class="keyword">ON</span> book(title(<span class="number">100</span>)); </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">ADD</span> <span class="keyword">index</span> title_index(title);</span><br></pre></td></tr></table></figure><p>如果是char、varchar类型，length可以小于字段实际长度。如果是blob和text类型，必须指定 length</p><h5><span id="唯一索引">唯一索引</span></h5><p>与普通不同的是唯一索引列的值必须唯一，但允许有空值，不过空值也只能是存在一个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> title_index <span class="keyword">ON</span> book(title(<span class="number">100</span>)); </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">ADD</span> <span class="keyword">unique</span> <span class="keyword">index</span> title_index(title);</span><br></pre></td></tr></table></figure><h5><span id="主键索引">主键索引</span></h5><p>表中如果是单主键的话，那这个主键会被系统默认建为索引<br>表中如果是复合主键的话，那系统会遵循左对齐原则，即如复合主键 a 和 b字段和c字段…， 默认建的主键索引是abc即主键全有，把所有主键全部建立在一个单独的主键索引中</p><h5><span id="组合索引">组合索引</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> title_author_index <span class="keyword">ON</span> book(title(<span class="number">100</span>),author(<span class="number">80</span>)); </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">ADD</span> <span class="keyword">index</span> title_author_index(title,author);</span><br></pre></td></tr></table></figure><h5><span id="删除索引">删除索引</span></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> title_index <span class="keyword">ON</span> book;</span><br></pre></td></tr></table></figure><h5><span id="显示索引">显示索引</span></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> book;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL调优之数据类型选择原则</title>
      <link href="/2019/05/27/ySQL%E8%B0%83%E4%BC%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9%E5%8E%9F%E5%88%99/"/>
      <url>/2019/05/27/ySQL%E8%B0%83%E4%BC%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：高可用数据库设计时数据类型的选择原则</p></blockquote><p>在进行数据库设计时，如果能够选择最恰当的数据类型就可以为后期的数据库调优打好最坚实的基础</p><h5><span id="选择数据类型的原则">选择数据类型的原则</span></h5><h6><span id="更小的通常更好">更小的通常更好</span></h6><p>例如存储订单状态字段很多时候使用0、1、2表示使用tinyint类型存储就够了，没必要搞个int、long甚至varchar来。<br>越小的数据类型代表着占用越小的磁盘、内存和CPU，也就代表着越快的速度。当然，不要为了追求小而不考虑实际的场景、通常选择一个不会超过范围的最小数据类型就好了</p><h6><span id="越简单越好">越简单越好</span></h6><p>数据类型越简单操作所需要的CPU周期就越少，例如说ip地址通常使用int而不是varchar来存储</p><h6><span id="尽量避免null">尽量避免NULL</span></h6><p>包含NULL的列会使得索引、索引统计和值比较都变得复杂</p><h5><span id="各个数据类型占用的字节">各个数据类型占用的字节</span></h5><table><thead><tr><th>数据类型</th><th>所占字节（byte）</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td></tr><tr><td>smallint</td><td>2</td></tr><tr><td>medumint</td><td>3</td></tr><tr><td>int</td><td>4</td></tr><tr><td>bigint</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>decimal(m,d）</td><td>m+2</td></tr><tr><td>date</td><td>3</td></tr><tr><td>datetime</td><td>8</td></tr><tr><td>timestamp</td><td>4</td></tr><tr><td>char（n）</td><td>1-n-255</td></tr><tr><td>varchar（n）</td><td>1-n-65532</td></tr><tr><td>tinyblob</td><td>255</td></tr><tr><td>blob</td><td>65535</td></tr><tr><td>medumblob</td><td>16777215</td></tr><tr><td>longblob</td><td>4294967295</td></tr><tr><td>tinytext</td><td>255</td></tr><tr><td>text</td><td>65535</td></tr><tr><td>medumtext</td><td>16777215</td></tr><tr><td>longtext</td><td>4294967295</td></tr></tbody></table><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中神奇的show命令详解</title>
      <link href="/2019/05/27/SQL%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84show%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/27/SQL%E4%B8%AD%E7%A5%9E%E5%A5%87%E7%9A%84show%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<ul><li>show binary logs：列出服务器上的二进制日志文件</li><li>show binlog events：显示二进制日志中的事件</li><li>show character set：显示所有可用的字符集</li><li>show collation：列出服务器支持的排序规则</li><li>show columns：显示有关给定表或视图中列的信息</li><li>show create database：显示建库语句</li><li>show create event：显示创建事件语句</li><li>show create function：显示创建函数语句</li><li>show create procedure：返显示创建存储过程语句</li><li>show create table：显示建表语句</li><li>show create trigger：显示创建触发器语句</li><li>show create user：显示创建用户语句</li><li>show create view：显示创建视图语句</li><li>show databases：列出mysql服务器主机上的数据库</li><li>show engine：显示有关存储引擎的操作信息</li><li>show engines：显示有关服务器存储引擎的状态信息</li><li>show error：显示有关在当前会话中执行语句所产生的错误信息</li><li>show events：显示有关事件管理器事件的信息</li><li>show function code：显示函数代码</li><li>show function status：显示函数状态</li><li>show grants：显示授予用户的安全权限</li><li>show index：返回表索引信息</li><li>show master status：显示有关主服务器的二进制日志文件的状态信息</li><li>show open tables：列出temporary表缓存中当前打开的非表</li><li>show plugins：显示有关服务器插件的信息</li><li>show privileges：显示mysql服务器支持的系统权限列表</li><li>show procedure code：显示存储过程代码</li><li>show procedure status：显示存储过程状态</li><li>show processlist：显示正在运行的线程。</li><li>show profile：显示当前会话过程中执行的语句资源使用信息</li><li>show relaylog events：显示复制从站的中继日志中的事件</li><li>show slave hosts：显示当前向主服务器注册的复制从服务器列表</li><li>show slave status：显示有关从属线程的基本参数的状态信息</li><li>show status：服务器状态信息</li><li>show table status：提供了很多关于每个非temporary 表的信息</li><li>show tables：列出temporary给定数据库中的非表</li><li>show triggers：列出当前为数据库中的表定义的触发器</li><li>show variables：显示mysql系统变量的值</li><li>show warnings：显示有关在当前会话中执行语句所产生的错误、警告、注释信息</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL里默认的几个库是干啥的？</title>
      <link href="/2019/05/22/ySQL%E9%87%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BA%93%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84%EF%BC%9F/"/>
      <url>/2019/05/22/ySQL%E9%87%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E5%87%A0%E4%B8%AA%E5%BA%93%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：MySQL安装后自带的4个数据库：information_schema、<br>performance_schema、sys、mysql的作用及其中各个表所存储的数据含义</p></blockquote><h1><span id="information_schema">information_schema</span></h1><p>information_schema是mysql自带的一个信息数据库，其保存着关于mysql服务器所维护的所有其他数据库的信息，如数据库名，数据库的表，表栏的数据类型与访问权限等<br>也就是说当你建立一个新的数据库，或者在已有的数据库中增删改表的话，都会记录在information_schema库中</p><p>相关表:</p><ul><li>character_sets：存储数据库相关字符集信息（memory存储引擎）</li><li>collations：字符集对应的排序规则</li><li>collation_character_set_applicability：字符集和连线校对的对应关系</li><li>schema_privileges：提供了数据库的相关权限</li><li>table_privileges:  提供的是表权限相关信息</li><li>column_privileges ：表授权的用户的权限</li><li>user_privileges:提供的是用户表权限相关信息</li><li><font color="red">columns：存储所有表的所有字段信息</font></li><li>innodb_sys_columns ：innodb的元数据</li><li>engines ：引擎类型，是否支持这个引擎，描述，是否支持事物，是否支持分布式事务，是否能够支持事物的回滚点</li><li>events ：记录mysql中的事件，类似于定时作业</li><li>files ：这张表提供了有关在mysql的表空间中的数据存储的文件的信息，文件存储的位置</li><li>parameters ：参数表存储了一些存储过程和方法的参数，以及存储过程的返回值信息</li><li>plugins ：mysql的插件信息，是否是活动状态等信息</li><li>routines：关于存储过程和方法function的一些信息</li><li>schemata：这个表提供了实例下有多少个数据库，而且还有数据库默认的字符集</li><li>triggers :触发器的信息</li><li><font color="red">views :视图的信息</font></li><li><font color="red">referential_constraints：这个表提供的外键相关的信息</font></li><li><font color="red">table_constraints ：这个表提供的是 相关的约束信息</font></li><li>innodb_sys_foreign_cols ：innodb关于外键的元数据信息</li><li>key_column_usage  ：数据库中所有有约束的列</li><li>global_status：系统状态</li><li>global_variables：系统变量</li><li>session_status：session状态</li><li>session_variables：session变量</li><li><font color="red">partitions ：mysql分区表相关的信息</font></li><li>processlist：当前线程列表</li><li>innodb_cmp_per_index，innodb_cmp_per_index_reset：关于压缩innodb信息表的时候的相关信息</li><li>innodb_cmpmem ，innodb_cmpmem_reset：innodb的压缩页的buffer pool信息</li><li>innodb_buffer_pool_stats ：表提供有关innodb 的buffer pool相关信息</li><li>innodb_buffer_page_lru，innodb_buffer_page :维护了innodb lru list的相关信息</li><li>innodb_buffer_page ：buffer里面缓冲的页数据</li><li>innodb_sys_datafiles ：这张表就是记录的表的文件存储的位置和表空间的一个对应关系</li><li>innodb_temp_table_info ：所有的innodb的所有用户使用到的信息</li><li>innodb_metrics ：提供innodb的各种的性能指数</li><li>innodb_sys_virtual :表存储的是innodb表的虚拟列的信息</li><li>innodb_cmp，innodb_cmp_reset：存储的是关于压缩innodb信息表的时候的相关信息</li><li><font color="red">tables：数据库中表的信息</font></li><li>tablespaces：活跃表空间</li><li>innodb_sys_tables：表格的格式和存储特性，包括行格式，压缩页面大小位级别的信息</li><li><font color="red">statistics：关于表的索引信息</font></li><li><font color="red">innodb_sys_indexes：innodb表的索引的相关信息</font></li><li><font color="red">innodb_sys_tablestats：mysql数据库的统计信息</font></li><li>innodb_sys_fields ：innodb的表索引字段信息，以及字段的排名</li><li><font color="red">innodb_ft_config :这张表存的是全文索引的信息</font></li><li>innodb_ft_default_stopword：stopword 的信息</li><li>innodb_ft_index_cache ：这张表存放的是插入前的记录信息，也是为了避免dml时候昂贵的索引重组</li><li>optimizer_trace ：提供的是优化跟踪功能产生的信息</li><li>profiling：服务器执行语句的工作情况</li><li>innodb_ft_being_deleted：nnodb_ft_deleted的一个快照</li><li><font color="red">innodb_locks: innodb现在获取的锁 </font></li><li><font color="red">innodb_lock_waits：系统锁等待相关信息，包含了阻塞的一行或者多行的记录，而且还有锁请求和被阻塞改请求的锁信息等</font></li><li><font color="red">innodb_trx：包含了所有正在执行的的事物相关信息，而且包含了事物是否被阻塞或者请求锁</font></li></ul><h1><span id="performance_schema">performance_schema</span></h1><p>主要用于收集数据库服务器性能参数</p><p>相关表:</p><ul><li>setup_actors：配置用户纬度的监控，默认监控所有用户</li><li>setup_consumers：配置events的消费者类型，即收集的events写入到哪些统计表中</li><li>setup_instruments：配置具体的instrument</li><li>setup_objects：配置监控对象，默认对mysql、performance_schema和information_schema中的表都不监控，而其它所有表都监控。</li><li>setup_timers：配置每种类型指令的统计时间单位</li><li>cond_instances：系统中使用的条件变量的对象</li><li>file_instances：系统中打开了文件的对象，包括ibdata文件，redo文件，binlog文件，用户的表文件等</li><li><font color="red">mutex_instances：系统中使用互斥量对象的所有记录</font></li><li><font color="red">rwlock_instances： 系统中使用读写锁对象的所有记录 </font></li><li>socket_instances：活跃会话对象实例</li><li><font color="red">events_waits_current：记录了当前线程等待的事件 </font></li><li><font color="red">events_waits_history：记录了每个线程最近等待的10个事件 </font></li><li>events_waits_history_long：记录了最近所有线程产生的10000个事件</li><li>events_stages_current：记录了当前线程所处的执行阶段</li><li><font color="red">events_stages_history：记录了当前线程所处的执行阶段10条历史记录  </font></li><li><font color="red">events_stages_history_long：记录了当前线程所处的执行阶段10000条历史记录  </font></li><li>events_statements_current：最顶层的请求，SQL语句或是COMMAND</li><li>users：记录用户连接数信息</li><li>hosts：记录了主机连接数信息</li><li>accounts：记录了用户主机连接数信息</li><li>events_waits_summary_global_by_event_name：按等待事件类型聚合</li><li>events_waits_summary_by_instance：按等待事件对象聚合</li><li>events_waits_summary_by_thread_by_event_name：按每个线程和事件来统计</li><li>events_stages_summary_global_by_event_name：按事件阶段类型聚合</li><li>events_stages_summary_by_thread_by_event_name：按每个线程和事件来阶段统计</li><li>events_statements_summary_by_digest：按照事件的语句进行聚合</li><li>events_statements_summary_global_by_event_name：按照事件的语句进行聚合</li><li>events_statements_summary_by_thread_by_event_name：按照线程和事件的语句进行聚合</li><li>file_summary_by_instance：按事件类型统计（物理IO维度）</li><li>file_summary_by_event_name：具体文件统计（物理IO维度）</li><li>table_io_waits_summary_by_table：根据wait/io/table/sql/handler，聚合每个表的I/O操作（逻辑IO纬度）</li><li><font color="red">table_io_waits_summary_by_index_usage：按索引维度统计  </font></li><li><font color="red">table_lock_waits_summary_by_table：聚合了表锁等待事件 </font></li><li>socket_summary_by_instance：socket聚合统计表</li><li>performance_timers：系统支持的统计时间单位</li><li>threads：监视服务端的当前运行的线程</li></ul><h1><span id="sys">sys</span></h1><p>Sys库是一个简单版的performance_schema</p><p>相关表:</p><ul><li>sys_config：用于sys schema库的配置</li></ul><p>相关视图(以_*结尾的代表多个表)：</p><ul><li>host_* : 以ip分组相关的统计信息</li><li>innodb_* : innodb buffer 相关信息</li><li>io_* : 数据内不同维度展的io相关的信息</li><li>memory_* : 以ip，连接，用户，分配的类型分组及总的占用显示内存的使用</li><li>metrics : db的内部的统计值</li><li>processlist : 线程相关的信息</li><li>ps_check_lost_instrumentation: 没有工具统计的一些变量</li><li><font color="red">schema _*: 表结构相关的信息  </font></li><li>session : 用户连接相关的信息</li><li><font color="red">statement_analysis : 基于语句的统计信息    </font></li><li><font color="red">statements_*: 出错的语句，进行全表扫描、运行时间超长等 </font></li><li>user_* : 和host_开头的相似，只是以用户分组统计</li><li>wait_*:  等待事件</li><li>waits_* : 以ip，用户分组统计出来的一些延迟事件</li></ul><h1><span id="mysql">mysql</span></h1><p>存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息</p><p>相关表:</p><ul><li>user：用户表</li><li>db：存储了某个用户对一个数据库的权限</li><li>host：存储了某个主机对数据库的操作权限</li><li>tables_priv：可以对单个表进行权限设置</li><li>procs_priv：可以对存储过程和存储函数进行权限设置</li><li>columns_priv：可以对单个列进行权限设置</li><li>server_cost：CPU的代价模型</li><li>engine_cost：IO的代价模型</li><li>event：记录MySQL中的事件</li><li>func：记录MySQL中的自定义函数</li><li>general_log：所有的sql执行日志（一般不开启）</li><li>gtid_executed：二进制日志</li><li>help_category：关于帮助主题类别的信息</li><li>help_keyword：与帮助主题相关的关键字信息</li><li>help_relation：帮助关键字信息和主题信息之间的映射</li><li>help_topic：帮助主题的详细内容</li><li>innodb_index_stats： innodb中索引的统计数据</li><li>innodb_table_stats： innodb中表的统计数据</li><li>ndb_binlog_index：binlog相关信息</li><li>plugin：插件相关的表</li><li>proc：基础信息相关的表</li><li>proxies_priv：数据库用户权限表</li><li>servers：节点相关信息</li><li>slave_master_info、slave_relay_log_info、slave_worker_info：主从相关表</li><li>slow_log：慢日志记录表</li><li>tables_priv：表权限表</li><li>time_zone、time_zone_leap_second、time_zone_name、time_zone_transition、time_zone_transition_type：时间相关表</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用sql语句大全</title>
      <link href="/2019/05/21/SQL%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/05/21/SQL%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>创建数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> dbname;</span><br></pre></td></tr></table></figure><p>选择数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">dbname</span>;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`book`</span>(</span><br><span class="line">   <span class="symbol">`id`</span> INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   <span class="symbol">`title`</span> VARCHAR(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">   <span class="symbol">`author`</span> VARCHAR(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="symbol">`date`</span> DATE,</span><br><span class="line">   <span class="keyword">INDEX</span> title_index(<span class="built_in">title</span>(<span class="number">100</span>)),</span><br><span class="line">   <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> ( <span class="symbol">`id`</span> )</span><br><span class="line">)ENGINE=InnoDB;</span><br></pre></td></tr></table></figure><ul><li>AUTO_INCREMENT定义列为自增的属性，默认自增1，一般用作主键</li><li>NOT NULL指定该字段不能为空， 在操作数据库时如果输入该字段的数据为NULL ，就会报错</li><li>PRIMARY KEY关键字用于定义列为主键</li><li>ENGINE 设置存储引擎</li><li>CHARSET 设置编码</li><li>INDEX设置列为普通索引、也可以使用UNIQUE指定唯一索引、 FULLTEXT指定全文索引</li></ul><p>添加表字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">add</span> press <span class="built_in">varchar</span>;</span><br></pre></td></tr></table></figure><p>删除表字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">drop</span> press;</span><br></pre></td></tr></table></figure><p>修改表字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">modify</span> press <span class="built_in">char</span>;</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> book;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">RENAME</span> <span class="keyword">TO</span> book1;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> book;</span><br></pre></td></tr></table></figure><p>创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> title_index <span class="keyword">ON</span> book(title(<span class="number">100</span>)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> book <span class="keyword">ADD</span> <span class="keyword">INDEX</span> title_index(title);</span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> title_index <span class="keyword">ON</span> book;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，....);#值的顺序与字段在表中的顺序一致</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book（<span class="built_in">title</span>,author）</span><br><span class="line">     <span class="keyword">values</span>(<span class="string">'Java学习路线'</span>，<span class="string">'Java学习录'</span>);#为指定字段赋值</span><br><span class="line">   </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book（<span class="built_in">title</span>,author）</span><br><span class="line">     <span class="keyword">select</span> <span class="built_in">title</span>,author <span class="keyword">from</span> test;#copy另一张表的数据</span><br></pre></td></tr></table></figure><p>修改表数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> title=<span class="string">'学习笔记'</span>,<span class="built_in">date</span>=<span class="string">'2019-05-21'</span></span><br></pre></td></tr></table></figure><p>删除表数据</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">truncate table book;<span class="comment">#删除表中所有数据</span></span><br><span class="line"></span><br><span class="line">delete <span class="keyword">from</span> book <span class="keyword">where</span> xx=yy;<span class="comment">#根据条件删除表中数据</span></span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book;</span><br></pre></td></tr></table></figure><p>常用函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">character_length</span><span class="params">(<span class="string">"title"</span>)</span></span> #字符串title的字符数</span><br><span class="line"><span class="function"><span class="title">concat</span><span class="params">(<span class="string">"title"</span>,<span class="string">"author"</span>)</span></span> #将字符串title和author合并为一个字符串</span><br><span class="line"><span class="function"><span class="title">concat_ws</span><span class="params">(<span class="string">","</span><span class="string">"title"</span>,<span class="string">"author"</span>)</span></span> #将字符串title和author合并为一个字符串，合并时使用逗号作为分隔符</span><br><span class="line"><span class="function"><span class="title">lower</span><span class="params">(<span class="string">"title"</span>)</span></span> #将字符串title的内容转为小写</span><br><span class="line"><span class="function"><span class="title">upper</span><span class="params">(<span class="string">"title"</span>)</span></span> #将字符串title的内容转为大写</span><br><span class="line"><span class="function"><span class="title">reverse</span><span class="params">(<span class="string">"title"</span>)</span></span> #反转字符串title</span><br><span class="line"><span class="function"><span class="title">abs</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的绝对值</span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的平均值</span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的总记录数</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的最大值</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的最小值</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(<span class="string">"price"</span>)</span></span> #求price的和</span><br><span class="line"><span class="function"><span class="title">rand</span><span class="params">()</span></span>#返回<span class="number">0</span>-<span class="number">1</span>之间的随机数</span><br><span class="line"><span class="function"><span class="title">adddate</span><span class="params">(<span class="string">"date"</span>,n)</span></span> #date加上n天的时间</span><br><span class="line"><span class="function"><span class="title">addtime</span><span class="params">(<span class="string">"date"</span>,n)</span></span> #date加上n秒的时间</span><br><span class="line"><span class="function"><span class="title">curdate</span><span class="params">()</span></span> #当前日期</span><br><span class="line"><span class="function"><span class="title">current_time</span><span class="params">()</span></span> #当前时间</span><br><span class="line"><span class="function"><span class="title">current_timestamp</span><span class="params">()</span></span> #当前日期时间</span><br><span class="line"><span class="function"><span class="title">datediff</span><span class="params">(d1,d2)</span></span> #d1和d2相隔的天数</span><br><span class="line"><span class="function"><span class="title">period_diff</span><span class="params">(d1,d2)</span></span> #d1和d2相隔的月数</span><br><span class="line"><span class="function"><span class="title">subdate</span><span class="params">(d,n)</span></span> #d减去n天的日期</span><br><span class="line"><span class="function"><span class="title">subtime</span><span class="params">(d,n)</span></span> #d减去n秒的时间</span><br><span class="line"><span class="function"><span class="title">connection_id</span><span class="params">()</span></span>#服务器当前连接数</span><br></pre></td></tr></table></figure><p>case when</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> expression</span><br><span class="line">    <span class="keyword">WHEN</span> condition1 <span class="keyword">THEN</span> result1</span><br><span class="line">    <span class="keyword">WHEN</span> condition2 <span class="keyword">THEN</span> result2</span><br><span class="line">   ..</span><br><span class="line">    <span class="keyword">WHEN</span> conditionN <span class="keyword">THEN</span> resultN</span><br><span class="line">    <span class="keyword">ELSE</span> result</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="meta">#CASE 表示函数开始</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">END</span> 表示函数结束</span></span><br><span class="line"><span class="meta">#如果 condition1 成立</span></span><br><span class="line"><span class="meta">#则返回 result1</span></span><br><span class="line"><span class="meta">#如果 condition2 成立</span></span><br><span class="line"><span class="meta">#则返回 result2</span></span><br><span class="line"><span class="meta">#当全部不成立则返回 result</span></span><br><span class="line"><span class="meta">#而当有一个成立之后，后面的就不执行了</span></span><br></pre></td></tr></table></figure><p>IF</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">IF</span>(expr,<span class="built_in">v1</span>,<span class="built_in">v2</span>)#如果表达式 expr 成立，返回结果 <span class="built_in">v1</span>；否则，返回结果 <span class="built_in">v2</span>。</span><br></pre></td></tr></table></figure><p>IFNULL</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">IFNULL</span>(<span class="built_in">v1</span>,<span class="built_in">v2</span>)#如果 <span class="built_in">v1</span> 的值不为 NULL，则返回 <span class="built_in">v1</span>，否则返回 <span class="built_in">v2</span></span><br></pre></td></tr></table></figure><p>去除结果集中的重复元素</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(<span class="built_in">title</span>) <span class="keyword">from</span> book;</span><br></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">where</span> title=<span class="string">"Java%"</span>;<span class="meta">#查询以Java开头的数据，只有这样使用索引以下两种不使用索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">where</span> title=<span class="string">"%Java"</span>;<span class="meta">#查询以Java结尾的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">where</span> title=<span class="string">"%Java%"</span>;<span class="meta">#查询包含Java的数据</span></span><br></pre></td></tr></table></figure><p>合并结果集</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> title from book1 <span class="class"><span class="keyword">union</span> <span class="title">select</span> <span class="title">title</span> <span class="title">from</span> <span class="title">book2</span></span></span><br></pre></td></tr></table></figure><p>连接(left jion/right jion/jion/逗号)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book1 left jion book2 <span class="keyword">where</span> xx=yy <span class="meta">#获取左表所有记录，即使右表没有对应匹配的记录</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book1 right jion book2 <span class="keyword">where</span> xx=yy <span class="meta">#获取右表所有记录，即使左表没有对应匹配的记录</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book1 jion book2 <span class="keyword">where</span> xx=yy <span class="meta">#获取两个表中字段匹配关系的记录</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book1 , book2 <span class="keyword">where</span> xx=yy<span class="meta">#同jion</span></span><br></pre></td></tr></table></figure><p>分组</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">count</span>(<span class="params">*</span>) <span class="keyword">from</span> book <span class="keyword">group</span> <span class="keyword">by</span> author </span>=<span class="string">'Java学习录'</span> <span class="meta">#查询公众号Java学习录一共写了多少篇文章</span></span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">date</span> <span class="keyword">ASC</span>#默认就是<span class="keyword">ASC</span> 可省略，按<span class="built_in">date</span>升序排列</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">date</span> <span class="keyword">DESC</span>#按<span class="built_in">date</span>降序排列</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table <span class="keyword">limit</span> <span class="number">5</span>; #返回前5行</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>; #同上，返回前5行</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">10</span>; #返回6-15行</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务监控神器Prometheus的安装部署</title>
      <link href="/2019/05/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E7%A5%9E%E5%99%A8Prometheus%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E7%A5%9E%E5%99%A8Prometheus%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：如何在k8s下搭建Prometheus+grafana的监控环境</p></blockquote><h4><span id="基本概念">基本概念</span></h4><p>Prometheus提供了容器和云原生领域数据搜集、存储、处理、可视化和告警一套完整的解决方案，最初时是由SoundCloud公司开发的。自2012年开源以来社区成员就不断递增。如今的Prometheus已经发展到继Kubernetes后第2个正式加入CNCF基金会的项目</p><h4><span id="prometheus的特点">Prometheus的特点？</span></h4><ul><li>多维的数据模型（基于时间序列的k/v键值对）。</li><li>灵活的查询及聚合语句（PromQL）。</li><li>不依赖分布式存储，节点自治。</li><li>基于HTTP的pull模式采集时间序列数据。</li><li>可以使用pushgateway（prometheus的可选中间件）实现push模式。</li><li>可以使用动态服务发现或静态配置采集的目标机器。</li><li>支持多种图形及仪表盘。</li></ul><h4><span id="prometheus可以监控什么">Prometheus可以监控什么？</span></h4><ul><li>k8s、docker、mysql、redis、es、consul、rabbitmq、zabbix等等</li></ul><h4><span id="prometheus架构图">Prometheus架构图</span></h4><p><img src="/2019/05/20/微服务监控神器Prometheus的安装部署/1.jpg" alt="1"></p><h4><span id="prometheus安装部署">Prometheus安装部署</span></h4><h6><span id="helm-安装">Helm 安装</span></h6><p>Helm 是一个命令行下的客户端工具。主要用于 Kubernetes 应用程序 Chart 的创建、打包、发布以及创建和管理本地和远程的 Chart 仓库。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-rc.2-linux-amd64.tar.gz</span></span><br><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># tar -zxvf helm-v2.14.0-rc.2-linux-amd64.tar.gz</span></span><br><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># cp linux-amd64/helm /usr/local/bin/</span></span><br><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># helm version</span></span><br><span class="line">Client: &amp;version.Version&#123;SemVer:<span class="string">"v2.13.1-rc.2"</span>, GitCommit:<span class="string">"05811b84a3f93603dd6c2fcfe57944dfa7ab7fd0"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br><span class="line">Error: could <span class="literal">not</span> find tiller</span><br></pre></td></tr></table></figure><h6><span id="tiller-服务器安装">Tiller 服务器安装</span></h6><p>Tiller 是 Helm 的服务端，部署在 Kubernetes 集群中。Tiller 用于接收 Helm 的请求，并根据 Chart 生成 Kubernetes 的部署文件（ Helm 称为 Release ），然后提交给 Kubernetes 创建应用。Tiller 还提供了 Release 的升级、删除、回滚等一系列功能。</p><p>创建rbac-config.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># kubectl apply -f rbac-config.yaml </span></span><br><span class="line">serviceaccount/tiller created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/tiller created</span><br></pre></td></tr></table></figure><p>使用阿里云镜像进行安装</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]<span class="comment"># helm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.13.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br><span class="line"></span><br><span class="line">Creating <span class="regexp">/root/</span>.helm</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/repository</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/repository/cache</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/repository/local</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/plugins</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/starters</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/cache/archive</span><br><span class="line">Creating <span class="regexp">/root/</span>.helm/repository/repositories.yaml</span><br><span class="line">Adding stable repo <span class="keyword">with</span> URL: https:<span class="regexp">//kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br><span class="line"><span class="regexp">Adding local repo with URL: http://</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8879</span>/charts</span><br><span class="line">$HELM_HOME has been configured at <span class="regexp">/root/</span>.helm.</span><br><span class="line">Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.</span><br><span class="line">Please note: <span class="keyword">by</span> <span class="keyword">default</span>, Tiller <span class="keyword">is</span> deployed <span class="keyword">with</span> an insecure <span class="string">'allow unauthenticated users'</span> policy.</span><br><span class="line">To prevent <span class="keyword">this</span>, run `helm init` <span class="keyword">with</span> the --tiller-tls-verify flag.</span><br><span class="line">For more information <span class="literal">on</span> securing your installation see: https:<span class="regexp">//docs.helm.sh/using_helm/<span class="comment">#securing-your-helm-installation</span></span></span><br><span class="line"><span class="regexp">Happy Helming!</span></span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">helm</span> <span class="selector-tag">version</span></span><br><span class="line"><span class="selector-tag">Client</span>: <span class="selector-tag">&amp;</span><span class="selector-tag">version</span><span class="selector-class">.Version</span>&#123;<span class="attribute">SemVer</span>:<span class="string">"v2.13.1"</span>, <span class="attribute">GitCommit</span>:<span class="string">"05811b84a3f93603dd6c2fcfe57944dfa7ab7fd0"</span>, <span class="attribute">GitTreeState</span>:<span class="string">"clean"</span>&#125;</span><br><span class="line"><span class="attribute">Server</span>: &amp;version.Version&#123;<span class="attribute">SemVer</span>:<span class="string">"v2.13.1"</span>, <span class="attribute">GitCommit</span>:<span class="string">"05811b84a3f93603dd6c2fcfe57944dfa7ab7fd0"</span>, <span class="attribute">GitTreeState</span>:<span class="string">"clean"</span>&#125;</span><br><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">helm</span> <span class="selector-tag">repo</span> <span class="selector-tag">list</span></span><br><span class="line"><span class="selector-tag">NAME</span>    <span class="selector-tag">URL</span>                                                   </span><br><span class="line"><span class="selector-tag">stable</span>  <span class="selector-tag">https</span>:<span class="comment">//kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br><span class="line"><span class="selector-tag">local</span>   <span class="selector-tag">http</span>:<span class="comment">//127.0.0.1:8879/charts</span></span><br></pre></td></tr></table></figure><h6><span id="部署-prometheus-operator">部署 Prometheus Operator</span></h6><p>创建命名空间</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># kubectl create namespace monitoring</span></span><br></pre></td></tr></table></figure><p>下载Prometheus Operator</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@syj <span class="symbol">~]# wget https</span>:<span class="comment">//github.com/coreos/prometheus-operator/archive/release-0.29.zip</span></span><br></pre></td></tr></table></figure><p>将下载下来的依赖包解压并重命名为prometheus-operator并cd到此目录<br>安装prometheus相关内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm install --name prometheus-operator --<span class="builtin-name">set</span> <span class="attribute">rbacEnable</span>=<span class="literal">true</span> <span class="attribute">--namespace</span>=monitoring helm/prometheus-operator</span><br><span class="line">helm install --name prometheus --<span class="builtin-name">set</span> serviceMonitorsSelector.<span class="attribute">app</span>=prometheus --<span class="builtin-name">set</span> ruleSelector.<span class="attribute">app</span>=prometheus <span class="attribute">--namespace</span>=monitoring helm/prometheus</span><br><span class="line">helm install --name alertmanager <span class="attribute">--namespace</span>=monitoring helm/alertmanager</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]# kubectl get pod -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">alertmanager-alertmanager<span class="number">-0</span>            <span class="number">2</span>/<span class="number">2</span>     Running   <span class="number">0</span>          <span class="number">58</span>s</span><br><span class="line">prometheus-operator<span class="number">-545</span>b59ffc9<span class="number">-6</span>g7dg   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">6</span>m32s</span><br><span class="line">prometheus-prometheus<span class="number">-0</span>                <span class="number">3</span>/<span class="number">3</span>     Running   <span class="number">1</span>          <span class="number">3</span>m31s</span><br><span class="line">[root@syj ~]# kubectl get svc -n monitoring</span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">alertmanager            ClusterIP   <span class="number">10.98</span><span class="number">.237</span><span class="number">.7</span>      &lt;none&gt;        <span class="number">9093</span>/TCP            <span class="number">87</span>s</span><br><span class="line">alertmanager-operated   ClusterIP   None             &lt;none&gt;        <span class="number">9093</span>/TCP,<span class="number">6783</span>/TCP   <span class="number">87</span>s</span><br><span class="line">prometheus              ClusterIP   <span class="number">10.104</span><span class="number">.185</span><span class="number">.104</span>   &lt;none&gt;        <span class="number">9090</span>/TCP            <span class="number">4</span>m</span><br><span class="line">prometheus-operated     ClusterIP   None             &lt;none&gt;        <span class="number">9090</span>/TCP            <span class="number">4</span>m</span><br></pre></td></tr></table></figure><p>安装 kube-prometheus</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]# mkdir -p helm<span class="regexp">/kube-prometheus/</span>charts</span><br><span class="line">[root@syj ~]# helm <span class="keyword">package</span> -d helm<span class="regexp">/kube-prometheus/</span>charts helm<span class="regexp">/alertmanager helm/g</span>rafana helm<span class="regexp">/prometheus  helm/</span>exporter-kube-dns \</span><br><span class="line">&gt; helm<span class="regexp">/exporter-kube-scheduler helm/</span>exporter-kubelets helm<span class="regexp">/exporter-node helm/</span>exporter-kube-controller-manager \</span><br><span class="line">&gt; helm<span class="regexp">/exporter-kube-etcd helm/</span>exporter-kube-state helm<span class="regexp">/exporter-coredns helm/</span>exporter-kubernetes</span><br></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">helm</span> <span class="comment">install</span> <span class="comment">helm/kube</span><span class="literal">-</span><span class="comment">prometheus</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">kube</span><span class="literal">-</span><span class="comment">prometheus</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">namespace</span> <span class="comment">monitoring</span></span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]# kubectl get svc -n monitoring</span><br><span class="line">NAME                                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGE</span><br><span class="line">alertmanager                          ClusterIP   <span class="number">10.98</span><span class="number">.237</span><span class="number">.7</span>      &lt;none&gt;        <span class="number">9093</span>/TCP            <span class="number">34</span>m</span><br><span class="line">alertmanager-operated                 ClusterIP   None             &lt;none&gt;        <span class="number">9093</span>/TCP,<span class="number">6783</span>/TCP   <span class="number">34</span>m</span><br><span class="line">kube-prometheus                       ClusterIP   <span class="number">10.101</span><span class="number">.249</span><span class="number">.82</span>    &lt;none&gt;        <span class="number">9090</span>/TCP            <span class="number">29</span>s</span><br><span class="line">kube-prometheus-alertmanager          ClusterIP   <span class="number">10.100</span><span class="number">.29</span><span class="number">.63</span>     &lt;none&gt;        <span class="number">9093</span>/TCP            <span class="number">29</span>s</span><br><span class="line">kube-prometheus-exporter-kube-<span class="section">state</span>   ClusterIP   <span class="number">10.98</span><span class="number">.91</span><span class="number">.146</span>     &lt;none&gt;        <span class="number">80</span>/TCP              <span class="number">29</span>s</span><br><span class="line">kube-prometheus-exporter-node         ClusterIP   <span class="number">10.98</span><span class="number">.34</span><span class="number">.11</span>      &lt;none&gt;        <span class="number">9100</span>/TCP            <span class="number">29</span>s</span><br><span class="line">kube-prometheus-grafana               ClusterIP   <span class="number">10.108</span><span class="number">.208</span><span class="number">.247</span>   &lt;none&gt;        <span class="number">80</span>/TCP              <span class="number">29</span>s</span><br><span class="line">prometheus                            ClusterIP   <span class="number">10.104</span><span class="number">.185</span><span class="number">.104</span>   &lt;none&gt;        <span class="number">9090</span>/TCP            <span class="number">36</span>m</span><br><span class="line">prometheus-operated                   ClusterIP   None             &lt;none&gt;        <span class="number">9090</span>/TCP            <span class="number">36</span>m</span><br></pre></td></tr></table></figure><p>将grafana的Service类型改为NodePort</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl patch svc kube-prometheus-grafana -p <span class="string">'&#123;"</span>spec<span class="string">":&#123;"</span><span class="built_in">type</span><span class="string">":"</span>NodePort<span class="string">"&#125;&#125;'</span> -n monitoring</span><br></pre></td></tr></table></figure><p>此时访问grafana的默认端口31106即可：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//ip:31106</span></span><br></pre></td></tr></table></figure><p>安装过程参考文章：<a href="https://blog.csdn.net/wangzan18/article/details/85270816" target="_blank" rel="noopener">https://blog.csdn.net/wangzan18/article/details/85270816</a></p><p>grafana的各种模板可参考<br><a href="https://grafana.com/dashboards" target="_blank" rel="noopener">https://grafana.com/dashboards</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li><li><a href="https://mp.weixin.qq.com/s/uDftoMTwJqk7H9bfQaa0sw" target="_blank" rel="noopener">JVM系列文章汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM系列文章汇总</title>
      <link href="/2019/05/20/JVM%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/"/>
      <url>/2019/05/20/JVM%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/o3ZxvYL12C7B89rhVQgG3A" target="_blank" rel="noopener">JVM中运行时数据区中的堆、栈、方法区等区域的特性介绍</a></p><p><a href="https://mp.weixin.qq.com/s/ZupB8WWAv53LLtdWDXjvHw" target="_blank" rel="noopener">Java中class文件的组成结构</a></p><p><a href="https://mp.weixin.qq.com/s/U38_83GXVi3Nl88Wls3gYA" target="_blank" rel="noopener">JVM的类加载生命周期介绍</a></p><p><a href="https://mp.weixin.qq.com/s/6iBL8l2sCGsk4JIU3LKTiQ" target="_blank" rel="noopener">Java堆、新生代老年代的特点、堆中的内存分配策略</a></p><p><a href="https://mp.weixin.qq.com/s/pxOxIOZ0CqaWE7XNc6fipw" target="_blank" rel="noopener">JVM垃圾收集算法详解</a></p><p><a href="https://mp.weixin.qq.com/s/EX2-hBSwrRQyYqc_WQPc_w" target="_blank" rel="noopener">JVM各个垃圾收集器的简单介绍及常用参数详解</a></p><p><a href="https://mp.weixin.qq.com/s/TlXpGxB8OONhaMSEDtI4PQ" target="_blank" rel="noopener">JVM中的内存溢出\OOM的原因及解决方案</a></p><p><a href="https://mp.weixin.qq.com/s/Q6y0Rrn_mbZCsQrB4eKI5g" target="_blank" rel="noopener">浅谈Java类加载器ClassLoader以及双亲委派模式</a></p><p><a href="https://mp.weixin.qq.com/s/7nqFegi7O_vNhApAJMu0ag" target="_blank" rel="noopener">JVM常用调优参数</a></p><p><a href="https://mp.weixin.qq.com/s/s8n2V36m6onkMAvru5cuiQ" target="_blank" rel="noopener">Java虚拟机是怎么new的对象</a></p><p><a href="https://mp.weixin.qq.com/s/_PoQL5XqYozwonAsDgC8rg" target="_blank" rel="noopener">JVM内存模型</a></p><p><a href="https://mp.weixin.qq.com/s/pPicUIwvALHIace0nzrfIw" target="_blank" rel="noopener">JVM性能分析神器-VisualVM</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> JVM性能分析神器-VisualVM </title>
      <link href="/2019/05/15/JVM%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A5%9E%E5%99%A8-VisualVM/"/>
      <url>/2019/05/15/JVM%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%A5%9E%E5%99%A8-VisualVM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：JVM性能调优内存分析神器VisualVM的介绍与使用</p></blockquote><h5><span id="基本概念">基本概念</span></h5><p>JVM本身为我们提供了很多性能监控的工具，其中有基于命令行的也有基于图形用户界面的，而个人感觉VisualVM就是其中最优秀的一个工具。</p><p>使用VisualVM我们可以做这些事：</p><ul><li><p>生成和分析海量数据</p></li><li><p>跟踪内存泄漏</p></li><li><p>监控垃圾回收器</p></li><li><p>执行内存、线程、CPU分析</p></li><li><p>还有很强大的插件库</p></li></ul><p>当然，这么牛逼其实是有原因的，VisualVM其实本身是基于这些工具的：jstat、JConsole、jstack、 jmap、 jinfo</p><h5><span id="本地使用">本地使用</span></h5><p>使用VisualVM无需单独下载安装，它就在JDK的bin目录里，双击jvisualvm.exe就可以打开。</p><p>打开之后就可以看到在左侧本地标签页下有当前本机启动的一些Java程序，选中其中一个程序后右侧概述标签页会显示当前程序的一些基本的信息<br><img src="/2019/05/15/JVM性能分析神器-VisualVM/1.jpg" alt="5"></p><p>接下来监视标签页可以观看当前程序的CPU、内存、类的加载情况以及线程的相关信息。在此标签页还可以选择执行垃圾回收以及dump堆<br><img src="/2019/05/15/JVM性能分析神器-VisualVM/2.png" alt="5"></p><p>接下来线程标签页可以查看线程的详细信息以及dump线程</p><p><img src="/2019/05/15/JVM性能分析神器-VisualVM/3.jpg" alt="5"><br>然后是抽样器，可以进行CPU和内存的性能数据的收集<br><img src="/2019/05/15/JVM性能分析神器-VisualVM/4.png" alt="5"></p><h5><span id="使用visualvm监控服务器上的java程序">使用VisualVM监控服务器上的Java程序</span></h5><p>想要监控服务器上的Java程序就需要在启动时增加一下启动参数了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java -Djava<span class="selector-class">.rmi</span><span class="selector-class">.server</span><span class="selector-class">.hostname</span>=你的服务器ip</span><br><span class="line">-Dcom<span class="selector-class">.sun</span><span class="selector-class">.management</span><span class="selector-class">.jmxremote</span></span><br><span class="line">-Dcom<span class="selector-class">.sun</span><span class="selector-class">.management</span><span class="selector-class">.jmxremote</span><span class="selector-class">.port</span>=监控端口，不是程序端口</span><br><span class="line">-Dcom<span class="selector-class">.sun</span><span class="selector-class">.management</span><span class="selector-class">.jmxremote</span><span class="selector-class">.authenticate</span>=false</span><br><span class="line">-Dcom<span class="selector-class">.sun</span><span class="selector-class">.management</span><span class="selector-class">.jmxremote</span><span class="selector-class">.ssl</span>=false  </span><br><span class="line">-jar demo-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>紧接着就可以在左侧远程标签上右键选择添加远程主机，主机名填写远程ip，接着右键刚添加的主机选择添加JMX连接，输入远程端口就可以进入远程服务器上程序的监控页面。具体内容和本地相似这里就不再陈述</p><h5><span id="其他">其他</span></h5><p>接下来左侧还包含两个功能，解析dump文件和快照文件。再有一个比较神奇的地方就是它的插件功能，点击上方工具选择插件-可用插件会有一些非常神奇的插件等你去探索</p><p><img src="/2019/05/15/JVM性能分析神器-VisualVM/5.jpg" alt="5"></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java虚拟机是怎么new的对象？ </title>
      <link href="/2019/05/14/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88new%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%9F/"/>
      <url>/2019/05/14/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88new%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Java中的new命令之后发生的事</p></blockquote><h6><span id="类加载检查">类加载检查</span></h6><p>java虚拟机在遇到一条 new 指令时，首先会检查是否能在常量池中定位到这个类的符号引用，并且是否已被加载过、解析和初始化过。如果没有，那必须先执行类加载过程</p><p>类加载的相关知识可参考：<a href="https://mp.weixin.qq.com/s/U38_83GXVi3Nl88Wls3gYA" target="_blank" rel="noopener">JVM的类加载机制</a></p><h6><span id="分配内存">分配内存</span></h6><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。</p><p>分配方式有 指针碰撞 和 空闲列表 两种</p><ul><li><p>指针碰撞：Java堆中的内存是规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，分配内存也就是把指针向空闲空间那边移动一段与内存大小相等的距离。</p></li><li><p>空闲列表：Java堆中的内存不是规整的，已使用的内存和空闲的内存相互交错，就没有办法简单的进行指针碰撞了。虚拟机必须维护一张列表，记录哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录</p></li></ul><p>Java 堆内存是否规整，取决于 GC 的垃圾回收算法，在JVM中标记压缩、复制算法的内存是规整的、而标记清除则是不规整的</p><p>垃圾回收算法相关知识可参考：<a href="https://mp.weixin.qq.com/s/pxOxIOZ0CqaWE7XNc6fipw" target="_blank" rel="noopener">JVM垃圾收集算法详解</a></p><h6><span id="内存分配并发问题">内存分配并发问题</span></h6><ul><li><p>CAS操作：CAS是属于原子性操作，更多关于此内容可参考此内容：<a href="https://mp.weixin.qq.com/s/q0tjU4HyzeL1jEqvJLd0ig" target="_blank" rel="noopener">Java原子类操作原理剖析</a></p></li><li><p>TLAB： 为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配</p></li></ul><h6><span id="内存空间初始化">内存空间初始化</span></h6><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值。这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int <span class="attribute">a</span>=1</span><br><span class="line">long <span class="attribute">b</span>=2</span><br><span class="line">实际上在这时被赋值为了</span><br><span class="line"><span class="attribute">a</span>=0</span><br><span class="line"><span class="attribute">b</span>=0L</span><br></pre></td></tr></table></figure><h6><span id="设置对象头">设置对象头</span></h6><p>内存空间初始化完成之后，虚拟机要在对象头中保存以下必要的信息：</p><ul><li><p>这个对象是那个类的实例</p></li><li><p>如何才能找到类的元数据信息</p></li><li><p>对象的哈希码</p></li><li><p>对象的 GC 分代年龄</p></li><li><p>等等</p></li></ul><h6><span id="执行构造方法">执行构造方法</span></h6><p>这里才是我们最熟悉的地方</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> JVM常用参数配置 </title>
      <link href="/2019/05/14/M%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/05/14/M%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：gc、堆、栈、永久区、元数据区的常用参数</p></blockquote><h3><span id="gc基本参数">GC基本参数</span></h3><h6><span id="打印gc简要信息-xxprintgc">打印gc简要信息：-XX:+PrintGC</span></h6><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">GC</span> (<span class="name">System.gc</span>())  <span class="number">198247</span>K-&gt;197248K(<span class="name">261632K</span>), <span class="number">0.0178572</span> secs]</span><br><span class="line">[<span class="name">Full</span> GC (<span class="name">System.gc</span>())  <span class="number">197248</span>K-&gt;197184K(<span class="name">261632K</span>), <span class="number">0.0842625</span> secs]</span><br></pre></td></tr></table></figure><p>上方结果描述：</p><p>分别是GC和Full GC释放的空间以及所用的时间</p><h6><span id="打印gc的详细信息-xxprintgcdetails">打印gc的详细信息 : -XX:+PrintGCDetails</span></h6><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">18944</span>K, used <span class="number">164</span>K [<span class="number">0x00000000eb200000</span>, <span class="number">0x00000000ec700000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">16384</span>K, <span class="number">1</span>% used [<span class="number">0x00000000eb200000</span>,<span class="number">0x00000000eb2290d0</span>,<span class="number">0x00000000ec200000</span>)</span><br><span class="line">  from space <span class="number">2560</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ec200000</span>,<span class="number">0x00000000ec200000</span>,<span class="number">0x00000000ec480000</span>)</span><br><span class="line">  to   space <span class="number">2560</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec700000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">292352</span>K, used <span class="number">246336</span>K [<span class="number">0x00000000c1600000</span>, <span class="number">0x00000000d3380000</span>, <span class="number">0x00000000eb200000</span>)</span><br><span class="line">  object space <span class="number">292352</span>K, <span class="number">84</span>% used [<span class="number">0x00000000c1600000</span>,<span class="number">0x00000000d0690290</span>,<span class="number">0x00000000d3380000</span>)</span><br><span class="line"> Metaspace       used <span class="number">2866</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  class space    used <span class="number">308</span>K, capacity <span class="number">386</span>K, committed <span class="number">512</span>K, reserved <span class="number">1048576</span>K</span><br></pre></td></tr></table></figure><p>上方结果描述：</p><ul><li><p>第2行：新生代总内存和已用内存</p></li><li><p>第3、4、5行：新生代各个区总内存和已用内存，这里eden:from:to的比例为8:1:1</p></li><li><p>第6行：老年代总内存和已用内存</p></li></ul><h6><span id="指定gc日志的位置-xloggcdapplogapplog">指定gc日志的位置： -Xloggc:D:\appLog\app.log</span></h6><h6><span id="打印gc前后的堆栈信息-xxprintheapatgc">打印gc前后的堆栈信息： -XX:+PrintHeapAtGC</span></h6><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen      total 18944K, used 1639K [<span class="number">0x00000000eb200000</span>, <span class="number">0x00000000ec700000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">10</span>% used [<span class="number">0x00000000eb200000</span>,<span class="number">0x00000000eb399c28</span>,<span class="number">0x00000000ec200000</span>)</span><br><span class="line">  from space 2560K, <span class="number">0</span>% used [<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec700000</span>)</span><br><span class="line">  to   space 2560K, <span class="number">0</span>% used [<span class="number">0x00000000ec200000</span>,<span class="number">0x00000000ec200000</span>,<span class="number">0x00000000ec480000</span>)</span><br><span class="line"> ParOldGen       total 491008K, used 442368K [<span class="number">0x00000000c1600000</span>, <span class="number">0x00000000df580000</span>, <span class="number">0x00000000eb200000</span>)</span><br><span class="line">  object space 491008K, <span class="number">90</span>% used [<span class="number">0x00000000c1600000</span>,<span class="number">0x00000000dc600090</span>,<span class="number">0x00000000df580000</span>)</span><br><span class="line"> Metaspace       used 2860K, capacity 4486K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 307K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line"> [Full GC (System.gc())  443064K-&gt;442944K(509952K), <span class="number">0.1634157</span> secs]</span><br><span class="line">Heap after GC invocations=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen      total 18944K, used 664K [<span class="number">0x00000000eb200000</span>, <span class="number">0x00000000ec700000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 16384K, <span class="number">0</span>% used [<span class="number">0x00000000eb200000</span>,<span class="number">0x00000000eb200000</span>,<span class="number">0x00000000ec200000</span>)</span><br><span class="line">  from space 2560K, <span class="number">25</span>% used [<span class="number">0x00000000ec200000</span>,<span class="number">0x00000000ec2a6030</span>,<span class="number">0x00000000ec480000</span>)</span><br><span class="line">  to   space 2560K, <span class="number">0</span>% used [<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec480000</span>,<span class="number">0x00000000ec700000</span>)</span><br><span class="line"> ParOldGen       total 491008K, used 442376K [<span class="number">0x00000000c1600000</span>, <span class="number">0x00000000df580000</span>, <span class="number">0x00000000eb200000</span>)</span><br><span class="line">  object space 491008K, <span class="number">90</span>% used [<span class="number">0x00000000c1600000</span>,<span class="number">0x00000000dc602090</span>,<span class="number">0x00000000df580000</span>)</span><br><span class="line"> Metaspace       used 2860K, capacity 4486K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 307K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方结果描述：</p><ul><li><p>1-9行是gc之前的新生代、老年代和元空间（这是jdk8更新的，之前是永久区）信息</p></li><li><p>第10行打印了一次full gc的相关信息</p></li></ul><h6><span id="监控类的加载-xxtraceclassloadingpreorder">监控类的加载：-XX:+TraceClassLoadingPreorder</span></h6><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Opened <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.Object from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.io.Serializable from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.Comparable from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.CharSequence from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.String from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.reflect.AnnotatedElement from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.reflect.GenericDeclaration from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.reflect.Type from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">[Loaded java.lang.Class from <span class="symbol">C:</span>\Program Files (x86)\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>]</span></span><br><span class="line">。。。。。。。</span><br></pre></td></tr></table></figure><h3><span id="堆栈参数">堆栈参数</span></h3><h6><span id="堆最大值-xmx20m">堆最大值： -Xmx20m</span></h6><h6><span id="堆的最小值-xms5m">堆的最小值： -Xms5m</span></h6><h6><span id="获取系统堆内存信息">获取系统堆内存信息</span></h6><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"堆最大空间："</span> + <span class="keyword">Runtime</span>.getRuntime().maxMemory() <span class="regexp">/ 1024 /</span> <span class="number">1024</span> + <span class="string">"M"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"空闲空间："</span> + <span class="keyword">Runtime</span>.getRuntime().freeMemory() <span class="regexp">/ 1024 /</span> <span class="number">1024</span> + <span class="string">"M"</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"可用空间："</span> + <span class="keyword">Runtime</span>.getRuntime().totalMemory() <span class="regexp">/ 1024 /</span> <span class="number">1024</span> + <span class="string">"M"</span>);</span><br></pre></td></tr></table></figure><h6><span id="新生代的内存-xmn10m">新生代的内存： -Xmn10m</span></h6><p>eden区和两个s区的和，正常情况下是eden:s0:s1=8:1:1</p><h6><span id="新生代占老年的的比值-xxnewratio6">新生代占老年的的比值：-XX:NewRatio=6</span></h6><p>新生代与老年代的比率为1:6，正常情况下是新生代:老年代=3:8</p><h6><span id="两个s区与eden的比值-xxsurvivorratio6">两个s区与eden的比值：-XX:SurvivorRatio=6</span></h6><p>一个s区与eden的比率为1:6</p><h6><span id="发生堆溢出时异常文件路径-xxheapdumppathdapplogadump">发生堆溢出时异常文件路径：-XX:HeapDumpPath=d:\appLog\a.dump</span></h6><h6><span id="发生堆溢出时候执行的脚本-xxonoutofmemoryerrordash">发生堆溢出时候执行的脚本：-XX:OnOutOfMemoryError=d:\</span></h6><h6><span id="栈的大小-xss10m">栈的大小-Xss10m</span></h6><h6><span id="永久区的初始大小-xxpermsize5m">永久区的初始大小：-XX:PermSize5m</span></h6><h6><span id="永久区的最大大小-xxmaxpermsize5m">永久区的最大大小：-XX:MaxPermSize5m</span></h6><h6><span id="元数据区大小-xxmaxmetaspacesize5m">元数据区大小：-XX:MaxMetaspaceSize=5m</span></h6><p>查看所有参数的示例使用代码参考<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/jvm" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> 浅谈Java类加载器 </title>
      <link href="/2019/05/14/%E8%B0%88Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2019/05/14/%E8%B0%88Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>JDK 默认提供了3种ClassLoader：</p><ul><li><p>Bootstrp Classloader（启动类加载器）<br>由C++编写，它主要负责加载Java的核心类库：</p></li><li><p>%JAVA_HOME%/jre/lib</p></li><li><p>-Xbootclasspath参数指定的路径</p></li><li><p>%JAVA_HOME%/jre/classes中的类</p></li><li><p>需要注意的是这个加载器是虚拟机启动时初始化的，Java程序是无法使用的</p></li></ul><ul><li><p>Extension ClassLoader（扩展类加载器）<br>加载加载扩展类，扩展JVM的类库它主要负责加载以下类库：</p></li><li><pre><code>%JAVA_HOME%/jre/lib/ext目录</code></pre></li><li><pre><code>java.ext.dirs系统变量指定的路径中类库</code></pre></li><li><p>Application ClassLoader （应用程序加载器）<br>Java程序默认的类加载器，主要负责加载classpath所指定的类库</p></li></ul><p>除了以上3个类加载器，开发人员还可以根据自己的需求自己定制实现类加载器</p><p>类加载器之间的层次模型一般是这样的：</p><p><img src="/2019/05/14/谈Java类加载器/1.jpg" alt="1"></p><p>上图展示的类加载器之间的这种层次关系，使用如下代码可证明：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span></span><br><span class="line"><span class="function">        System.<span class="keyword">out</span>.<span class="title">println</span>(<span class="params">ClassLoader.getSystemClassLoader(</span>))</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(ClassLoader.getSystemClassLoader().getParent());</span><br><span class="line">        System.<span class="keyword">out</span>.println(ClassLoader.getSystemClassLoader().getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的依次打印结果为:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppClassLoader<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">ExtClassLoader<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="literal">Null</span></span><br></pre></td></tr></table></figure><p>注意最后的null值应该是启动类加载器、单因为是C++语言编写的，所以无法获取到相关的信息</p><p>上述的这种层级关系被称为类加载器的双亲委派模型。此模型要求除了最顶层的启动类加载器外，其余的加载都应该有自己的父加载器。</p><p>当一个类加载器在接到加载类的请求时，首先将加载任务委托交给父类加载器，父类加载器又将加载任务向上委托，直到最顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，如果不行就向下传递委托任务，由其子类加载器进行加载。</p><p>其过程可见java.lang.ClassLoader的loadClass()方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Class</span>&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 检查class是否被加载过</span></span><br><span class="line">        <span class="keyword">Class</span>&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//如果父类不为空则委托父类加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//父类为空请求启动类加载器加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// 如果父类抛出异常代表父类无法加载</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//父类没有加载</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用本身的findClass方法加载</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> JVM中的内存溢出详解 </title>
      <link href="/2019/05/08/VM%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/08/VM%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：JVM各区域的内存溢出的原因及解决办法。堆溢出、栈溢出、方法区溢出、直接内存溢出</p></blockquote><p>除了程序计数器外，JVM中的其他区域都可能会发生内存溢出</p><h4><span id="堆溢出">堆溢出</span></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space</span><br></pre></td></tr></table></figure><p>这个异常是由于堆中存在大量的对象，这些对象无法通过垃圾回收进行收集从而导致的堆内存溢出，堆溢出呢，分为两种情况：</p><ul><li><p>内存泄露（大量无用的对象与根节点还具有管理，无法被回收）</p></li><li><p>对象过多</p></li></ul><p>如何解决？</p><ul><li><p>内存泄露情况可以通过工具找出泄露的具体代码然后进行优化</p></li><li><p>对象太多可以适当根据机器的性能使用-Xms -Xmx等参数调整堆的大小</p></li><li><p>优化数据结构，避免内存浪费</p></li></ul><h4><span id="直接内存溢出">直接内存溢出</span></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OutOfMemoryError</span></span><br></pre></td></tr></table></figure><p>直接内存并不属于运行时数据区的一部分。但是也需要占用内存，如果我们在分配内存时把本机的总内存都分配给运行时数据区的各个部分而忽略了直接内存的话就会容易引起直接内存溢出。Java中使用直接内存最多的就是NIO。</p><p>如何解决？</p><ul><li>使用-XX：MaxDirectMemorySize属性指定直接内存的大小</li></ul><h4><span id="方法区溢出">方法区溢出</span></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: PermGen space</span><br></pre></td></tr></table></figure><p>因为方法区主要是负责存放类的相关信息，而且因为gc的次数也不像堆来的频繁，所以当class越来越多的时候就会引起此异常</p><p>如何解决？</p><ul><li>使用-XX:PermSize参数调整方法区的大小</li></ul><p>栈溢出</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">StackOverflowError</span></span><br></pre></td></tr></table></figure><p>由于线程请求的栈深度大于了线程所允许的最大深度而引起的</p><p>如何解决？</p><ul><li>使用-Xss参数调整栈的大小</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutOfMemoryError: unable to <span class="keyword">create</span> <span class="keyword">new</span> <span class="keyword">native</span> <span class="keyword">thread</span></span><br></pre></td></tr></table></figure><p>当创建的线程多到栈的内存不足以支撑时就会引起此异常</p><p>如何解决？</p><ul><li>使用-Xss参数调整栈的大小</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title> JVM垃圾收集器详解 </title>
      <link href="/2019/05/08/M%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/08/M%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：JVM中各垃圾收集器的介绍及常用参数、JVM的两种模式</p></blockquote><h4><span id="串行收集器">串行收集器</span></h4><h6><span id="serial-垃圾收集器">Serial 垃圾收集器</span></h6><p>一个单线程的收集器，使用复制算法。它只会使用一条线程工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程（Stop The Word），直到垃圾收集结束。</p><p>虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是对于单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率</p><h6><span id="serial-old-收集器">Serial Old 收集器</span></h6><p>Serial 垃圾收集器老年代版本，它同样是个单线程的收集器，使用标记-整理算法</p><p>相关参数</p><ul><li>-XX:+UseSerialGC:在新生代和老年代使用的串行收集器</li><li>-XX:SurvivorRatio:设置eden区大小和survivor区大小的比例</li><li><pre><code>-XX:PretenureSizeThreshold:设置大对象直接进入老年代的阀值，当对象的大小超过这个值时，将直接在老年代分配</code></pre></li><li><pre><code>-XX:MaxTenuringThreshold:设置对象进入老年代的年龄的最大值，每一次MinorGC后，对象年龄就加1，任何大于这个年龄的对象，一定会进入老年代</code></pre></li></ul><h4><span id="并行收集器">并行收集器</span></h4><h6><span id="parnew-垃圾收集器">ParNew 垃圾收集器</span></h6><p>Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，在垃圾收集过程中同样也要暂停所有其他的工作线程。</p><p>默认开启和 CPU 数目相同的线程数</p><h6><span id="parallel-scavenge-收集器">Parallel Scavenge 收集器</span></h6><p>新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，它重点关注的是程序达到一个可控制的吞吐量（运行用户代码时间/(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别</p><h6><span id="parallel-old-收集器">Parallel Old 收集器</span></h6><p>Parallel Scavenge的老年代版本，使用多线程的标记-整理算法</p><p>相关参数</p><ul><li>-XX:+UseParNewGC:在新年代使用并行收集器</li><li>-XX:+UseParallelOldGC:在老年代使用并行收集器</li><li><pre><code>-XX:ParallelGCThreads:设置用于垃圾回收的线程数。通常情况下可以和CPU数量相等，但在CPU数量比较多的情况下，设置相对较小的数值也是合理的。</code></pre></li><li>-XX:MaxGCPauseMillis:设置吞吐量大小，它的值是一个大于0的整数，收集器在工作时，会调整Java堆大小或者其他一些参数，尽可能地把停顿时间控制在MaxGCPauseMillis以内。</li><li><pre><code>-XX:GCTimeRatio:设置吞吐量大小，它的值是一个0到100之间的整数，假设GCTimeRatio的值为n,那么系统将花费不超过1/(1+n)的时间用于垃圾回收</code></pre></li><li>-XX:+UseAdaptiveSizePolicy:打开自适应GC策略，在这种模式下，新生代的大小、eden和survivior的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。</li></ul><h4><span id="并发收集器">并发收集器</span></h4><h6><span id="cms-收集器">CMS 收集器</span></h6><p>这个收集器的目标是为了获取最短垃圾回收停顿时间，它使用多线程的标记-清除算法</p><p>CMS 工作机制</p><ul><li>初始标记，只标记跟节点能直接关联的对象</li><li><pre><code>并发标记，进行根节点跟踪的过程</code></pre></li><li><pre><code>重新标记，为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录</code></pre></li><li><pre><code>并发清除，清除根节点不可达对象</code></pre></li><li><pre><code>由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行</code></pre></li></ul><p>相关参数</p><ul><li>-XX:+UseConcMarkSweepGC:新生代使用并行收集器，老年代使用CMS+串行收集器</li><li>-XX:ParallelCMSThreads:设定CMS的线程数量</li><li>-XX:CMSInitiationgOccupancyFraction:设置CMS收集器在老年代空间被占用多少后触发，默认为68%</li><li>-XX:+UseCMSCompactAtFullCollection:设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理</li><li>-XX:CMSFullGCsBeforeCompaction:设定进行多少次CMS垃圾回收后，进行一次内存压缩</li><li>-XX:+CMSClassUnloadingEnabled:允许对永久区进行回收</li><li>-XX:CMSInitiatingPermOccupancyFraction:当永久区占用率达到这一百分比时，启动CMS回收（前提是-XX:+CMSClassUnloadingEnabled激活了）</li><li>-XX:UseCMSInitiatingOccupancyOnly:表示只在到达阀值的时候才进行CMS回收</li><li>-XX:+CMSIncrementalMode:使用增量模式，比较适合单CPU</li></ul><h6><span id="g1-收集器">G1 收集器</span></h6><p>目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收集器两个最突出的改进是：</p><ul><li>基于标记-压缩算法，不产生内存碎片</li><li>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收</li></ul><p>相关参数</p><ul><li><pre><code>-XX:+UseG1GC:使用G1回收器</code></pre></li><li>-XX:MaxGCPauseMillis:设置最大垃圾收集停顿时间</li><li>-XX:GCPauseIntervalMillis:设置停顿间隔时间</li></ul><h4><span id="jvm启动的两种模式">JVM启动的两种模式</span></h4><ul><li>client模式：开发时默认启动模式</li><li><pre><code>server模式：使用-server强制开启server模式，</code></pre></li></ul><p>两者的主要区别：</p><ul><li><pre><code>server模式下做了大量的优化工作。</code></pre></li><li><pre><code>server模式下应用启动较慢，但在长时间运行情况下，运行速度会越来越快。</code></pre></li><li><pre><code>client模式启动快，但不适合长时间运行。</code></pre></li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> JVM垃圾收集详解 </title>
      <link href="/2019/05/08/JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/05/08/JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：垃圾对象的判定、常见垃圾收集算法</p></blockquote><h4><span id="哪些对象需要回收">哪些对象需要回收</span></h4><p>判断对象是否需要回收的算法有引用计数法和可达性分析法</p><h5><span id="引用计数法">引用计数法</span></h5><p>为每个对象标记一个引用数量，当这个对象被另外一个对象引用时它的引用数据就加一，当另外一个对象释放了对它的引用它的引用数量就减一。当它的引用变为0时意味着没有对象引用，就可以回收了</p><h6><span id="引用计数法存在的问题">引用计数法存在的问题</span></h6><ul><li><p>系统无时无刻不在进行引用的增加和修改，引用和去引用伴随着加减法，非常影响性能</p></li><li><p>很难处理循环引用，例如下图右面三个对象互相持有对方的引用则无法处理</p></li></ul><h5><span id="可达性分析">可达性分析</span></h5><p>通过设置一个跟节点，如果从根节点出发没有任何路径到达一个对象，则标记这个对象为不可达对象，当一个对象被标记了2次不可达对象之后将面临回收</p><h4><span id="垃圾收集算法">垃圾收集算法</span></h4><h5><span id="标记清除法">标记清除法</span></h5><p>首先标记所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象</p><h6><span id="缺点">缺点</span></h6><ul><li><p>标记和清除的效率都不高</p></li><li><p>标记清除后会产生大量的不连续空间</p></li></ul><h5><span id="复制算法">复制算法</span></h5><p>将原有的内存空间分为两块。每次只使用其中一块，在垃圾回收时，将正在使用的内存空间的存活的对象全都复制到未使用的那块内存空间，然后清除正在使用的那块内存，再交换两个角色，完成垃圾回收</p><h6><span id="缺点">缺点</span></h6><ul><li>空间浪费</li></ul><h5><span id="标记压缩法">标记压缩法</span></h5><p>第一步标记阶段与标记清除法一样，标记所有需要回收的对象，接着把所有需要回收的对象全都压缩到内存的一端，之后再进行清理</p><h5><span id="分代收集">分代收集</span></h5><p>分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，然后根据不同域的特点选择不同的算法</p><ul><li><p>新生代因为每次垃圾回收都需要回收大量的对象，故使用复制算法</p></li><li><p>老年代因为每次回收少量对象，使用标记整理对象</p></li></ul><h5><span id="分区收集算法">分区收集算法</span></h5><p>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间 , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java堆 </title>
      <link href="/2019/05/08/Java%E5%A0%86/"/>
      <url>/2019/05/08/Java%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：JVM中的新生代老年代、堆的内存分配策略、深浅堆的概念等</p></blockquote><p>Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。这个区域是用来存放对象实例的，几乎所有对象实例都会在这里分配内存。平常我们听说的垃圾收集、GC等名词都是由堆发展而来的</p><h4><span id="新生代和老年代">新生代和老年代</span></h4><p>根据垃圾收集算法来看，堆可以分为新生代和老年代，而新生代又分为eden区和s0、s1（s0、s1又叫from、to）三个区，如下图所示：<br><img src="/2019/05/08/Java堆/1.jpg" alt="1"></p><h5><span id="新生代">新生代</span></h5><p>新生代一般占据堆内存的1/3的空间，因为Java程序中的对象绝大部分是朝生夕死的特性，新生代中每次GC都会有大量对象被回收，新生代的GC操作也是最为频繁的。发生在新生代的GC被称为Minor GC</p><h6><span id="eden区">eden区</span></h6><p>当一个普通的对象刚new出来的时候它是存在于新生代的eden区，eden区一般占新生代的的8/10,当eden区内存不足时就会触发Minor GC。</p><h6><span id="s0和s1">s0和s1</span></h6><p>s0和s1则分别占新生代内存的1/10，根据不同的gc算法具有不同的作用</p><h5><span id="老年代">老年代</span></h5><p>一般位于新生代中的对象满足某些条件（比如大对象、经历了几次新生代GC还存活的对象等）之后就会转到年老代中去。老年代中GC不频繁，但GC效率要比新生代中GC慢许多，发生在老年代的GC被称为Full GC 或Major GC</p><h4><span id="内存分配策略">内存分配策略</span></h4><ul><li><p>大多数情况下对象优先在eden区中分配（当eden内存不足时将发起一次Minor GC）</p></li><li><p>大对象直接进入老年代（需要大量连续内存空间的对象）</p></li><li><p>长期存活的对象进入老年代（默认熬过15次Minor GC的对象）</p></li><li><p>对象年龄动态判定（如果s0/s1中相同年龄所有对象的总和大于等于s0/s1空间的一半，那么所有大于等于该年龄的对象直接进入年老代）</p><p>空间分配担保（当前晋升为老年代的大小如果大于老年代的剩余空间则直接触发Full GC）</p></li></ul><h4><span id="浅堆和深堆">浅堆和深堆</span></h4><p>浅堆指对象本身占用的内存，不包括其内部引用对象的大小。</p><p>深堆指只能通过该对象访问到的（直接或间接）所有对象的浅堆之和，即对象被回收后，可以释放的真实空间。</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> JVM的类加载机制 </title>
      <link href="/2019/05/08/M%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/05/08/M%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在JVM中一个类的生命周期包括了：加载、验证、准备、解析、初始化、使用、卸载7个阶段，其中验证、准备和解析统称为连接</p></blockquote><h4><span id="加载">加载</span></h4><p>加载是第一阶段，因为此时的虚拟机中还没有class的相关信息，必须将class文件加载到虚拟机中才能进行接下来的操作。加载的过程主要分为以下3个步骤：</p><ul><li><p>根据类的全限定名取得类的二进制流</p></li><li><p>注意这里指定的是类的二进制流而不是说.class文件，由此可知这是个典型的面向接口编程呀，基于这个机制，我们可以把类放在任何地方。比如：在核心代码从数据库中获取、动态代理生成的类、JSP等其他文件转换</p></li><li><p>将类的二进制流转化为方法区的运行时数据结构</p></li><li><p>在堆中生成类对应的java.lang.Class对象</p></li></ul><h4><span id="验证">验证</span></h4><p>验证阶段所做的操作类似于我们的一个接口接收到外部的请求之后首先需要做的事</p><ul><li><p>首先是格式验证</p><ul><li><p>文件是否以魔数0xCAFEBABE开头</p></li><li><p>文件的版本号是否在当前虚拟机可处理的范围内</p></li><li><p>常量池中的常量是否有不支持的常量</p></li><li><p>等其他关于文件是否正确的验证</p></li></ul></li><li><p>接着是逻辑验证</p><ul><li><p>这个类是否有父类</p></li><li><p>继承的父类是否是不允许被继承的，如final</p></li><li><p>等其他是否符合Java语法规范的验证</p></li></ul></li><li><p>然后是安全性验证</p><ul><li><p>保证方法内的跳转语句不会跳转到方法外</p></li><li><p>保证类型转换是有效的</p></li><li><p>等其他可能危害虚拟机安全的验证</p></li></ul></li><li><p>最后是对引用内容验证</p><ul><li><p>引用的类是否存在</p></li><li><p>对引用的类、方法、属性是否有权限访问</p></li><li><p>等其他引用内容的验证</p></li></ul></li></ul><h4><span id="准备">准备</span></h4><p>准备阶段主要是为类变量分配内存并且设置初始值。这里有两个需要注意的地方：</p><ul><li><p>类变量是指static变量</p></li><li><p>设置初始值是设置当前数据类型的零值，例如当前存在以下两个变量：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> b=<span class="number">2</span></span><br></pre></td></tr></table></figure><pre><code>它们的初始值其实是这样的：</code></pre><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">b</span>=<span class="number">0</span>L</span><br></pre></td></tr></table></figure><pre><code>而final类型的变量则没有这一步骤，设置初始值的时候跳过零值设置初始值</code></pre><h4><span id="解析">解析</span></h4><p>解析阶段主要是将符合引用替换为直接引用</p><ul><li><p>符合引用是使用一组符合来描述所引用的目标，简单来说是一个假的地址，引用的目标可能还没加载到内存中</p></li><li><p>直接引用则是一个直接指向目标的指针，真实的地址</p></li></ul><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用</p><h4><span id="初始化">初始化</span></h4><p>初始化阶段主要是为类的静态变量（准备阶段涉及的变量）赋予正确的初始值</p><p>这里需要注意的是，初始化阶段不是紧跟着解析进行的，而是当对类的主动使用才引起的类的初始化。以下几种情况会引起类的初始化：</p><ul><li><p>new关键字</p></li><li><p>static变量的get、set（final类型的不算）</p></li><li><p>static方法的调用</p></li><li><p>执行构造方法</p></li><li><p>反射</p></li><li><p>初始化子类时会首先初始化父类</p></li><li><p>被标示为启动类的类（Main方法所在的类）</p></li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Java中class文件结构 </title>
      <link href="/2019/05/08/va%E4%B8%ADclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2019/05/08/va%E4%B8%ADclass%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>class文件是一组以8位字节为基础单位的二进制流组成的。在这个二进制流中没有任何分隔符，所有的数据项都是一个挨一个紧凑排列的，这就代表着其中每个字节代表什么含义，长度是多少，先后顺序如何，都是固定的</p><h4><span id="魔数">魔数</span></h4><p>class文件头4个字节即为魔数。</p><p>大部分的文件都会使用魔数来进行文件识别，比如一般我们看到gif、jpeg等格式的文件就知道这是个图片。但是呢，程序识别文件类型却不是根据文件扩展名而是根据魔数来的。class文件的魔数是0xCAFEBABE，Java虚拟机判断一个文件是否是class文件就是依靠此魔数进行的。</p><h4><span id="版本号">版本号</span></h4><p>接下来的4个字节是class文件版本号，其中前两个字节表示的是次版本号，后两个字节表示的是主版本号。</p><p>java虚拟机可以运行低于当前版本的class文件，但不能运行高于其版本的class文件。</p><h4><span id="常量池">常量池</span></h4><p>常量池中主要存放两大类常量：</p><ul><li><p>字面量</p><ul><li><p>字符串</p></li><li><p>被声明为final类型的常量</p></li></ul></li><li><p>符号引用</p><ul><li><p>类和接口的全限定名</p></li><li><p>字段的名称和描述符</p></li><li><p>方法的名称和描述符</p></li></ul></li></ul><p>由于常量池中的常量数量是不确定的，所以紧接着版本号的两个字节用来代表常量池容量计数值（常量池索引从1开始）。</p><h4><span id="访问标志">访问标志</span></h4><p>常量池后面两个字节代表访问标志，在访问标志中一共有32个标志位可用，现在定义出的标志位有8个</p><p>没有使用的标志位和不符合条件的标志位一律为0</p><h4><span id="类索引">类索引</span></h4><p>类索引占两个字节，指向常量池中的CONSTANT_Class_info类型的常量，这个类型的常量中包含一个指向全限定名常量项的索引。</p><h4><span id="父类索引">父类索引</span></h4><p>同类索引</p><h4><span id="接口索引">接口索引</span></h4><p>因为一个类可以实现多个接口，故接口索引开始两个字节用来表示接口的数量，之后的每两个字节表示一个接口索引，用法同类索引与父类索引。</p><h4><span id="字段">字段</span></h4><p>字段用于描述接口或者类中声明的变量，包括类变量和实例变量，但不包括局部变量</p><p>字段的开始两个字节表示字段数量，接下来就是字段的相关描述信息：</p><ul><li><p>访问标志</p></li><li><p>名称</p></li><li><p>描述符</p></li><li><p>属性表的数量</p></li><li><p>属性表</p></li></ul><h4><span id="方法">方法</span></h4><p>同字段</p><h4><span id="属性">属性</span></h4><p>对于每个属性的结构，没有特别严格的要求，并且可以自定义属性信息，jvm运行时会忽略不认识的属性。</p><p>其中前两个字节为指向常量池中的CONSTANT_Utf8_info类型的属性名称，之后4个字节表示属性值所占用的位数，最后就是具体属性了。</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/NSojCEA-lF8ocR1XeuXbsg" target="_blank" rel="noopener">为什么一线大厂面试必问redis，有啥好问的？</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么一线大厂面试必问redis，有啥好问的？</title>
      <link href="/2019/04/30/%E4%B9%88%E4%B8%80%E7%BA%BF%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AEredis%EF%BC%8C%E6%9C%89%E5%95%A5%E5%A5%BD%E9%97%AE%E7%9A%84%EF%BC%9F/"/>
      <url>/2019/04/30/%E4%B9%88%E4%B8%80%E7%BA%BF%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AEredis%EF%BC%8C%E6%9C%89%E5%95%A5%E5%A5%BD%E9%97%AE%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Redis的优势、Redis高频面试题汇总、Redis的基础使用、持久化、主从复制、高可用</p></blockquote><h3><span id="速度快">速度快</span></h3><ul><li>纯内存操作，速度可想而知</li><li>C语言实现，天生的跟操作系统有亲戚</li><li>单线程架构，无并发问题，避免了上下文切换问题</li></ul><h3><span id="多种优秀的数据结构">多种优秀的数据结构</span></h3><p><a href="https://mp.weixin.qq.com/s/bMYM0_ukCyOdMPsUzeeoRA" target="_blank" rel="noopener">Redis常用命令、5种数据类型的内部编码实现以及实用场景</a><br>除了5种常用类型，还有bitmaps、hyperloglogs 、geospatial等类型。</p><h3><span id="丰富的功能">丰富的功能</span></h3><ul><li>键过期功能</li><li>发布订阅功能</li><li>Lua脚本功能</li><li>简单的事务功能，<a href="https://mp.weixin.qq.com/s/1nG-S8s6pmpbwVNkXas8mA" target="_blank" rel="noopener">Redis中的事务与Lua脚本</a></li><li>提供了流水线功能</li></ul><h3><span id="持久化">持久化</span></h3><p><a href="https://mp.weixin.qq.com/s/jiRfvelxcnumsGyQ5TFHVw" target="_blank" rel="noopener">Redis的两种持久化方式：RDB和AOF</a></p><h3><span id="主从复制">主从复制</span></h3><p><a href="https://mp.weixin.qq.com/s/38stfxkP2keYCmxouQdjYw" target="_blank" rel="noopener">Redis主从复制</a></p><h3><span id="高可用和分布式">高可用和分布式</span></h3><p><a href="https://mp.weixin.qq.com/s/Gm3UbNDX22iz707TzXJhxA" target="_blank" rel="noopener">Redis哨兵环境搭建</a><br><a href="https://mp.weixin.qq.com/s/Q9AgjFwi3hFVZC-UbFZ3hw" target="_blank" rel="noopener">Redis集群环境搭建</a></p><h3><span id="高频面试题汇总">高频面试题汇总</span></h3><p><a href="https://mp.weixin.qq.com/s/GedYdzWeFwTQyP5HhYo0Ug" target="_blank" rel="noopener">缓存淘汰、缓存穿透、缓存击穿、缓存雪崩、数据库缓存双写一致性</a></p><p>Redis有几种架构模式？</p><ul><li>单机版，自己用来学习的，没人用在生产吧</li><li>一主n从架构，实现读写分离，但是无法实现高可用</li><li>哨兵，保证了高可用、可以实现自动故障转移</li><li>集群，海量数据的高并发高可用场景，运维起来比较复杂</li></ul><p>Redis哨兵和集群的区别是什么？<br>哨兵专注于高可用，集群专注于可扩展</p><p><a href="https://mp.weixin.qq.com/s/hAFtXp9bCxZqrbdRvuZYuw" target="_blank" rel="noopener">分布式系统下的哈希一致性算法</a></p><p>哈希槽：<br>redis中每个集群都有固定的 16384 个哈希槽，这些哈希槽被分配到集群中的每个master节点中。每个 key 在操作使都要先计算 CRC16 值，然后对 16384 取模，获取 key 对应的哈希槽然后再操作具体的节点。</p><p>如何让一批数据分布在集群中的一个节点上？<br>hash tag</p><p>分布式锁是如何实现的？<br>使用setnx命令争抢锁，抢到之后，再使用expire给锁加过期时间</p><p>Redis并发写问题</p><ul><li>客户端并发可以基于 zookeeper 实现分布式锁</li><li>服务端使用setnx实现锁</li></ul><p>如何进行批量操作？<br>Pipeline</p><p><a href="https://mp.weixin.qq.com/s/Cp0csTp6VEkdjgo-sBVuRg" target="_blank" rel="noopener">Redis最新版本5.0.4配置文件详解</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存淘汰、缓存穿透、缓存击穿、缓存雪崩、数据库缓存双写一致性</title>
      <link href="/2019/04/29/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2019/04/29/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3><span id="缓存淘汰">缓存淘汰</span></h3><p>为什么需要缓存淘汰？你需要缓存30G的数据，但是Redis本身只能使用10G的内存，那你就得做个取舍了，毕竟鱼与熊掌不可兼得。为了利益最大化肯定要保留最重要的10个G。</p><p>Redis本身提供了6中缓存淘汰策略，以下属性表示允许使用的最大内存</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">server</span>.maxmemory</span><br></pre></td></tr></table></figure><p>当使用的内存超过限制内存时，Redis会根据配置的以下6中淘汰策略选择数据淘汰</p><ul><li>volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集中任意选择数据淘汰</li><li>allkeys-lru：从数据集中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集中任意选择数据淘汰</li><li>no-enviction：内存不足时添加数据会报错（没人用这个吧？）<br>其他相关配置：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定数据淘汰算法</span></span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"><span class="meta">#</span><span class="bash">LRU和最小TTL算法的样本个数</span></span><br><span class="line">maxmemory-samples 5</span><br></pre></td></tr></table></figure><h3><span id="缓存穿透">缓存穿透</span></h3><p>大量的请求瞬时涌入系统，而这个数据在Redis中不存在，从而所有的请求都落到了数据库上从而把数据库打死。造成这种情况的原因如下：</p><ul><li>系统设计不合理，缓存数据更新不及时</li><li>爬虫等恶意攻击</li></ul><p>解决方案：</p><ul><li>如果key在数据库中也不存在，那么就写一个空值到Redis中，并设置一个过期时间，避免一直占用内存</li><li>查询缓存之前使用布隆过滤器拦截</li></ul><h3><span id="缓存击穿">缓存击穿</span></h3><p>缓存击穿，就是常说的热点key问题，当一个正有非常巨大的访问量访问的key 在失效的瞬间，大量的请求击穿了缓存，直接落到了数据库上，然后所有从数据获取到数据的线程又都并发的想要把数据缓存到redis中。</p><p>解决方案：</p><ul><li>使用互斥锁，同一时刻只允许一个线程去构建缓存，其他线程等待构建完毕后去缓存取</li><li>定时更新，假如缓存过期时间为60分钟，则单独设置一个线程每59分钟去负责更新缓存</li></ul><h3><span id="缓存雪崩">缓存雪崩</span></h3><p>由于Redis是基于内存的应用，可以很容易做到高性能、高并发从而起到保护数据库的作用。如果缓存意外挂了、所有的请求落到了数据上就形成了缓存雪崩。</p><p>解决方案：</p><ul><li>事前：使用主从复制+哨兵或者Redis集群。<a href="https://mp.weixin.qq.com/s/38stfxkP2keYCmxouQdjYw" target="_blank" rel="noopener">Redis主从复制</a>、<a href="https://mp.weixin.qq.com/s/Gm3UbNDX22iz707TzXJhxA" target="_blank" rel="noopener">Redis的哨兵机制</a>、<a href="https://mp.weixin.qq.com/s/Q9AgjFwi3hFVZC-UbFZ3hw" target="_blank" rel="noopener">Redis集群环境搭建</a></li><li>事中：本地缓存结合限流和降级。<a href="https://mp.weixin.qq.com/s/T3iPBX-kr1YvESC_EDcLDw" target="_blank" rel="noopener">基于注解的分布式限流组件</a></li><li>事后：开启持久化配置，实现快速缓存的快速恢复。 <a href="https://mp.weixin.qq.com/s/jiRfvelxcnumsGyQ5TFHVw" target="_blank" rel="noopener">Redis 的持久化机制</a></li></ul><h3><span id="数据库缓存双写一致性">数据库缓存双写一致性</span></h3><p>当一个数据需要更新时因为不可能做到同时更新数据库和缓存、那么此时读取数据的时候就一定会发生数据不一致问题，而数据不一致问题在金融交易领域的系统中是肯定不允许的。</p><p>解决方案：</p><ul><li>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li>更新的时候，先更新数据库，然后再删除缓存。</li></ul><blockquote><p>参考自公众号：石杉的架构笔记</p></blockquote><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis最新版本5.0.4配置文件详解</title>
      <link href="/2019/04/27/Redis%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC5.0.4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/04/27/Redis%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC5.0.4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>#当你需要为某个配置项指定内存大小的时候，必须要带上单位，<br>#通常的格式就是 1k 5gb 4m 等：<br>#1k  =&gt; 1000 bytes<br>#1kb =&gt; 1024 bytes<br>#1m  =&gt; 1000000 bytes<br>#1mb =&gt; 1024<em>1024 bytes<br>#1g  =&gt; 1000000000 bytes<br>#1gb =&gt; 1024</em>1024*1024 bytes</p><p></p><h3><span id="文件引入"> 文件引入 </span></h3><p></p><p>#引入其他的配置文件<br>#include /path/to/local.conf<br>#include /path/to/other.conf</p><p></p><h3><span id="模块加载"> 模块加载 </span></h3><p></p><p>#启动时加载模块<br>#loadmodule /path/to/my_module.so<br>#loadmodule /path/to/other_module.so</p><p></p><h3><span id="网络"> 网络 </span></h3><p></p><p>#指定redis只能接受来自此IP绑定的网卡的请求，注意此默认值默认外网是不可访问的<br>bind 127.0.0.1</p><p>#是否开启保护模式。如果没有指定bind和密码，redis只会本地进行访问，拒绝外部访问。<br>protected-mode yes</p><p>#默认端口，建议生产环境不要使用默认端口避免被恶意扫描到<br>port 6379</p><p>#TCP连接中已完成队列(完成三次握手之后)的长度<br>tcp-backlog 511</p><p>#配置unix socket来让redis支持监听本地连接。<br>#unixsocket /tmp/redis.sock</p><p>#配置unix socket使用文件的权限<br>#unixsocketperm 700</p><p>#客户端连接空闲超过timeout将会被断开，为0则断开<br>timeout 0</p><p>#tcp keepalive参数<br>tcp-keepalive 300</p><p></p><h3><span id="基本配置"> 基本配置 </span></h3><p></p><p>#是否后台启动<br>daemonize no</p><p>#可以通过upstart和systemd管理Redis守护进程<br>#选项：<br>#supervised no - 没有监督互动<br>#supervised upstart - 通过将Redis置于SIGSTOP模式来启动信号<br>#supervised systemd - signal systemd将READY = 1写入$ NOTIFY_SOCKET<br>#supervised auto - 检测upstart或systemd方法基于 UPSTART_JOB或NOTIFY_SOCKET环境变量<br>supervised no</p><p>#配置PID文件路径<br>pidfile /var/run/redis_6379.pid</p><p>#日志级别<br>#参数：<br>#debug<br>#verbose<br>#notice<br>#warning<br>loglevel notice</p><p>#日志文件<br>logfile “”</p><p>#是否打开记录syslog功能<br>#syslog-enabled no</p><p>#syslog标识符<br>#syslog-ident redis</p><p>#日志的来源<br>#syslog-facility local0</p><p>#数据库的数量，默认使用的数据库是DB 0<br>#可以通过”SELECT “命令选择一个db<br>#集群环境默认只有DB 0<br>databases 16</p><p>#是否一直显示logo<br>always-show-logo yes</p><p></p><h3><span id="数据持久化rdb">数据持久化RDB</span></h3><br>#保存数据到磁盘:<br>#save <seconds> <changes><p></p><h1><span id=""></span></h1><p>#Will save the DB if both the given number of seconds and the given<br>#number of write operations against the DB occurred.</p><h1><span id=""></span></h1><p>#In the example below the behaviour will be to save:</p><h1><span id=""></span></h1><p>#15分钟有一个key发生变化就保存数据到磁盘<br>#after 900 sec (15 min) if at least 1 key changed</p><h1><span id=""></span></h1><p>#5分钟有10个key发生变化就保存数据到磁盘<br>#after 300 sec (5 min) if at least 10 keys changed</p><h1><span id=""></span></h1><p>#1分钟有10000个key发生变化就保存数据到磁盘<br>#after 60 sec if at least 10000 keys changed</p><h1><span id=""></span></h1><p>#Note: you can disable saving completely by commenting out all “save” lines.</p><h1><span id=""></span></h1><p>#还可以删除所有以前配置的保存。<br>#通过添加带有单个空字符串参数的保存指令<br>#like in the following example:</p><p>save 900 1<br>save 300 10<br>save 60 10000</p><p>#持久化出现错误后，是否依然进行继续进行工作<br>stop-writes-on-bgsave-error yes</p><p>#是否校验rdb文件<br>rdbcompression yes</p><p>#使用压缩rdb文件，rdb文件压缩使用LZF压缩算法，<br>rdbchecksum yes</p><p>#rdb文件名称<br>dbfilename dump.rdb</p><p>#rdb使用上面的“dbfilename配置指令的文件名保存到这个目录<br>dir ./</p><p></p><h3><span id="主从复制">主从复制</span></h3><br>#指定主节点。旧版本是：slaveof <masterip> <masterport><br>#replicaof <masterip> <masterport><p></p><p>#master的密码<br>#masterauth <master-password></master-password></p><p>#当一个slave失去和master的连接，或者同步正在进行中，slave的行为有两种可能：<br>#如果 replica-serve-stale-data 设置为 “yes” (默认值)，slave会继续响应客户端请求，可能是正常数据，也可能是还没获得值的空数据。<br>#如果 replica-serve-stale-data 设置为 “no”，slave会回复&quot;正在从master同步（SYNC with master in progress）&quot;来处理各种请求，除了 INFO 和 SLAVEOF 命令。<br>replica-serve-stale-data yes</p><p>#配置从是否为只读，开启后从则不能写入数据，旧版本是：slave-read-only yes<br>replica-read-only yes</p><p>#同步策略: 磁盘或socket，默认磁盘方式</p><p>repl-diskless-sync no</p><p>#如果非磁盘同步方式开启，可以配置同步延迟时间，以等待master产生子进程通过socket传输RDB数据给slave。<br>#默认值为5秒，设置为0秒则每次传输无延迟。<br>repl-diskless-sync-delay 5</p><p>#slave根据指定的时间间隔向master发送ping请求。默认10秒。<br>#repl-ping-replica-period 10</p><p>#同步的超时时间<br>#slave在与master SYNC期间有大量数据传输，造成超时<br>#在slave角度，master超时，包括数据、ping等<br>#在master角度，slave超时，当master发送REPLCONF ACK pings#确保这个值大于指定的repl-ping-slave-period，否则在主从间流量不高时每次都会检测到超时<br>#repl-timeout 60</p><p>#是否在slave套接字发送SYNC之后禁用 TCP_NODELAY<br>#如果选择yes，Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒。<br>#如果选择no，数据传输到salve的延迟将会减少但要使用更多的带宽。<br>#默认我们会为低延迟做优化，但高流量情况或主从之间的跳数过多时，可以设置为“yes”。<br>repl-disable-tcp-nodelay no</p><p>#设置数据备份的backlog大小<br>#repl-backlog-size 1mb</p><p>#从最后一个slave断开开始计时多少秒后，backlog缓冲将会释放。<br>#repl-backlog-ttl 3600</p><p>#优先级<br>replica-priority 100</p><p>#如果master少于N个延时小于等于M秒的已连接slave，就可以停止接收写操作。<br>#N个slave需要是“oneline”状态。<br>#延时是以秒为单位，并且必须小于等于指定值，是从最后一个从slave接收到的ping（通常每秒发送）开始计数。<br>#该选项不保证N个slave正确同步写操作，但是限制数据丢失的窗口期。<br>#例如至少需要3个延时小于等于10秒的slave用下面的指令：<br>#min-replicas-to-write 3<br>#min-replicas-max-lag 10</p><p></p><h3><span id="安全">安全</span></h3><p></p><p>#密码<br>#requirepass foobared</p><p>#命令重命名<br>#设置命令为空时禁用命令<br>#rename-command CONFIG “”</p><p></p><h3><span id="限制">限制</span></h3><p></p><p>#设置最多同时连接的客户端数量<br>#maxclients 10000</p><p>#内存限制<br>#maxmemory <bytes></bytes></p><p>#如果达到上方最大的内存限制，Redis如何选择删除key<br>#volatile-lru -&gt; 根据LRU算法删除设置过期时间的key<br>#allkeys-lru -&gt; 根据LRU算法删除任何key<br>#volatile-random -&gt; 随机移除设置过过期时间的key<br>#allkeys-random -&gt; 随机移除任何key<br>#volatile-ttl -&gt; 移除即将过期的key(minor TTL)<br>#noeviction -&gt; 不移除任何key，只返回一个写错误<br>#注意：对所有策略来说，如果Redis找不到合适的可以删除的key都会在写操作时返回一个错误。<br>#目前为止涉及的命令：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort<br>#maxmemory-policy noeviction</p><p>#LRU和最小TTL算法的样本个数<br>#maxmemory-samples 5</p><p></p><h3><span id="懒删除">懒删除</span></h3><p></p><p>#内存满逐出<br>lazyfree-lazy-eviction no<br>#过期key删除<br>lazyfree-lazy-expire no<br>#内部删除，比如rename oldkey newkey时，如果newkey存在需要删除newkey<br>lazyfree-lazy-server-del no<br>#接收完RDB文件后清空数据选项<br>replica-lazy-flush no</p><p></p><h3><span id="持久化方式aof">持久化方式AOF</span></h3><br>#每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件<br>appendonly no<p></p><p>#AOF文件名称<br>appendfilename “appendonly.aof”</p><p>#fsync() 系统调用告诉操作系统把数据写到磁盘上，而不是等更多的数据进入输出缓冲区。<br>#有些操作系统会真的把数据马上刷到磁盘上；有些则会尽快去尝试这么做。<br>#Redis支持三种不同的模式：<br>#no：不要立刻刷，只有在操作系统需要刷的时候再刷。比较快。<br>#always：每次写操作都立刻写入到aof文件。慢，但是最安全。<br>#everysec：每秒写一次。折中方案。<br>#默认的 “everysec” 通常来说能在速度和数据安全性之间取得比较好的平衡。<br>appendfsync everysec</p><p>#如果AOF的同步策略设置成 “always” 或者 “everysec”，并且后台的存储进程（后台存储或写入AOF 日志）会产生很多磁盘I/O开销。某些Linux的配置下会使Redis因为 fsync()系统调用而阻塞很久。<br>#注意，目前对这个情况还没有完美修正，甚至不同线程的 fsync() 会阻塞我们同步的write(2)调用。<br>#为了缓解这个问题，可以用下面这个选项。它可以在 BGSAVE 或 BGREWRITEAOF 处理时阻止fsync()。<br>#这就意味着如果有子进程在进行保存操作，那么Redis就处于&quot;不可同步&quot;的状态。<br>#这实际上是说，在最差的情况下可能会丢掉30秒钟的日志数据。（默认Linux设定）<br>#如果把这个设置成&quot;yes&quot;带来了延迟问题，就保持&quot;no&quot;，这是保存持久数据的最安全的方式。<br>no-appendfsync-on-rewrite no</p><p>#自动重写AOF文件。如果AOF日志文件增大到指定百分比，Redis能够通过 BGREWRITEAOF 自动重写AOF日志文件。<br>#工作原理：Redis记住上次重写时AOF文件的大小（如果重启后还没有写操作，就直接用启动时的AOF大小）<br>#这个基准大小和当前大小做比较。如果当前大小超过指定比例，就会触发重写操作。<br>#你还需要指定被重写日志的最小尺寸，这样避免了达到指定百分比但尺寸仍然很小的情况还要重写。<br>#指定百分比为0会禁用AOF自动重写特性。</p><p>auto-aof-rewrite-percentage 100<br>#文件达到大小阈值的时候进行重写<br>auto-aof-rewrite-min-size 64mb</p><p>#如果设置为yes，如果一个因异常被截断的AOF文件被redis启动时加载进内存，redis将会发送日志通知用户<br>#如果设置为no，erdis将会拒绝启动。此时需要用&quot;redis-check-aof&quot;工具修复文件。</p><p>aof-load-truncated yes</p><p>#加载时Redis识别出AOF文件以“REDIS”开头字符串，<br>#并加载带此前缀的RDB文件，然后继续加载AOF<br>aof-use-rdb-preamble yes</p><p></p><h3><span id="lua脚本配置">Lua脚本配置</span></h3><p></p><p>#Lua 脚本的最大执行毫秒数</p><p>lua-time-limit 5000</p><p></p><h3><span id="集群">集群</span></h3><p></p><p>#开启redis集群<br>#cluster-enabled yes</p><p>#配置redis自动生成的集群配置文件名。确保同一系统中运行的各redis实例该配置文件不要重名。<br>#cluster-config-file nodes-6379.conf</p><p>#集群节点超时毫秒数<br>#cluster-node-timeout 15000</p><p>#如果数据太旧，集群中的不可用master的slave节点会避免成为备用master。如果slave和master失联时间超过:(node-timeout * slave-validity-factor) + repl-ping-slave-period则不会被提升为master。<br>#如node-timeout为30秒，slave-validity-factor为10, 默认default repl-ping-slave-period为10秒,失联时间超过310秒slave就不会成为master。<br>#较大的slave-validity-factor值可能允许包含过旧数据的slave成为master，同时较小的值可能会阻止集群选举出新master。<br>#为了达到最大限度的高可用性，可以设置为0，即slave不管和master失联多久都可以提升为master<br>#cluster-replica-validity-factor 10</p><p>#只有在之前master有其它指定数量的工作状态下的slave节点时，slave节点才能提升为master。默认为1（即该集群至少有3个节点，1 master＋2 slaves，master宕机，仍有另外1个slave的情况下其中1个slave可以提升）<br>#测试环境可设置为0，生成环境中至少设置为1<br>#cluster-migration-barrier 1</p><p>#默认情况下如果redis集群如果检测到至少有1个hash slot不可用，集群将停止查询数据。<br>#如果所有slot恢复则集群自动恢复。<br>#如果需要集群部分可用情况下仍可提供查询服务，设置为no。<br>#cluster-require-full-coverage yes</p><p>#选项设置为yes时，会阻止replicas尝试对其master在主故障期间进行故障转移<br>#然而，master仍然可以执行手动故障转移,如果强制这样做的话。<br>#cluster-replica-no-failover no</p><p></p><h3><span id="docker集群配置">Docker集群配置</span></h3><p></p><p>#默认情况下，Redis会自动检测自己的IP和从配置中获取绑定的PORT，告诉客户端或者是其他节点。<br>#而在Docker环境中，如果使用的不是host网络模式，在容器内部的IP和PORT都是隔离的，那么客户端和其他节点无法通过节点公布的IP和PORT建立连接。<br>#如果开启以下配置，Redis节点会将配置中的这些IP和PORT告知客户端或其他节点。而这些IP和PORT是通过Docker转发到容器内的临时IP和PORT的。<br>#cluster-announce-ip<br>#cluster-announce-port<br>#集群总线端口<br>#cluster-announce-bus-port</p><p></p><h3><span id="慢查询日志">慢查询日志</span></h3><p></p><p>#记录超过多少微秒的查询命令<br>#1000000等于1秒，设置为0则记录所有命令<br>slowlog-log-slower-than 10000</p><p>#记录大小，可通过SLOWLOG RESET命令重置<br>slowlog-max-len 128</p><p></p><h3><span id="延时监控系统">延时监控系统</span></h3><br>#记录执行时间大于或等于预定时间（毫秒）的操作,为0时不记录<br>latency-monitor-threshold 0<p></p><p></p><h3><span id="事件通知">事件通知</span></h3><p></p><p>#Redis能通知 Pub/Sub 客户端关于键空间发生的事件，默认关闭<br>notify-keyspace-events “”</p><p></p><h3><span id="内部数据结构">内部数据结构</span></h3><p></p><p>#当hash只有少量的entry时，并且最大的entry所占空间没有超过指定的限制时，会用一种节省内存的<br>#数据结构来编码。可以通过下面的指令来设定限制<br>hash-max-ziplist-entries 512<br>hash-max-ziplist-value 64</p><p>#当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。比如，当这个参数配置<br>#成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。<br>#当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5<br>#这五个值，每个值含义如下：<br>#-5: 每个quicklist节点上的ziplist大小不能超过64 Kb。（注：1kb =&gt; 1024 bytes）<br>#-4: 每个quicklist节点上的ziplist大小不能超过32 Kb。<br>#-3: 每个quicklist节点上的ziplist大小不能超过16 Kb。<br>#-2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）<br>#-1: 每个quicklist节点上的ziplist大小不能超过4 Kb。<br>list-max-ziplist-size -2</p><p>#这个参数表示一个quicklist两端不被压缩的节点个数。<br>#注：这里的节点个数是指quicklist双向链表的节点个数，而不是指ziplist里面的数据项个数。<br>#实际上，一个quicklist节点上的ziplist，如果被压缩，就是整体被压缩的。<br>#参数list-compress-depth的取值含义如下：<br>#0: 是个特殊值，表示都不压缩。这是Redis的默认值。<br>#1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。<br>#2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。<br>#3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。<br>#依此类推…<br>#由于0是个特殊值，很容易看出quicklist的头节点和尾节点总是不被压缩的，以便于在表的两端进行快速存取。<br>list-compress-depth 0</p><p>#set有一种特殊编码的情况：当set数据全是十进制64位有符号整型数字构成的字符串时。<br>#下面这个配置项就是用来设置set使用这种编码来节省内存的最大长度。<br>set-max-intset-entries 512</p><p>#与hash和list相似，有序集合也可以用一种特别的编码方式来节省大量空间。<br>#这种编码只适合长度和元素都小于下面限制的有序集合<br>zset-max-ziplist-entries 128<br>zset-max-ziplist-value 64</p><p>#HyperLogLog稀疏结构表示字节的限制。该限制包括<br>#16个字节的头。当HyperLogLog使用稀疏结构表示<br>#这些限制，它会被转换成密度表示。<br>#值大于16000是完全没用的，因为在该点<br>#密集的表示是更多的内存效率。<br>#建议值是3000左右，以便具有的内存好处, 减少内存的消耗<br>hll-sparse-max-bytes 3000</p><p>#Streams宏节点最大大小/项目。 流数据结构是基数编码内部多个项目的大节点树。 使用此配置<br>#可以配置单个节点的字节数，以及切换到新节点之前可能包含的最大项目数<br>#追加新的流条目。 如果以下任何设置设置为0，忽略限制，因此例如可以设置一个<br>#大入口限制将max-bytes设置为0，将max-entries设置为所需的值<br>stream-node-max-bytes 4096<br>stream-node-max-entries 100</p><p>#启用哈希刷新，每100个CPU毫秒会拿出1个毫秒来刷新Redis的主哈希表（顶级键值映射表）<br>activerehashing yes</p><p>#客户端的输出缓冲区的限制，可用于强制断开那些因为某种原因从服务器读取数据的速度不够快的客户端<br>client-output-buffer-limit normal 0 0 0<br>client-output-buffer-limit slave 256mb 64mb 60<br>client-output-buffer-limit pubsub 32mb 8mb 60</p><p>#客户端查询缓冲区累积新命令。 它们仅限于固定的默认情况下，<br>#多数情况下为了避免协议不同步导致客户端查询缓冲区中未绑定的内存使用量的错误<br>#但是，如果你有使用的话，你可以在这里配置它，比如我们有很多执行请求或类似的。<br>#client-query-buffer-limit 1gb</p><p>#在Redis协议中，批量请求，即表示单个的元素strings，通常限制为512 MB。<br>#但是，您可以z更改此限制<br>#proto-max-bulk-len 512mb</p><p>#默认情况下，“hz”的被设定为10。提高该值将在Redis空闲时使用更多的CPU时，但同时当有多个key<br>#同时到期会使Redis的反应更灵敏，以及超时可以更精确地处理<br>hz 10</p><p>#开启动态hz<br>dynamic-hz yes</p><p>#当一个子进程重写AOF文件时，如果启用下面的选项，则文件每生成32M数据会被同步<br>aof-rewrite-incremental-fsync yes</p><p>#当redis保存RDB文件时，如果启用了以下选项，每生成32 MB数据，文件将被fsync-ed。<br>#这很有用，以便以递增方式将文件提交到磁盘并避免大延迟峰值。<br>rdb-save-incremental-fsync yes</p><p></p><h3><span id="碎片整理">碎片整理</span></h3><p></p><p>#启用主动碎片整理<br>#activedefrag yes</p><p>#启动活动碎片整理的最小碎片浪费量<br>#active-defrag-ignore-bytes 100mb</p><p>#启动碎片整理的最小碎片百分比<br>#active-defrag-threshold-lower 10</p><p>#使用最大消耗时的最大碎片百分比<br>#active-defrag-threshold-upper 100</p><p>#在CPU百分比中进行碎片整理的最小消耗<br>#active-defrag-cycle-min 5</p><p>#磁盘碎片整理的最大消耗<br>#active-defrag-cycle-max 75</p><p>#将从主字典扫描处理的最大set / hash / zset / list字段数<br>#active-defrag-max-scan-fields 1000</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1">jpg)</p></masterport></masterip></masterport></masterip></changes></seconds>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统下的哈希一致性算法设计</title>
      <link href="/2019/04/25/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%93%88%E5%B8%8C%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/04/25/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E5%93%88%E5%B8%8C%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：普通哈希算法存在的问题，分布式系统的哈希一致性算法，哈希一致性算法中的数据倾斜问题</p></blockquote><p>我们知道，在分布式系统中当数据量无法使用单机进行存储时，最简单粗暴的方法就是水平扩展：加机器，搞集群。</p><p>然而所有的集群模式都会面临一个数据存放的问题：即一个集群有多台机器，我们怎么知道这次的数据应该放在哪个机器上呢？这次的数据放到了一台机器上我下一次读取的时候能保证还来这台机器上找么？</p><blockquote><p>假如当前我们有一个Redis集群，共5个节点对外提供服务</p></blockquote><p>◆<br>Hash取模<br>◆</p><p>最开始的解决方案就是首先给5台机器分别编号：1、2、3、4、5<br>当对一个数据进行操作时首先计算key的hash然后对机器数量5进行取余，得出的余数就是需要放置的机器的编号。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">key</span>应该放置的机器编号=hash(<span class="type">key</span>) % <span class="number">5</span></span><br></pre></td></tr></table></figure><p>这个方案完美解决了文章开始提到的两个问题，但是大家都知道，程序员的智力是没有上限，当然主要是因为问题逼的：</p><p>如果其中一台机器宕机了、或者新增了服务器，则整个集群所有的数据都需要重新计算位置，这个过程简直不要太痛苦。</p><p>◆<br>一致性Hash<br>◆</p><p>既然出现了问题，聪明的程序员很快就想到了解决方案：一致性哈希算法<br><img src="/2019/04/25/分布式系统下的哈希一致性算法设计/1.jpg" alt="1"></p><p>如上图所示，程序员们把所有的机器模拟成了一个虚拟的哈希环，然后设计了一个空间的大小，这个空间被平均分配到了所有机器的中间。当需要对一个key操作时，同样进行进行取模运算，只不过这里的模不再是机器数量而是空间大小，然后根据得出的结果，去离结果顺时针最近的一个节点上操作key。</p><p>例如：当一个集群有5个节点、空间大小被设置为500的时候，当要设置一个key的hash值为601时。首先会对key的hash进行取余，601%500 结果为101，然后根据结果101顺时针查找最近的节点找到了192.168.1.3。<br>同理，设置另一个key，先算hash，假如是888，则首先取余得出结果388然后得出节点192.168.1.5。</p><p>使用Hash一致性的时候如果遇到了节点宕机或者新增服务器的情况下可就简单的多了：<br><img src="/2019/04/25/分布式系统下的哈希一致性算法设计/2.jpg" alt="1"></p><p>节点宕机，只需要把宕机节点的数据迁移到顺时针的下一个服务器上<br><img src="/2019/04/25/分布式系统下的哈希一致性算法设计/3.jpg" alt="1"></p><p>新增节点仅仅需要迁移逆时针的第一台服务器的部分数据</p><p>◆<br>数据倾斜<br>◆</p><p>一致性哈希算法完美的解决了普通的哈希算法的问题，但是呢，没有十全十美的算法，一致性哈希算法同样存在一些问题。由上方的示例我们可以看出来，当集群内扩缩容次数多了以后，数据很容易出现不均匀的情况，有的机器负责了大半的空间，而有的机器仅仅负责一点点空间。这个问题有一个名词，数据倾斜：<br><img src="/2019/04/25/分布式系统下的哈希一致性算法设计/4.jpg" alt="1"></p><p>为了解决数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即将每一个服务节点都计算为多个虚拟节点，避免单个节点持有连续的大空间：<br><img src="/2019/04/25/分布式系统下的哈希一致性算法设计/5.jpg" alt="1"></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Redis哨兵环境搭建 </title>
      <link href="/2019/04/23/Redis%E5%93%A8%E5%85%B5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/04/23/Redis%E5%93%A8%E5%85%B5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>在昨天的文章&lt;<a href="https://mp.weixin.qq.com/s/38stfxkP2keYCmxouQdjYw" target="_blank" rel="noopener">Redis主从复制</a>&gt;中部署了Redis的主从复制，一主两从的架构模式可以保证数据不丢失和读写分离，但是却无法保证主节点挂了之后的应用的高可用，基于主从复制，Redis提供了哨兵模式来监控各个节点的状态，当主节点发生意外down机后，哨兵会通过选举算法在从节点中间在选举一个节点晋升为主节点。</p><p>◆</p><p>如何配置Redis的哨兵</p><p>◆</p><p>首先我们需要一个简单的一主两从架构的redis，可参考上篇文章搭建</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">ps</span> <span class="selector-tag">-ef</span> | <span class="selector-tag">grep</span> <span class="selector-tag">redis</span></span><br><span class="line"><span class="selector-tag">root</span>     <span class="selector-tag">17013</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:55</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span></span><br><span class="line"><span class="selector-tag">root</span>     <span class="selector-tag">17256</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:57</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">root</span>     <span class="selector-tag">17291</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:57</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6381</span></span><br></pre></td></tr></table></figure><p>接下来就是哨兵的配置：</p><p>Redis的安装目录存在一个配置文件sentinel.conf,想要启动哨兵只需要修改几个配置就OK了</p><p>首先修改一下配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sentinel <span class="literal">monitor</span> syj-<span class="keyword">master</span> <span class="title">127</span>.<span class="number">0.0</span>.<span class="number">1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down-after-milliseconds syj-<span class="keyword">master</span> <span class="title">30000</span></span><br><span class="line">sentinel parallel-syncs syj-<span class="keyword">master</span> <span class="title">1</span></span><br><span class="line">sentinel failover-timeout syj-<span class="keyword">master</span> <span class="title">180000</span></span><br></pre></td></tr></table></figure><p>上述参数含义：</p><ul><li>syj-master为主节点的别名 ，2代表当有2个哨兵认为master down了才认定master down</li><li>主节点syj-master如果超过30000毫秒没有回应则认为它down了</li><li>故障迁移时同时允许1个从节点从主节点复制数据</li><li>故障转移超时时间</li></ul><p>将以上配置文件修改完毕后复制两份出来，分别命名为sentinel-2.conf和sentinel-3.conf，并修改端口为26380、26381</p><p>使用如下命令启动3个哨兵：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># redis-sentinel sentinel.conf </span></span><br><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># redis-sentinel sentinel-2.conf </span></span><br><span class="line">[root<span class="symbol">@syj</span> ~]<span class="meta"># redis-sentinel sentinel-3.conf</span></span><br></pre></td></tr></table></figure><p>此时的Redis的架构应该是3台数据节点，3台哨兵节点</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">ps</span> <span class="selector-tag">-ef</span> | <span class="selector-tag">grep</span> <span class="selector-tag">redis</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">3232</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">21</span><span class="selector-pseudo">:39</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:02</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">3455</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">21</span><span class="selector-pseudo">:41</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:02</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">3507</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">21</span><span class="selector-pseudo">:41</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:02</span> <span class="selector-tag">redis-server</span> <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6381</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">6568</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:06</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:01</span> <span class="selector-tag">redis-sentinel</span> *<span class="selector-pseudo">:26379</span> <span class="selector-attr">[sentinel]</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">6599</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:06</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:01</span> <span class="selector-tag">redis-sentinel</span> *<span class="selector-pseudo">:26380</span> <span class="selector-attr">[sentinel]</span></span><br><span class="line"><span class="selector-tag">root</span>      <span class="selector-tag">6655</span>     <span class="selector-tag">1</span>  <span class="selector-tag">0</span> <span class="selector-tag">22</span><span class="selector-pseudo">:06</span> ?        <span class="selector-tag">00</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-sentinel</span> *<span class="selector-pseudo">:26381</span> <span class="selector-attr">[sentinel]</span></span><br></pre></td></tr></table></figure><p>查看某台哨兵节点的信息</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]<span class="meta"># redis-cli -h 127.0.0.1 -p 26379 info Sentinel</span></span><br><span class="line"><span class="meta"># Sentinel</span></span><br><span class="line"><span class="symbol">sentinel_masters:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">sentinel_tilt:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sentinel_running_scripts:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sentinel_scripts_queue_length:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">sentinel_simulate_failure_flags:</span><span class="number">0</span></span><br><span class="line"><span class="symbol">master0:</span>name=syj-master,status=ok,address=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>,slaves=<span class="number">2</span>,sentinels=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>此时kill掉6379的主节点，然后观察其中一个哨兵的日志就会发现，哨兵在30秒内发现了主节点挂掉并把6381重新选择成了主节点</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">37</span>:<span class="number">40.350</span> # +<span class="keyword">monitor</span> master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span> quorum <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.571</span> # +sdown master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.626</span> # +odown master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span> #quorum <span class="number">2</span>/<span class="number">2</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.626</span> # +new-epoch <span class="number">1</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.626</span> # +try-failover master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.636</span> # +vote-for-leader e357bbb19db65aec60225115e5ea82ad2cfc2be5 <span class="number">1</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.652</span> # 838a497bd5a1883242a83eab14cd0b08bc7881e2 voted for e357bbb19db65aec60225115e5ea82ad2cfc2be5 <span class="number">1</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.652</span> # 3cc3b18e620302604c04b1b90fc10f7f3fe0d661 voted for e357bbb19db65aec60225115e5ea82ad2cfc2be5 <span class="number">1</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.688</span> # +elected-leader master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.688</span> # +failover-state-select-slave master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.765</span> # +selected-slave slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6381</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.765</span> * +failover-state-send-slaveof-noone slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6381</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">43.837</span> * +failover-state-wait-promotion slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6381</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">44.361</span> # +promoted-slave slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6381</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">44.362</span> # +failover-state-reconf-slaves master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">44.430</span> * +slave-reconf-sent slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6380</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">44.734</span> # -odown master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.396</span> * +slave-reconf-inprog slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6380</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.396</span> * +slave-reconf-done slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6380</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.478</span> # +failover-end master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.478</span> # +switch-master syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.478</span> * +slave slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6380</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">38</span>:<span class="number">45.478</span> * +slave slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6379</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span></span><br><span class="line"><span class="number">22288</span>:X <span class="number">22</span> Apr <span class="number">2019</span> <span class="number">23</span>:<span class="number">39</span>:<span class="number">15.520</span> # +sdown slave <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">6379</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6379</span> @ syj-master <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span> <span class="number">6381</span></span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Redis主从复制 </title>
      <link href="/2019/04/23/edis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2019/04/23/edis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>简单介绍</p><p>◆</p><p>Redis的主从复制可以把数据复制多个副本部署到其他机器，从而避免了系统中的单点问题以及满足故障恢复和负载均衡等需求。</p><p>在Redis的主从复制架构中，存在两种节点，主节点和从节点。</p><ul><li><p>一个主节点可以有多个从节点</p></li><li><p>一个从节点只能有一个主节点</p></li><li><p>主从复制是主节点的数据会异步同步到所有的从节点上</p></li></ul><p>◆</p><p>如何使用主从复制</p><p>◆</p><p>Redis默认部署是以主节点的形式部署的，我们只需要关心从节点如何部署即可。</p><p>想要部署一个从节点，只需要指定此节点的主节点这个节点就默认变成的从节点，下方是部署的三种方式：</p><ul><li><p>修改redis.conf中的配置slaveof 主节点ip 主节点port 后重启即可</p></li><li><p>在redis-server启动命令后加入–slaveof 主节点ip 主节点port</p></li><li><p>直接使用命令：slaveof 主节点ip 主节点port</p></li></ul><p>◆</p><p>验证</p><p>◆</p><p>现在搭建一个3个节点的Redis主从复制集群。</p><p>首先使用6379搭建一个普通的redis节点，使用6380及6381搭建从节点。</p><p>使用如下命令验证是否搭建成功：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]<span class="meta"># redis-cli -h 127.0.0.1 -p 6379 info replication</span></span><br><span class="line"><span class="meta"># Replication</span></span><br><span class="line"><span class="symbol">role:</span>master</span><br><span class="line"><span class="symbol">connected_slaves:</span><span class="number">2</span></span><br><span class="line"><span class="symbol">slave0:</span>ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,port=<span class="number">6381</span>,state=online,offset=<span class="number">24896</span>,lag=<span class="number">1</span></span><br><span class="line"><span class="symbol">slave1:</span>ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,port=<span class="number">6380</span>,state=online,offset=<span class="number">24896</span>,lag=<span class="number">1</span></span><br><span class="line"><span class="symbol">master_replid:</span><span class="number">35</span>ee68f397c08911164059e3b9c604a514b7ea6d</span><br><span class="line"><span class="symbol">master_replid2:</span><span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line"><span class="symbol">master_repl_offset:</span><span class="number">24896</span></span><br><span class="line"><span class="symbol">second_repl_offset:</span><span class="number">-1</span></span><br><span class="line"><span class="symbol">repl_backlog_active:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">repl_backlog_size:</span><span class="number">1048576</span></span><br><span class="line"><span class="symbol">repl_backlog_first_byte_offset:</span><span class="number">1</span></span><br><span class="line"><span class="symbol">repl_backlog_histlen:</span><span class="number">24896</span></span><br></pre></td></tr></table></figure><p>可以看到已经显示了两个从节点的相关信息，接着从从节点的角度看一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">redis-cli</span> <span class="selector-tag">-h</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-p</span> 6380 <span class="selector-tag">info</span> <span class="selector-tag">replication</span></span><br><span class="line"># <span class="selector-tag">Replication</span></span><br><span class="line"><span class="selector-tag">role</span><span class="selector-pseudo">:slave</span></span><br><span class="line"><span class="selector-tag">master_host</span><span class="selector-pseudo">:127.0.0.1</span></span><br><span class="line"><span class="selector-tag">master_port</span><span class="selector-pseudo">:6379</span></span><br><span class="line"><span class="selector-tag">master_link_status</span><span class="selector-pseudo">:up</span></span><br><span class="line"><span class="selector-tag">master_last_io_seconds_ago</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">master_sync_in_progress</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">slave_repl_offset</span><span class="selector-pseudo">:104026</span></span><br><span class="line"><span class="selector-tag">slave_priority</span><span class="selector-pseudo">:100</span></span><br><span class="line"><span class="selector-tag">slave_read_only</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">connected_slaves</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">master_replid</span><span class="selector-pseudo">:35ee68f397c08911164059e3b9c604a514b7ea6d</span></span><br><span class="line"><span class="selector-tag">master_replid2</span><span class="selector-pseudo">:0000000000000000000000000000000000000000</span></span><br><span class="line"><span class="selector-tag">master_repl_offset</span><span class="selector-pseudo">:104026</span></span><br><span class="line"><span class="selector-tag">second_repl_offset</span><span class="selector-pseudo">:-1</span></span><br><span class="line"><span class="selector-tag">repl_backlog_active</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">repl_backlog_size</span><span class="selector-pseudo">:1048576</span></span><br><span class="line"><span class="selector-tag">repl_backlog_first_byte_offset</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">repl_backlog_histlen</span><span class="selector-pseudo">:104026</span></span><br></pre></td></tr></table></figure><p>默认情况下从节点是只读操作</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@syj ~]<span class="meta">#  redis-cli -h 127.0.0.1 -p 6380</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span>&gt; <span class="keyword">set</span> <span class="keyword">key</span> <span class="number">1</span></span><br><span class="line">(<span class="keyword">error</span>) <span class="keyword">READONLY</span> You can<span class="comment">'t write against a read only replica.</span></span><br></pre></td></tr></table></figure><p>在主节点set的值会同步到从节点上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@syj ~]</span># <span class="selector-tag">redis-cli</span> <span class="selector-tag">-h</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-p</span> 6379</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">key</span> 1</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[root@syj ~]</span>#  <span class="selector-tag">redis-cli</span> <span class="selector-tag">-h</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> <span class="selector-tag">-p</span> 6381</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">key</span></span><br><span class="line">"1"</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Redis 的持久化机制 </title>
      <link href="/2019/04/23/Redis-%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/23/Redis-%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Redis的全量备份方式RDB和增量备份方式AOF的相关内容</p></blockquote><p>◆</p><p>全量备份RDB</p><p>◆</p><p>RDB持久化触发方式</p><blockquote><p>触发RDB持久化的过程分为手动触发和自动触发两种方式</p></blockquote><p>手动触发：</p><ul><li><p>save命令：阻塞当前Redis服务器，直到RDB过程完成为止，除非是没有任何服务在使用此redis，否则千万不要使用此命令进行备份</p></li><li><p>bgsave命令：Redis进程执行fork操作创建子进程，由子进程负责持久化，这个生产环境是可以使用的。</p></li></ul><p>自动触发：</p><ul><li><p>从节点执行全量复制操作时，主节点自动执行bgsave生成RDB文件并发送给从节点</p></li><li><p>执行debug reload命令重新加载Redis时，也会自动触发bgsave操</p></li><li><p>默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave。</p></li></ul><p>RDB持久化文件</p><p>RDB文件默认保存在配置文件中dir属性(./)指定的目录下，以dbfilename(dump.rdb)属性指定的文件名命名</p><p>Redis默认采用LZF算法对生成的RDB文件做压缩处理。取消压缩处理可以按照如下方式修改配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rdbcompression</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>◆</p><p>增量备份AOF</p><p>◆</p><p>AOF持久化文件</p><p>AOF持久化默认不开启，按照如下方式修改配置可开启AOF持久化</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">appendonly</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>RDB文件默认保存在配置文件中dir属性(./)指定的目录下，以appendfilename(appendonly.aof)属性指定的文件名命名</p><p>AOF文件同步策略</p><p>Redis提供了多种AOF缓冲区同步文件策略，由参数appendfsync控制：</p><ul><li><p>always，每次写入都要同步AOF文件。Redis本身是纯内存操作，你要是每次写入都要写磁盘那就没有任何意义了</p></li><li><p>no，将同步操作交由操作系统负责，操作系统保证30秒内进行。同步时间不确定，则数据安全也无法让人放心</p></li><li><p>everysec，默认配置，每秒进行一次，生产环境通常都是使用此配置</p></li></ul><p>AOF重写机制</p><p>AOF文件记录的是Redis中所有的写操作，例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> key1 1 \n <span class="builtin-name">set</span> key2 2 \n <span class="builtin-name">set</span> key3 3 \n</span><br></pre></td></tr></table></figure><p>随着命令不断写入AOF，文件会越来越大。而此时AOF文件中存在很多待优化及无效的数据就需要使用重写机制进行处理。例如：</p><ul><li>set key1 1 setkey1 2 setkey1 3 就可以优化成setkey1 3</li><li>set key2 2 set key2 3 del key2 就可以把所有关于key2的删除掉</li><li>lpush key 1 lpush key 2 lpush key 2 就可以优化为 lpush key 1 2 3</li></ul><p>AOF重写机制触发方式</p><ul><li><p>手动触发：直接调用bgrewriteaof命令</p></li><li><p>自动触发：根据auto-aof-rewrite-min-size（运行AOF重写时文件最小体积，默认64MB）和auto-aof-rewrite-percentage（当前AOF文件空间和上一次重写后AOF文件空间的比值）参数确定自动触发时机</p></li></ul><p>◆</p><p>Redis数据恢复</p><p>◆</p><p>Redis启动时是按照如下流程来恢复数据的</p><p><img src="/2019/04/23/Redis-的持久化机制/1.jpg" alt="1"></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用命令、5种数据类型的内部编码实现以及实用场景</title>
      <link href="/2019/04/19/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E3%80%815%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2019/04/19/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E3%80%815%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<p>◆<br>全局命令<br>◆</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> db   # 清除当前数据库的所有<span class="keyword">keys</span></span><br><span class="line"><span class="keyword">flush</span> all    # 清除所有数据库的所有<span class="keyword">keys</span></span><br><span class="line"><span class="keyword">keys</span> *            # 查看所有<span class="keyword">keys</span></span><br><span class="line"><span class="keyword">keys</span> prefix_*     # 查看前缀为<span class="string">"prefix_"</span>的所有<span class="keyword">keys</span></span><br><span class="line"><span class="keyword">exists</span> <span class="keyword">key</span>      # 确认一个<span class="keyword">key</span>是否存在</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">key</span> <span class="keyword">value</span>   # 设置<span class="keyword">key</span>和<span class="keyword">value</span></span><br><span class="line"><span class="keyword">get</span> <span class="keyword">key</span>         # 获取<span class="keyword">key</span>的<span class="keyword">value</span></span><br><span class="line">del <span class="keyword">key</span>         # 删除一个<span class="keyword">key</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">key</span>        # 返回值的类型</span><br><span class="line"><span class="keyword">keys</span> pattern    # 返回满足给定pattern的所有<span class="keyword">key</span></span><br><span class="line">random <span class="keyword">key</span>      # 随机返回<span class="keyword">key</span>空间的一个</span><br><span class="line"><span class="keyword">key</span> <span class="keyword">rename</span> oldname newname    # 重命名<span class="keyword">key</span></span><br><span class="line">db <span class="keyword">size</span>         # 返回当前数据库中<span class="keyword">key</span>的数目</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">index</span>    # 选择第<span class="number">0</span>~<span class="number">15</span>中的库</span><br><span class="line"><span class="keyword">move</span> <span class="keyword">key</span> dbindex      # 移动当前数据库中的<span class="keyword">key</span>到dbindex数据库</span><br><span class="line"><span class="keyword">expire</span> <span class="keyword">key</span> seconds    #设置<span class="keyword">key</span>的有效时间  单位为秒</span><br><span class="line">ttl <span class="keyword">key</span>               #获取<span class="keyword">key</span>的剩余有效时间，持久<span class="keyword">key</span>返回<span class="number">-1</span>，<span class="keyword">key</span>不存在返回<span class="number">-2</span>，具体时间返回秒数</span><br><span class="line">persist <span class="keyword">key</span>           #设置有时效性的<span class="keyword">key</span>为持久<span class="keyword">key</span></span><br></pre></td></tr></table></figure><p>◆<br>内部编码<br>◆</p><p>相信绝大部分人，应该是99%的人都知道Redis的5种的基本类型、它们分别是：字符串、哈希、列表、集合、有序集合，就如同下图这样：<br><img src="/2019/04/19/Redis常用命令、5种数据类型的内部编码实现以及实用场景/1.jpg" alt="1"></p><p>但这些只是Redis对外的数据结构，实际上每种数据结构在底层都有多种内部编码实现，在不同的场景中Redis会自动选择不同的内部编码来实现。</p><p>◆<br>字符串<br>◆</p><p>常用命令：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setnx <span class="built_in">key</span> value <span class="meta">#键不存在时可以设置成功</span></span><br><span class="line">incr <span class="built_in">key</span>    <span class="meta"># 递增数字，仅仅对数字类型的键有用,相当于Java的i++运算</span></span><br><span class="line">incrby  <span class="built_in">key</span> increment    <span class="meta"># key自增increment，increment可以为负数，表示减少。</span></span><br><span class="line">decr <span class="built_in">key</span>    <span class="meta"># 递减数字，仅仅对数字类型的键有用，相当于Java的i–-</span></span><br><span class="line">decrby <span class="built_in">key</span> decrement    <span class="meta"># key自减decrement，decrement可以为正数，表示增加。</span></span><br><span class="line">incrbyfloat <span class="built_in">key</span> increment    <span class="meta"># 增加指定浮点数，仅仅对数字类型的键有用</span></span><br><span class="line">append <span class="built_in">key</span> value    <span class="meta"># 向尾部追加值,相当于append方法</span></span><br><span class="line"><span class="built_in">strlen</span> <span class="built_in">key</span>    <span class="meta"># 获取字符串长度</span></span><br><span class="line">mset key1 value1 [key2 value2 ...]    <span class="meta"># 同时设置多个key的值</span></span><br><span class="line">mget key1 [key2 ...]                  <span class="meta">#  同时获取多个key的值</span></span><br></pre></td></tr></table></figure><p>内部编码运用场景：</p><ul><li>int：元素为8个字节以内的长整型·</li><li>embstr：元素小于等于39个字节</li><li>raw：其他</li></ul><p>验证：<br>使用 object encoding命令可以查看key的内部编码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">str</span>  1234</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">str</span></span><br><span class="line">"<span class="selector-tag">int</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">str</span> "<span class="selector-tag">hello</span> <span class="selector-tag">word</span>"</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">str</span></span><br><span class="line">"<span class="selector-tag">embstr</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">str</span> "<span class="selector-tag">hello</span> <span class="selector-tag">word</span>，你好世界，你好我好大家好,真的好，哈哈哈哈哈哈哈哈或或或"</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">str</span></span><br><span class="line">"<span class="selector-tag">raw</span>"</span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li>缓存</li><li>计数</li><li>共享session</li><li>限流</li><li>分布式锁</li></ul><p>◆<br>哈希<br>◆</p><p>常用命令：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hset <span class="built_in">key</span> field value    <span class="meta"># 赋值</span></span><br><span class="line">hmset <span class="built_in">key</span> field1 value1 [field2 values]    <span class="meta"># 一次赋值多个字段</span></span><br><span class="line">hset <span class="built_in">key</span> field    <span class="meta"># 取值</span></span><br><span class="line">hmset <span class="built_in">key</span> field1 [field2] <span class="meta"># 一次取多个字段的值</span></span><br><span class="line">hgetall <span class="built_in">key</span>    <span class="meta"># 一次取所有字段的值</span></span><br><span class="line">hexits <span class="built_in">key</span> field    <span class="meta"># 判断字段是否存在</span></span><br><span class="line">hsetnx <span class="built_in">key</span> field value    <span class="meta"># 当字段不存在时赋值</span></span><br><span class="line">hdel <span class="built_in">key</span> field    <span class="meta"># 删除字段</span></span><br><span class="line">hkeys <span class="built_in">key</span>    <span class="meta"># 获取所有字段名</span></span><br><span class="line">hvals <span class="built_in">key</span>    <span class="meta"># 获取所有字段值</span></span><br><span class="line">hlen <span class="built_in">key</span>    <span class="meta"># 获取字段数量</span></span><br></pre></td></tr></table></figure><p>内部编码运用场景：</p><ul><li>ziplist（压缩列表）：元素个数小于hash-max-ziplist-entries（默认512个）且同时所有值都小于+ + hash-max-ziplist-value（默认64字节）</li><li>hashtable（哈希表）：无法满足ziplist的条件时</li></ul><p>验证：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">hmset</span> <span class="selector-tag">hash</span> <span class="selector-tag">filed1</span> 1 <span class="selector-tag">filed2</span> 2 <span class="selector-tag">filed3</span> 3</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">hash</span></span><br><span class="line">"<span class="selector-tag">ziplist</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">hset</span> <span class="selector-tag">hash</span>  <span class="selector-tag">filed4</span> "<span class="selector-tag">hello</span> <span class="selector-tag">word</span>，你好世界，你好我好大家好,真的好，哈哈哈哈哈哈哈哈还........"</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">hash</span></span><br><span class="line">"<span class="selector-tag">hashtable</span>"</span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li>存储结构化数据</li></ul><p>◆<br>列表<br>◆</p><p>常用命令：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rpush key value    # 在名称为key的<span class="keyword">list</span>尾添加一个值为value的元素</span><br><span class="line">lpush key value    # 在名称为key的<span class="keyword">list</span>头添加一个值为value的 元素</span><br><span class="line">llen key    # 返回名称为key的<span class="keyword">list</span>的长度</span><br><span class="line"><span class="keyword">lrange</span> key start end    # 返回名称为key的<span class="keyword">list</span>中start至end之间的元素</span><br><span class="line">ltrim key start end     # 截取名称为key的<span class="keyword">list</span></span><br><span class="line"><span class="keyword">lindex</span> key index    # 返回名称为key的<span class="keyword">list</span>中index位置的元素</span><br><span class="line"><span class="keyword">lset</span> key index value    # 给名称为key的<span class="keyword">list</span>中index位置的元素赋值</span><br><span class="line">lrem key count value    # 删除count个key的<span class="keyword">list</span>中值为value的元素</span><br><span class="line">lpop key    # 返回并删除名称为key的<span class="keyword">list</span>中的首元素</span><br><span class="line">rpop key    # 返回并删除名称为key的<span class="keyword">list</span>中的尾元素</span><br><span class="line">rpoplpush srckey dstkey    # 返回并删除名称为srckey的<span class="keyword">list</span>的尾元素，并将该元素添加到名称为dstkey的<span class="keyword">list</span>的头部</span><br></pre></td></tr></table></figure><p>内部编码运用场景（3.2版本之前）：</p><ul><li>ziplist（压缩列表）：同哈希的ziplist</li><li>linkedlist（链表）：无法满足ziplist的条件时</li></ul><p>3.2版本之后同一使用的是了quicklist，鉴于笔者使用的redis版本为5.0.4,关于3.2版本之前的内部编码不再演示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">list</span></span><br><span class="line">"<span class="selector-tag">quicklist</span>"</span><br></pre></td></tr></table></figure><p>使用场景</p><ul><li>栈</li><li>队列</li><li>有限集合</li><li>消息队列</li></ul><p>◆<br>集合<br>◆</p><p>常用命令：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sadd <span class="built_in">key</span> member    # 向名称为<span class="built_in">key</span>的<span class="built_in">set</span>中添加元素member</span><br><span class="line">srem <span class="built_in">key</span> member    # 删除名称为<span class="built_in">key</span>的<span class="built_in">set</span>中的元素member</span><br><span class="line">spop <span class="built_in">key</span>    # 随机返回并删除名称为<span class="built_in">key</span>的<span class="built_in">set</span>中一个元素</span><br><span class="line">smove srckey dstkey member    # 移到集合元素</span><br><span class="line">scard <span class="built_in">key</span>    # 返回名称为<span class="built_in">key</span>的<span class="built_in">set</span>的基数</span><br><span class="line">sismember <span class="built_in">key</span> member    # member是否是名称为<span class="built_in">key</span>的<span class="built_in">set</span>的元素</span><br><span class="line">sinter key1 key2 …<span class="built_in">key</span>   # 求交集</span><br><span class="line">sinterstore dstkey <span class="built_in">keys</span>    # 求交集并将交集保存到dstkey的集合</span><br><span class="line">sunion key1 <span class="built_in">keys</span>    # 求并集</span><br><span class="line">sunionstore dstkey <span class="built_in">keys</span>    # 求并集并将并集保存到dstkey的集合</span><br><span class="line">sdiff key1 <span class="built_in">keys</span>    # 求差集</span><br><span class="line">sdiffstore dstkey <span class="built_in">keys</span>    # 求差集并将差集保存到dstkey的集合</span><br><span class="line">smembers <span class="built_in">key</span>    # 返回名称为<span class="built_in">key</span>的<span class="built_in">set</span>的所有元素</span><br><span class="line">srandmember <span class="built_in">key</span>    # 随机返回名称为<span class="built_in">key</span>的<span class="built_in">set</span>的一个元素</span><br></pre></td></tr></table></figure><p>内部编码运用场景：</p><ul><li>intset（整数集合）：集合中的元素都是整数且元素个数小于set-max-intset-entries（默认512个）</li><li>hashtable（哈希表）：无法满足intset的条件时</li></ul><p>验证：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">set</span> 1 2 3</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">set</span></span><br><span class="line">"<span class="selector-tag">intset</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">set</span> 1 2 3 <span class="selector-tag">a</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">set</span></span><br><span class="line">"<span class="selector-tag">hashtable</span>"</span><br></pre></td></tr></table></figure><p>使用场景：</p><ul><li>去重</li><li>标签</li></ul><p>◆<br>有序集合<br>◆</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">zadd <span class="built_in">key</span> score1 value1 [score2 value2 score3 value3 ...]    #  添加元素</span><br><span class="line">zscore <span class="built_in">key</span> <span class="built_in">value</span>    # 获取元素的分数</span><br><span class="line">zrange <span class="built_in">key</span> start stop [withscore]    # 获取排名在某个范围的元素，按照元素从小到大的顺序排序，从<span class="number">0</span>开始编号，包含start和stop对应的元素，withscore选项表示是否返回元素分数</span><br><span class="line">zrevrange <span class="built_in">key</span> start stop [withscore]    # 获取排名在某个范围的元素，和上一个命令用法一样，只是这个倒序排序的。</span><br><span class="line">zrangebyscore <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span>    # 获取指定分数范围内的元素，包含<span class="built_in">min</span>和<span class="built_in">max</span>，(<span class="built_in">min</span>表示不包含<span class="built_in">min</span>，(<span class="built_in">max</span>表示不包含<span class="built_in">max</span>，+inf表示无穷大</span><br><span class="line">zincrby <span class="built_in">key</span> increment <span class="built_in">value</span>    # 增加某个元素的分数</span><br><span class="line">zcard <span class="built_in">key</span>    # 获取集合中元素的个数</span><br><span class="line">zcount <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span>    # 获取指定分数范围内的元素个数，<span class="built_in">min</span>和<span class="built_in">max</span>的用法和<span class="number">5</span>中的一样</span><br><span class="line">zrem <span class="built_in">key</span> value1 [value2 ...]    # 删除一个或多个元素</span><br><span class="line">zremrangebyrank <span class="built_in">key</span> start stop    # 按照排名范围删除元素</span><br><span class="line">zremrangebyscore <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span>    # 按照分数范围删除元素，<span class="built_in">min</span>和<span class="built_in">max</span>的用法和<span class="number">4</span>中的一样</span><br><span class="line">zrank <span class="built_in">key</span> <span class="built_in">value</span>    # 获取正序排序的元素的排名</span><br><span class="line">zrevrank <span class="built_in">key</span> <span class="built_in">value</span>    # 获取逆序排序的元素的排名</span><br></pre></td></tr></table></figure><p>内部编码运用场景：</p><ul><li>ziplist（压缩列表）：当元素个数小于zset-max-ziplist-entries（默认128个），同时每个元素的值都小于zset-max-ziplist-value（默认64字节）时</li><li>skiplist（跳跃表）：ziplist条件不满足时</li></ul><p>使用场景：</p><ul><li>排行榜</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令速查-汇总篇</title>
      <link href="/2019/04/18/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E6%B1%87%E6%80%BB%E7%AF%87/"/>
      <url>/2019/04/18/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E6%B1%87%E6%80%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/bdYFSzMshMxV4R4DlmOeLw" target="_blank" rel="noopener">Linux常用命令速查-用户管理</a><br><a href="https://mp.weixin.qq.com/s/Rn-gH6psFCmpO_17NUHRMw" target="_blank" rel="noopener">Linux常用命令速查-文件管理</a><br><a href="https://mp.weixin.qq.com/s/gQqiu2MFSPDdPOUS7FliJw" target="_blank" rel="noopener">Linux常用命令速查-系统监控</a><br><a href="https://mp.weixin.qq.com/s/Rx-3LOuLM1eIamGXMN-7UQ" target="_blank" rel="noopener">Linux常用命令速查-网络管理</a><br><a href="https://mp.weixin.qq.com/s/cy2NUKTQx-fA2H3LwSOIiw" target="_blank" rel="noopener">Linux常用命令速查-定时任务</a><br><a href="https://mp.weixin.qq.com/s/lgRm6KObRAdOBHG3I-9zAQ" target="_blank" rel="noopener">Linux常用命令速查-Vim</a></p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li><li><a href="https://mp.weixin.qq.com/s/WG4ZWfId-MRslWtcDtx0aA" target="_blank" rel="noopener">Linux常用命令速查-汇总篇</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令速查-Vim</title>
      <link href="/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-Vim/"/>
      <url>/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-Vim/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Vim编辑器的三种模式下的相关操作</p></blockquote><p>◆</p><p>一般模式</p><p>◆</p><p>常用命令：</p><ul><li>ctrl+b  屏幕往后移动一页</li><li>ctrl+f   屏幕往前移动一页</li><li>n+空格   光标向右移动n个字符</li><li>H  光标移动到屏幕左上角</li><li>L   光标移动到屏幕左下角</li><li>G  移动到最后一行</li><li>nG   移动到第n行</li><li>gg   移动到第一行，相当于1G</li><li>n<enter>光标向下移动n行</enter></li></ul><p>◆</p><p>命令行模式</p><p>◆</p><p>查找替换：</p><ul><li>/word 向光标向下寻找一个名称为word的字符串</li><li>?word 向光标向上寻找一个名称为word的字符串</li><li>n 代表重复前一个查找的动作</li><li>N 与n刚好相反</li><li>:n1,n2s/word1/word2/g 在第n1与n2行之间查找word1 这个字符串，并将该字符串替换为word2</li><li>:1,$s/word1/word2/g 全文查找word1字符串，并将该字符串替换为word2</li><li>:1,$s/word1/word2/gc 全文查找word1字符串，并将该字符串替换为word2 ，且在替换前提示用户确认是否进行替换</li></ul><p>删除、复制与粘贴：</p><ul><li>x 向后删除一个字符</li><li>X 向前删除一个字符</li><li>nx 连续向后删除n个字符</li><li>dd 删除光标所在行</li><li>ndd 删除光标所在的向下n行</li><li>d1G 删除光标所在行到第一行的所有数据</li><li>dG 删除光标所在到最后一行的所有数据</li><li>d$ 删除光标所在处，到该行的最后一个字符</li><li>d0 删除光标所在处，到该行的最前一个字符</li><li>yy 复制光标所在的那一行</li><li>nyy 复制光标所在的向下n列</li><li>y1G 复制光标所在行到第一行的所有数据</li><li>yG 复制光标所在行到最后一行的所有数据</li><li>y0 复制光标所在的那个字符到该行行首的所有数据</li><li>y$ 复制光标所在的那个字符到该行行尾的所有数据</li><li>p将已复制的数据在光标下一行粘贴上</li><li>P 则为贴在光标的上一行</li><li>u 恢复前一个操作</li><li>Ctrl+r重做上一个操作</li></ul><p>◆</p><p>模式切换</p><p>◆</p><ul><li>i 从目前光标所在处插入</li><li>I 在目前所在行的第一个非空格符处开始插入</li><li>a 从目前光标所在的下一个字符处开始插入</li><li>A 从光标所在行的最后一个字符处开始插入</li><li>o 在目前光标所在的下一行处插入新的一行</li><li>O 为在目前光标所在处的上一行插入新的一行</li><li>r 只会取代光标所在的那一个字符一次</li><li>R会一直取代光标所在的文字，直到按下 ESC 为止</li><li>Esc 退出编辑模式，回到一般模式</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令速查-网络管理</title>
      <link href="/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
      <url>/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Linux网络管理常用命令：ifconfig、netstat、route、ping、telnet、tcpdump</p></blockquote><p>◆</p><p>修改主机名</p><p>◆</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="attribute">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attribute">HOSTNAME</span>=localhost.localdomain</span><br></pre></td></tr></table></figure><p>◆</p><p>修改DNS配置</p><p>◆</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">; generated by /usr/sbin/dhclient-script</span><br><span class="line">nameserver <span class="number">183.60</span><span class="number">.83</span><span class="number">.19</span></span><br><span class="line">nameserver <span class="number">183.60</span><span class="number">.82</span><span class="number">.98</span></span><br></pre></td></tr></table></figure><p>◆</p><p>查看网络状态</p><p>◆</p><p>查看ip地址和子网掩码</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>常用参数:</p><ul><li>add   为网卡设置ipv6地址</li><li>del    删除ipv6地址</li><li>down         禁用网卡</li><li>up             启用网卡</li><li>netmask  设置子网掩码</li><li>hw &lt;网络设备类型&gt;<mac>重新设置MAC地址。只是模拟了新的Mac地址，实际上网卡的MAC是没有改变的！</mac></li><li>-a        显示所有的网络信息</li><li>-s        以短格式显示信息</li><li>[-]arp       在设备上启用或禁用ARP</li></ul><p>网络状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-t：列出TCP协议端口</li><li>-u：列出UPD协议端口</li><li>-n：不使用域名和服务名，而使用IP地址和端口号</li><li>-l：仅列出在监听状态网络服务</li><li>-a：列出所有的网络连接</li><li>-r：列出路由列表</li></ul><p>查看路由：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">route</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-A：  设置路由地址的类型</li><li>-C：    显示Linux核心的路由缓存</li><li>-n：        不执行DNS反向查找，直接显示数字形式的IP地址</li><li>-v：      显示详细信息</li><li>-e：           netstat格式显示路由表</li><li>-net：   设置网络路由</li><li>-host：    设置主机路由</li><li>add ：         添加路由</li><li>del ：      删除路由</li></ul><p>◆</p><p>网络测试命令</p><p>◆</p><p>查看指定ip或域名的网络状况</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ping</span> <span class="built_in">ip</span>/域名</span><br></pre></td></tr></table></figure><p>查看端口是否开放</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet<span class="built_in"> ip </span>port</span><br></pre></td></tr></table></figure><p>抓包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tcpdump</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-i 指定监听的网卡</li><li>-nn 将数据包中的域名与服务转为IP和端口显示</li><li>-X 以十六进制和ASCII码显示数据包内容</li><li>port 指定监听的端口</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令速查-定时任务</title>
      <link href="/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/04/14/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文涉及：Linux中使用定时任务的几种方法：anacron、crontab、at、batc</p></blockquote><p>◆</p><p>定时任务：crontab<br>◆</p><p>每个用户使用crontab创建的定时任务都在/var/spool/cron/ 目录下存放，每个任务以创建者的名字命名。</p><p>crontab的常用参数：</p><ul><li>-e  编辑工作表</li><li>-l  列出工作表里的命令</li><li>-r  删除工作表</li></ul><p>首先使用 crontab -e 打开工作表，在工作表中简单的编辑一行表达式就</p><p>可以开启一个定时任务。</p><p>一个定时任务分为六个字段，前五段是时间设定段，第六段是要执行的命</p><p>令段，格式如下：</p><p>minute hour day month week command<br>其中：</p><ul><li>minute： 表示分钟，可以是从0到59之间的任何整数</li><li>hour：表示小时，可以是从0到23之间的任何整数</li><li>day：表示日期，可以是从1到31之间的任何整数</li><li>month：表示月份，可以是从1到12之间的任何整数</li><li>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日</li><li>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</li></ul><p>在以上各个字段中，还可以使用以下特殊字符：</p><ul><li>星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</li><li>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</li><li>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</li><li>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”</li><li>表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</li></ul><p>◆</p><p>按周期运行指令：anacron</p><p>◆</p><p>anacron是一个按天为单位周期性运行某些命令的工具，使用此工具需要指定任务的周期、延迟（分钟）、id、shell。</p><p>系统中现有的anacron可以通过以下命令查看：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>anacrontab</span><br></pre></td></tr></table></figure><p>再此配置文件中每一行都代表一个任务，一个任务分为4个字段，其格式如下：</p><ul><li>命令执行的频率（天数）</li><li>延迟时间（分钟）</li><li>任务描述</li><li>要执行的命令</li></ul><p>◆</p><p>指定时间执行一次任务：at</p><p>◆</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">at</span> <span class="number">13</span>:<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">at</span>&gt; <span class="keyword">sh </span>HelloWord.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>使用上述命令就可以在最近的13:30执行HelloWord脚本</p><p>辅助命令：</p><ul><li>atd //显示最近的任务队列</li><li>atq //显示待执行的at队列</li><li>atrm //删除待执行的at队</li></ul><p>◆</p><p>在系统不繁忙时执行任务：batch</p><p>◆</p><p>使用batch命令的任务不能指定执行时间，只能在系统负载降到0.8后才有机会执行。使用方式类似于at</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">batch</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">at&gt; </span><span class="keyword">sh </span>HelloWord.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/UAGihOEUPmFnwrgkSJZqpQ" target="_blank" rel="noopener">Java集合源码分析汇总-JDK1.8</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Linux常用命令速查-文件管理 </title>
      <link href="/2019/04/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2019/04/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>文件及目录</p><p>◆</p><p>查看当前所在目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>切换目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>cd进入用户主目录</code></pre></li><li><pre><code>cd .. 进入当前目录的上级目录</code></pre></li><li><pre><code>cd /app/logs 进入具体目录</code></pre></li></ul><p>列出当前目录的文件和子目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ls</span></span><br></pre></td></tr></table></figure><ul><li><pre><code>-a     列出所有目录、子目录、文件和隐藏文件</code></pre></li><li><pre><code>-R    列出从当前目录开始的所有的子目录、文件并且一层层往下显示</code></pre></li><li><pre><code>-t     以修改时间为时间倒序来列出文件、子目录</code></pre></li><li><pre><code> -l      以长列表格式显示文件、目录的详细信息（简写方式：ll）</code></pre></li></ul><p>创建目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> directoryName</span><br></pre></td></tr></table></figure><p>删除文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rm fileName</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-f 强制删除（不询问）</code></pre></li><li><pre><code>-r 删除目录</code></pre></li><li><pre><code>-rf 强制删除目录（不询问）</code></pre></li></ul><p>创建文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">touch fileName</span></span><br></pre></td></tr></table></figure><p>移动文件目录或重命名文件目录</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mv</span>  file1 file2 <span class="comment">//将file1重命名为file2</span></span><br><span class="line"><span class="keyword">mv</span> file1 /usr   <span class="comment">//将file1移动到/usr目录下</span></span><br></pre></td></tr></table></figure><p>拷贝文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="built_in">file</span> /<span class="built_in">directory</span> 将<span class="built_in">file</span>复制到<span class="built_in">directory</span>目录中</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-r 复制目录</code></pre></li><li><pre><code>-i 当目标文件存在，会询问是否覆盖，没有则不询问直接覆盖</code></pre></li></ul><p>跨主机复制</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp 本地文件 远程机器用户<span class="meta">@远程机器ip:远程机器文件夹</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-1  强制scp命令使用协议ssh1 </code></pre></li><li><pre><code>-2  强制scp命令使用协议ssh2 </code></pre></li><li><pre><code>-4  强制scp命令只使用IPv4寻址 </code></pre></li><li><pre><code>-6  强制scp命令只使用IPv6寻址</code></pre></li><li><pre><code>-B  使用批处理模式（传输过程中不询问传输口令或短语） </code></pre></li><li><pre><code>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能） </code></pre></li><li><pre><code>-p  保留原文件的修改时间，访问时间和访问权限</code></pre></li><li><pre><code>-q  不显示传输进度条</code></pre></li><li><pre><code>-r  递归复制整个目录</code></pre></li><li><pre><code>-v  详细方式显示输出 </code></pre></li><li><pre><code>-c  以cipher将数据传输进行加密，这个选项将直接传递给ssh</code></pre></li><li><pre><code>-F  指定一个替代的ssh配置文件，此参数直接传递给ssh</code></pre></li><li><pre><code>-i  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh </code></pre></li><li><pre><code>-l  限定用户所能使用的带宽，以Kbit/s为单位</code></pre></li><li><pre><code>-o  如果习惯于使用ssh_config(5)中的参数传递方式 </code></pre></li><li><pre><code>-P  指定数据传输用到的端口号</code></pre></li><li><pre><code>-S  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项</code></pre></li></ul><p>◆</p><p>文件查看</p><p>◆</p><p>cat</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> fileName   <span class="comment">//在屏幕上显示文件fileName的所有内容</span></span><br><span class="line"><span class="keyword">cat</span> &gt; filename <span class="comment">//创建文件</span></span><br><span class="line"><span class="keyword">cat</span>   file1  file2  &gt; <span class="keyword">file</span> <span class="comment">//将file1、file2的内容合并到file中</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-n 由 1 开始对所有输出的行数编号</code></pre></li><li><pre><code>-b 和 -n 相似，只不过对于空白行不编号</code></pre></li><li><pre><code>-s 当遇到有连续两行以上的空白行，就代换为一行的空白行</code></pre></li></ul><p>浏览文件</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">more</span> fileName</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-num 一次显示的行数</code></pre></li><li><pre><code>-f 计算行数时，以实际上的行数，而非自动换行过后的行数</code></pre></li><li><pre><code>-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容</code></pre></li><li><pre><code>-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料</code></pre></li><li><pre><code>-s 当遇到有连续两行以上的空白行，就代换为一行的空白行</code></pre></li><li><pre><code>-u 不显示下引号</code></pre></li><li><pre><code>+/pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示</code></pre></li><li><pre><code>+num 从第 num 行开始显示</code></pre></li></ul><p>常用操作：</p><ul><li><pre><code>Enter 向下n行，需要定义。默认为1行</code></pre></li><li><pre><code>Ctrl+F 向下滚动一屏</code></pre></li><li><pre><code>空格键 向下滚动一屏</code></pre></li><li><pre><code>Ctrl+B 返回上一屏</code></pre></li><li><pre><code>= 输出当前行的行号</code></pre></li><li><pre><code>：f 输出文件名和当前行的行号</code></pre></li><li><pre><code>V 调用vi编辑器</code></pre></li><li><pre><code>!命令 调用Shell，并执行命令</code></pre></li><li><pre><code>q 退出more</code></pre></li></ul><p>浏览文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">less</span> fileName</span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-b &lt;缓冲区大小&gt; 设置缓冲区的大小</code></pre></li><li><pre><code>-e 当文件显示结束后，自动离开</code></pre></li><li><pre><code>-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</code></pre></li><li><pre><code>-g 只标志最后搜索的关键词</code></pre></li><li><pre><code>-i 忽略搜索时的大小写</code></pre></li><li><pre><code>-m 显示类似more命令的百分比</code></pre></li><li><pre><code>-N 显示每行的行号</code></pre></li><li><pre><code>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</code></pre></li><li><pre><code>-Q 不使用警告音</code></pre></li><li><pre><code>-s 显示连续空行为一行</code></pre></li><li><pre><code>-S 行过长时间将超出部分舍弃</code></pre></li><li><pre><code>-x &lt;数字&gt; 将&quot;tab&quot;键显示为规定的数字空格</code></pre></li></ul><p>常用操作：</p><ul><li><pre><code>/字符串：向下搜索&quot;字符串&quot;的功能</code></pre></li><li><pre><code>?字符串：向上搜索&quot;字符串&quot;的功能</code></pre></li><li><pre><code>n：重复前一个搜索（与 / 或 ? 有关）</code></pre></li><li><pre><code>N：反向重复前一个搜索（与 / 或 ? 有关）</code></pre></li><li><pre><code>b 向后翻一页</code></pre></li><li><pre><code>d 向后翻半页</code></pre></li><li><pre><code>h 显示帮助界面</code></pre></li><li><pre><code>Q 退出less 命令</code></pre></li><li><pre><code>u 向前滚动半页</code></pre></li><li><pre><code>y 向前滚动一行</code></pre></li><li><pre><code>空格键 滚动一页</code></pre></li><li><pre><code>回车键 滚动一行</code></pre></li><li><pre><code>[pagedown]： 向下翻动一页</code></pre></li><li><pre><code>[pageup]： 向上翻动一页</code></pre></li></ul><p>查看文件开头</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">head fileName</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>默认显示文件前10行</code></pre></li><li><pre><code>-c  num 显示每个文件的前num 字节内容；如果附加&quot;-&quot;参数（-c -n），则除了每个文件的最后num字节数据外 显示剩余全部内容</code></pre></li><li><pre><code>-n  num 显示每个文件的前num 行内容；如果附加&quot;-&quot;参数，则除了每个文件的最后num 行外 显示剩余全部内容</code></pre></li></ul><p>查看文件末尾</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tail</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>默认显示文件最后10行</code></pre></li><li><pre><code>-n num 显示最后num行</code></pre></li><li><pre><code>-f 随着文件的更新而刷新，常用于查看不断写入的日志</code></pre></li></ul><p>◆</p><p>文件目录权限</p><p>◆</p><p>Linux系统中的每个文件和目录都有访问许可权限，用他来确定谁能通过何种方式对文件和目录进行访问和操作。</p><p>权限的分类:</p><ul><li>r  读权限：可以打开文件、目录读取查看；</li><li>w 写权限：对文件、目录可以编写更改；</li><li>x 执行权限：对文件可执行</li></ul><p>先看个实例：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master1 ~]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root     <span class="number"> 2234 </span>Mar<span class="number"> 22 </span>17:30 apollo.yaml</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root      <span class="number"> 360 </span>Aug<span class="number"> 31 </span><span class="number"> 2018 </span>dashboard-admin.yaml</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root<span class="number"> 298393600 </span>Dec<span class="number"> 21 </span>09:48 data_bak.tar</span><br><span class="line">-rwxr-xr-x. <span class="number"> 1 </span>root root      <span class="number"> 207 </span>Nov<span class="number"> 23 </span>16:56 docker-secret</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root      <span class="number"> 165 </span>Nov<span class="number"> 27 </span>21:35 k8s-join</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root      <span class="number"> 242 </span>Nov<span class="number"> 13 </span>20:23 k8s-node-reset</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root     <span class="number"> 2801 </span>Aug<span class="number"> 29 </span><span class="number"> 2018 </span>kube-flannel.yml</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root     <span class="number"> 4632 </span>Nov<span class="number"> 14 </span>16:17 kubernetes-dashboard.yaml</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root      <span class="number"> 199 </span>Dec<span class="number"> 28 </span>16:52 ns-pod.yaml</span><br><span class="line">drwxrwxr-x.<span class="number"> 14 </span>root root     <span class="number"> 4096 </span>Dec<span class="number"> 21 </span>14:59 prometheus-operator-0.26.0</span><br></pre></td></tr></table></figure><p>上方每个文件最左侧的10个字符就是此文件的权限相关数据：</p><ul><li><pre><code>第一个字符表示文件类型，d为目录 -为普通文件 l为连接 b为可存储的接口设备 c为键盘鼠标等输入设备</code></pre></li><li><pre><code>2、3、4个字符表示所有者权限，5、6、7个字符表示所有者同组用户权限，8、9、10为其他用户权限</code></pre></li><li><pre><code>第二个字符表示所有者读权限，如果有权限则为r，没有权限则为-</code></pre></li><li><pre><code>第三个字符表示所有者写权限，如果有权限则为w，没有权限则为-</code></pre></li><li><pre><code>第四个字符表示所有者执行权限，如果有权限则为x，没有权限则为-</code></pre></li><li><pre><code>第五个字符表示所有者同组用户读权限，如果有权限则为r，没有权限则为-</code></pre></li><li><pre><code>第六个字符表示所有者同组用户写权限，如果有权限则为w，没有权限则为-</code></pre></li><li><pre><code>第七个字符表示所有者同组用户执行权限，如果有权限则为x，没有权限则为-</code></pre></li><li><pre><code>第八个字符表示其他非同组读权限，如果有权限则为r，没有权限则为-</code></pre></li><li><pre><code>第九个字符表示其他非同组写权限，如果有权限则为w，没有权限则为-</code></pre></li><li><pre><code>第十个字符表示其他非同组执行权限，如果有权限则为x，没有权限则为-</code></pre></li></ul><p>修改权限</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="keyword">abc</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示所有者、所有者同组、及其他用户的权限其中r=4，w=2，x=1</p><ul><li><pre><code>rwx权限=7</code></pre></li><li><pre><code>rw权限=6</code></pre></li><li><pre><code>rx权限=5</code></pre></li><li><pre><code>r权限=4</code></pre></li><li><pre><code>例如设置file所有人可读可写可执行则使用 chmod 777 file</code></pre></li><li><pre><code>。。。</code></pre></li></ul><p>更改文件的所有者和所有组</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown user:<span class="keyword">group</span> <span class="title">fileName</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-R : 指定目录以及其子目录下的所有文件</code></pre></li></ul><p>◆</p><p>查找文件</p><p>◆</p><p>find</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find <span class="string">[查找目录]</span> <span class="string">[查找规则]</span> <span class="string">[查找完后的操作]</span></span><br></pre></td></tr></table></figure><p>查找目录：</p><ul><li><pre><code>.表示当前目录</code></pre></li><li><pre><code>/usr 路径</code></pre></li></ul><p>查找规则：</p><ul><li><pre><code>-name 按文件名 （可以使用通配符）</code></pre></li><li><pre><code>-iname 按文件名，不区分大小写（可以使用通配符）</code></pre></li><li><pre><code>-user 按用户(文件属主)</code></pre></li><li><pre><code>-size 按大小</code></pre></li><li><pre><code>-mtime 按最后一次修改时间</code></pre></li><li><pre><code>-atime 按最后一次访问时间</code></pre></li><li><pre><code>-type 按文件类型  f:file d:directory </code></pre></li><li><pre><code>-perm 按权限</code></pre></li></ul><p>Locate</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Locate</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-e   将排除在寻找的范围之外</code></pre></li><li><pre><code>-1  如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到 的档案</code></pre></li><li><pre><code>-f   将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案 放在资料库中。</code></pre></li><li><pre><code>-q  安静模式，不会显示任何错误讯息。</code></pre></li><li><pre><code>-n 至多显示 n个输出。</code></pre></li><li><pre><code>-r 使用正规运算式 做寻找的条件。</code></pre></li><li><pre><code>-o 指定资料库存的名称。</code></pre></li><li><pre><code>-d 指定资料库的路径</code></pre></li></ul><p>查找二进制文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">whereis</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li><pre><code>-b 　只查找二进制文件。</code></pre></li><li><pre><code>-B&lt;目录&gt; 　只在设置的目录下查找二进制文件。</code></pre></li><li><pre><code>-f 　不显示文件名前的路径名称。</code></pre></li><li><pre><code>-m 　只查找说明文件。</code></pre></li><li><pre><code>-M&lt;目录&gt; 　只在设置的目录下查找说明文件。</code></pre></li><li><pre><code>-s 　只查找原始代码文件。</code></pre></li><li><pre><code>-S&lt;目录&gt; 　只在设置的目录下查找原始代码文件。</code></pre></li><li><pre><code>-u 　查找不包含指定类型的文件。</code></pre></li></ul><p>◆</p><p>统计过滤</p><p>◆</p><p>过滤</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grep</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-E 开启扩展的正则表达式。</li><li>-i 忽略大小写</li><li>-v 只打印没有匹配的，而匹配的反而不打印。</li><li><pre><code>-n 显示行号</code></pre></li><li><pre><code>-w 被匹配的文本只能是单词，而不能是单词中的某一部分</code></pre></li><li>-c 显示总共有多少行被匹配到了，如果同时使用-cv选项是显示有多少行没有被匹配到。</li><li><pre><code>-o 只显示被模式匹配到的字符串。</code></pre></li><li>–color 将匹配到的内容以颜色高亮显示。</li><li>-A  n显示匹配到的字符串所在的行及其后n行</li><li>-B  n显示匹配到的字符串所在的行及其前n行</li><li><pre><code>-C  n显示匹配到的字符串所在的行及其前后各n行</code></pre></li></ul><p>统计</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wc</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ul><li>-l  统计多少行</li><li>-w 统计多少个单词</li><li>-c  统计多少个字符</li></ul><p>◆解压缩</p><p>◆</p><p>tar包</p><ul><li>解压：tar zxvf FileName.tar</li><li><pre><code>压缩：tar czvf FileName.tar DirName</code></pre></li></ul><p>gz包</p><ul><li>解压：gunzip FileName.gz</li><li>压缩：gzip FileName</li></ul><p>tar.gz包</p><ul><li>解压：tar zxvf FileName.tar.gz</li><li>压缩：tar zcvf FileName.tar.gz DirName</li></ul><p>Z包</p><ul><li>解压：uncompress FileName.Z</li><li>压缩：compress FileName</li></ul><p>tar.Z包</p><ul><li>解压：tar Zxvf FileName.tar.Z</li><li>压缩：tar Zcvf FileName.tar.Z DirName</li></ul><p>zip包</p><ul><li>解压：unzip FileName.zip</li><li>压缩：zip FileName.zip DirName</li></ul><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ul><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li></ul><ol start="2"><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Linux常用命令速查-用户管理 </title>
      <link href="/2019/04/11/nux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
      <url>/2019/04/11/nux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>用户组</p><p>◆</p><p>查看当前用户所属的用户组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groups</span></span><br></pre></td></tr></table></figure><p>查看所有用户组</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@node2 ~]</span># <span class="selector-tag">cat</span> /<span class="selector-tag">etc</span>/<span class="selector-tag">group</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">root</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:0</span>:</span><br><span class="line"><span class="selector-tag">bin</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:1</span>:</span><br><span class="line"><span class="selector-tag">daemon</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:2</span>:</span><br><span class="line"><span class="selector-tag">sys</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:3</span>:</span><br><span class="line"><span class="selector-tag">adm</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:4</span>:</span><br><span class="line"><span class="selector-tag">tty</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:5</span>:</span><br><span class="line"><span class="selector-tag">disk</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:6</span>:</span><br></pre></td></tr></table></figure><p>文件格式：</p><p>用户组名称：用户组密码：GID：用户列表，每个用户之间用,号分割；本字段可以为空；如果字段为空表示用户组为GID的用户名；</p><p>增加用户组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupadd testgroup</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-g 指定新用户组的GID。</p></li><li><p>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</p></li></ol><p>删除用户组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupdel testgroup</span></span><br></pre></td></tr></table></figure><p>修改用户组</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g <span class="number">110</span> -<span class="built_in">n</span> testgroup1 testgroup</span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-g GID 为用户组指定新的组标识号。</p></li><li><p>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p></li><li><p>-n新用户组 将用户组的名字改为新名字</p></li></ol><p>切换用户组<br>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span><span class="type">grp</span> root</span><br></pre></td></tr></table></figure><p>◆</p><p>用户</p><p>◆</p><p>查看系统所有用户</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node2</span> ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">mysql:</span><span class="symbol">x:</span><span class="number">27</span><span class="symbol">:</span><span class="number">27</span><span class="symbol">:MySQL</span> <span class="symbol">Server:</span>/var/lib/<span class="symbol">mysql:</span>/bin/<span class="keyword">false</span></span><br><span class="line"><span class="symbol">jenkins:</span><span class="symbol">x:</span><span class="number">996</span><span class="symbol">:</span><span class="number">992</span><span class="symbol">:Jenkins</span> Automation <span class="symbol">Server:</span>/var/lib/<span class="symbol">jenkins:</span>/bin/<span class="keyword">false</span></span><br><span class="line"><span class="symbol">etcd:</span><span class="symbol">x:</span><span class="number">995</span><span class="symbol">:</span><span class="number">991</span><span class="symbol">:etcd</span> <span class="symbol">user:</span>/var/lib/<span class="symbol">etcd:</span>/sbin/nologin</span><br><span class="line"><span class="symbol">apache:</span><span class="symbol">x:</span><span class="number">48</span><span class="symbol">:</span><span class="number">48</span><span class="symbol">:Apache</span><span class="symbol">:/usr/share/httpd</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">es:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span><span class="symbol">:/home/es</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">testUser:</span><span class="symbol">x:</span><span class="number">1002</span><span class="symbol">:</span><span class="number">1003</span><span class="symbol">:</span><span class="symbol">:/home/testUser</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure><p>文件格式：</p><p>用户名:密码:UID:GID:用户信息:HOME目录路径:用户shell</p><p>添加用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd testUser</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li><p>-c comment 指定一段注释</p></li><li><p>-d 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</p></li><li><p>-g 指定用户所属的用户组</p></li><li><p>-G 指定用户所属的附加组</p></li><li><p>-s Shell文件 指定用户的登录Shell</p></li><li><p>-u 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</p></li></ol><p>删除用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">userdel testUser</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li>-r把用户的主目录一起删除</li></ol><p>修改帐号</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">usermod testUser</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>使用添加用户所用的参数修改</p></li><li><p>-l 指定新用户名</p></li></ol><p>修改用户密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">passwd testUser</span></span><br></pre></td></tr></table></figure><p>当前用户使用此命令</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Old <span class="string">password:</span>****** </span><br><span class="line">New <span class="string">password:</span>******* </span><br><span class="line">Re-enter <span class="keyword">new</span> <span class="string">password:</span>*******</span><br></pre></td></tr></table></figure><p>root用户使用此命令</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">New <span class="string">password:</span>******* </span><br><span class="line">Re-enter <span class="keyword">new</span> <span class="string">password:</span>*******</span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-l 禁用用户。</p></li><li><p>-u 解除禁用。</p></li><li><p>-d 取消密码。</p></li><li><p>-f 强迫用户下次登录时修改口令。</p></li></ol><p>删除用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">userdel testUser</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li>-r 删除用户目录</li></ol><p>◆</p><p>其他命令</p><p>◆</p><p>显示目前登入系统的用户信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">who</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-H 显示各栏位的标题信息列</p></li><li><p>-u　显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成&quot;.&quot;号，如果该用户已超过24小时没有任何动作，则标示出&quot;old&quot;字符串</p></li><li><p>-q 　只显示登入系统的帐号名称和总人数</p></li></ol><p>显示目前登入系统的用户信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# w</span><br><span class="line"></span><br><span class="line"> 21:34:56 up 20 days, 10:04,  1 user,  load average: 0.14, 0.08, 0.06</span><br><span class="line">USER     TTY      <span class="keyword">FROM</span>             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    10.0.20.149      20:54    0.00s  0.19s  0.03s w</span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-f 开启或关闭显示用户从何处登入系统。</p></li><li><p>-h不显示各栏位的标题信息列。</p></li><li><p>-l使用详细格式列表，此为预设值。</p></li><li><p>-s使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。</p></li><li><p>-u忽略执行程序的名称，以及该程序耗费CPU时间的信息。</p></li></ol><p>切换用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">su testUser</span></span><br></pre></td></tr></table></figure><p>检测/etc/passwd文件是否正常</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pwck</span></span><br></pre></td></tr></table></figure><p>查看用户上次登录时间</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lastlog</span></span><br></pre></td></tr></table></figure><p>登入失败的用户名单</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lastb</span></span><br></pre></td></tr></table></figure><p>常用参数：</p><ol><li><p>-a把从何处登入系统的主机名称或IP地址显示在最后一行。</p></li><li><p>-d将IP地址转换成主机名称</p></li><li><p>-f指定记录文件</p></li><li><p>-n&lt;显示列数&gt;或-&lt;显示列数&gt; 　设置列出名单的显示列数</p></li><li><p>-R 不显示登入系统的主机名称或IP地址</p></li><li><p>-x 　显示系统关机，重新开机，以及执行等级的改变等信息</p></li></ol><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-TreeMap源码解析-JDK1.8</title>
      <link href="/2019/04/09/Java%E9%9B%86%E5%90%88-TreeMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/09/Java%E9%9B%86%E5%90%88-TreeMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>TreeMap简介</p><p>◆</p><p>推荐查看此篇文章之前首先查看 <a href="https://mp.weixin.qq.com/s/lM3A9MrL_XlVw2bVo55Dng" target="_blank" rel="noopener">HashMap源码分析</a> 效果更佳哦</p><p>TreeMap在jdk 1.8中使用用的是红黑树的结构来进行存储的，一个典型的红黑树就如下图所示：<br><img src="/2019/04/09/Java集合-TreeMap源码解析-JDK1-8/1.png" alt="1"></p><p>而这个结构在代码中表现是这样的：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        K <span class="built_in">key</span>;</span><br><span class="line">        V value;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; left;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; right;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="built_in">boolean</span> <span class="built_in">color</span> = BLACK;</span><br><span class="line">        </span><br><span class="line">        Entry(K <span class="built_in">key</span>, V value, TreeMap.Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>TreeMap的属性</p><p>◆</p><p>TreeMap的一些基础属性：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较器对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line"><span class="comment">//根节点对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> TreeMap.Entry&lt;K,V&gt; root;</span><br><span class="line"><span class="comment">//集合的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//结构被修改的次数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>◆</p><p>TreeMap的构造方法</p><p>◆</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 使用默认比较器</span><br><span class="line">    * key的类型是什么</span><br><span class="line">    * 就采用该类型的compareTo方法来比较大小</span><br><span class="line">    * 例如key为String类型，就会用String类的compareTo方法比对大小</span><br><span class="line">    */</span><br><span class="line">   public TreeMap() &#123;</span><br><span class="line">       comparator = null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 指定比较器</span><br><span class="line">    */</span><br><span class="line">   public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span><br><span class="line">       this.comparator = comparator;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 添加集合</span><br><span class="line">    */</span><br><span class="line">   public TreeMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">       comparator = null;</span><br><span class="line">       <span class="attribute">putAll(m);</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 将m转换为TreeMap，使用m的比较器</span><br><span class="line">    */</span><br><span class="line">   public TreeMap(SortedMap&lt;K, ? extends V&gt; m) &#123;</span><br><span class="line">       comparator = m.comparator();</span><br><span class="line">       try &#123;</span><br><span class="line">           buildFromSorted(m.size(), m.entrySet().iterator(), null, null);</span><br><span class="line">       &#125; catch (java.io.IOException cannotHappen) &#123;</span><br><span class="line">       &#125; catch (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>HashMap的添加方法</p><p>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="comment">//如果跟节点为空，把此节点置为跟节点</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            compare(<span class="built_in">key</span>, <span class="built_in">key</span>); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">            root = <span class="keyword">new</span> TreeMap.Entry&lt;&gt;(<span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="built_in">size</span> = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> cmp;</span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;]</span><br><span class="line">        <span class="comment">//如果指定比较器</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//循环比较，插入到合适的位置</span></span><br><span class="line">            do &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(<span class="built_in">key</span>, t.<span class="built_in">key</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果比较器对象为空，使用默认的比较机制</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">key</span> == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) <span class="built_in">key</span>;</span><br><span class="line">            do &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.<span class="built_in">key</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据key找到父节点后新建一个节点</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; e = <span class="keyword">new</span> TreeMap.Entry&lt;&gt;(<span class="built_in">key</span>, value, parent);</span><br><span class="line">        <span class="comment">// 根据比较的结果来确定放在左子树还是右子树</span></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        <span class="comment">// 插入完成，红黑树的结构会被破坏，执行红黑树的恢复操作</span></span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        <span class="comment">//集合大小增加</span></span><br><span class="line">        <span class="built_in">size</span>++;</span><br><span class="line">        <span class="comment">//修改次数增加</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>TreeMap的查找</p><p>◆</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">　</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 根据key获取</span><br><span class="line">    */</span><br><span class="line">   public V get(Object key) &#123;</span><br><span class="line">       TreeMap.Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">       return (p==null ? null : p.value);</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 根据key获取Entry对象</span><br><span class="line">    */</span><br><span class="line">   final TreeMap.Entry&lt;K,V&gt; getEntry(Object key) &#123;</span><br><span class="line">       // Offload comparator-based version for sake of performance</span><br><span class="line">       if (comparator != null)</span><br><span class="line">           return getEntryUsingComparator(key);</span><br><span class="line">       if (key == null)</span><br><span class="line">           throw new NullPointerException();</span><br><span class="line">       @SuppressWarnings("unchecked")</span><br><span class="line">       Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span><br><span class="line">       TreeMap.Entry&lt;K,V&gt; p = root;</span><br><span class="line">       //循环遍历查找</span><br><span class="line">       while (p != null) &#123;</span><br><span class="line">           int cmp = k.compareTo(p.key);</span><br><span class="line">           if (cmp &lt; 0)</span><br><span class="line">               p = p.left;</span><br><span class="line">           else if (cmp &gt; 0)</span><br><span class="line">               p = p.right;</span><br><span class="line">           <span class="attribute">else</span></span><br><span class="line">               return p;</span><br><span class="line">       &#125;</span><br><span class="line">       return null;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>TreeMap的删除</p><p>◆</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V remove(Object key) &#123;</span><br><span class="line">        <span class="comment">//查找元素是否存在</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="built_in">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">null</span>;</span><br><span class="line">        V oldValue = p.value;</span><br><span class="line">        <span class="comment">//调用具体的删除方法</span></span><br><span class="line">        deleteEntry(p);</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的删除方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="literal">void</span> deleteEntry(TreeMap.Entry&lt;K,V&gt; p) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果待删除节点有两个子节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.left != <span class="built_in">null</span> &amp;&amp; p.right != <span class="built_in">null</span>) &#123;</span><br><span class="line">            TreeMap.Entry&lt;K,V&gt; s = successor(p);</span><br><span class="line">            p.key = s.key;</span><br><span class="line">            p.value = s.value;</span><br><span class="line">            p = s;</span><br><span class="line">        &#125; <span class="comment">// p has 2 children</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start fixup at replacement node, if it exists.</span></span><br><span class="line">        TreeMap.Entry&lt;K,V&gt; replacement = (p.left != <span class="built_in">null</span> ? p.left : p.right);</span><br><span class="line">        <span class="comment">//待删除节点只有一个孩子</span></span><br><span class="line">        <span class="keyword">if</span> (replacement != <span class="built_in">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Link replacement to parent</span></span><br><span class="line">            replacement.<span class="keyword">parent</span> = p.<span class="keyword">parent</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.<span class="keyword">parent</span> == <span class="built_in">null</span>)</span><br><span class="line">                root = replacement;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.<span class="keyword">parent</span>.left)</span><br><span class="line">                p.<span class="keyword">parent</span>.left  = replacement;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.<span class="keyword">parent</span>.right = replacement;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></span><br><span class="line">            p.left = p.right = p.<span class="keyword">parent</span> = <span class="built_in">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fix replacement</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(replacement);</span><br><span class="line">            <span class="comment">//如果是根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.<span class="keyword">parent</span> == <span class="built_in">null</span>) &#123; <span class="comment">// return if we are the only node.</span></span><br><span class="line">            root = <span class="built_in">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//  没有子节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(p);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p.<span class="keyword">parent</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p == p.<span class="keyword">parent</span>.left)</span><br><span class="line">                    p.<span class="keyword">parent</span>.left = <span class="built_in">null</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == p.<span class="keyword">parent</span>.right)</span><br><span class="line">                    p.<span class="keyword">parent</span>.right = <span class="built_in">null</span>;</span><br><span class="line">                p.<span class="keyword">parent</span> = <span class="built_in">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，TreeMap完整源码解析请点击“<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/TreeMap.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>”查看！！！</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-Hashtable源码解析-JDK1.8</title>
      <link href="/2019/04/09/Java%E9%9B%86%E5%90%88-Hashtable%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/09/Java%E9%9B%86%E5%90%88-Hashtable%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>Hashtable简介</p><p>◆</p><p>推荐查看此篇文章之前首先查看 <a href="https://mp.weixin.qq.com/s/lM3A9MrL_XlVw2bVo55Dng" target="_blank" rel="noopener">HashMap源码分析</a>  效果更佳哦</p><p>与HashMap的数组加链表加红黑树不同，Hashtable在jdk 1.8中仅仅使用了数组+链表的方式进行存储。</p><p>◆</p><p>HashMap的属性</p><p>◆</p><p>HashMap的一些基础属性：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保村数据的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?, ?&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">count</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容阈值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @serial</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被修改的次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * use serialVersionUID from JDK 1.0.2 for interoperability</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1421746759512286392</span>L;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>HashMap存储数据所使用的链表数据结构：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> Entry&lt;K, V&gt; <span class="keyword">implements</span> Map.Entry&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Hashtable.Entry&lt;K, V&gt; <span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> Entry(<span class="keyword">int</span> hash, K key, V value, Hashtable.Entry&lt;K, V&gt; <span class="keyword">next</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>Hashtable的构造方法</p><p>◆</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定初始容量和加载因子</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> +</span><br><span class="line">                   initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span> + loadFactor);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>)</span><br><span class="line">           initialCapacity = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       table = <span class="keyword">new</span> Entry&lt;?, ?&gt;[initialCapacity];</span><br><span class="line">       threshold = (<span class="keyword">int</span>) Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定初始容量，加载因子使用默认的0.75</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认构造方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加一个map</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(Math.max(<span class="number">2</span> * t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">       putAll(t);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>Hashtable的添加方法</p><p>◆</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized V <span class="title">put</span>(<span class="params">K key, V <span class="keyword">value</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Make sure the value is not null</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        Entry&lt;?, ?&gt; tab[] = table;</span><br><span class="line">        <span class="comment">//计算key的哈希值</span></span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="comment">//计算key应该放的索引</span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">        Entry&lt;K, V&gt; entry = (Entry&lt;K, V&gt;) tab[index];</span><br><span class="line">        <span class="comment">//如果存在值则替换</span></span><br><span class="line">        <span class="keyword">for</span> (; entry != <span class="literal">null</span>; entry = entry.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.<span class="keyword">equals</span>(key)) &#123;</span><br><span class="line">                V old = entry.<span class="keyword">value</span>;</span><br><span class="line">                entry.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不存在调用具体的添加方法</span></span><br><span class="line">        addEntry(hash, key, <span class="keyword">value</span>, index);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span>(<span class="params"><span class="keyword">int</span> hash, K key, V <span class="keyword">value</span>, <span class="keyword">int</span> index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//修改次数增加</span></span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?, ?&gt; tab[] = table;</span><br><span class="line">        <span class="comment">//判断是否需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">            rehash();</span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            <span class="comment">//对本次添加的元素重新计算hash</span></span><br><span class="line">            hash = key.hashCode();</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates the new entry.</span></span><br><span class="line">        @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">        Entry&lt;K, V&gt; e = (Entry&lt;K, V&gt;) tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, <span class="keyword">value</span>, e);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>Hashtable的扩容</p><p>◆</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 扩容方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">  protected void rehash() &#123;</span><br><span class="line">      int oldCapacity = table.length;</span><br><span class="line">      Entry&lt;?, ?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 尝试扩容2倍再+1</span></span><br><span class="line">      int <span class="keyword">new</span><span class="type">Capacity</span> = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//如果扩容后大于最大数组大小，就用最大数组大小</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">              <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          <span class="keyword">new</span><span class="type">Capacity</span> = MAX_ARRAY_SIZE;</span><br><span class="line">      &#125;</span><br><span class="line">      Entry&lt;?, ?&gt;[] <span class="keyword">new</span><span class="type">Map</span> = <span class="keyword">new</span> <span class="type">Entry</span>&lt;?, ?&gt;[<span class="keyword">new</span><span class="type">Capacity</span>];</span><br><span class="line"></span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="comment">// 计算新的扩容阈值</span></span><br><span class="line">      threshold = (int) Math.min(<span class="keyword">new</span><span class="type">Capacity</span> * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">      table = <span class="keyword">new</span><span class="type">Map</span>;</span><br><span class="line">      <span class="comment">// 转移原结构中数据到新结构中</span></span><br><span class="line">      <span class="keyword">for</span> (int i = oldCapacity; i-- &gt; <span class="number">0</span>; ) &#123;</span><br><span class="line">          <span class="keyword">for</span> (Entry&lt;K, V&gt; old = (Entry&lt;K, V&gt;) oldMap[i]; old != <span class="literal">null</span>; ) &#123;</span><br><span class="line">              Entry&lt;K, V&gt; e = old;</span><br><span class="line">              old = old.next;</span><br><span class="line"></span><br><span class="line">              int index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % <span class="keyword">new</span><span class="type">Capacity</span>;</span><br><span class="line">              e.next = (Entry&lt;K, V&gt;) <span class="keyword">new</span><span class="type">Map</span>[index];</span><br><span class="line">              <span class="keyword">new</span><span class="type">Map</span>[index] = e;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>Hashtable的查找</p><p>◆</p><p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查找方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">      Entry&lt;?, ?&gt; tab[] = table;</span><br><span class="line">      <span class="comment">//计算哈希</span></span><br><span class="line">      <span class="built_in">int</span> hash = <span class="built_in">key</span>.hashCode();</span><br><span class="line">      <span class="built_in">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">      <span class="comment">//遍历单向链表</span></span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;?, ?&gt; e = tab[index]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.<span class="built_in">key</span>.equals(<span class="built_in">key</span>)) &#123;</span><br><span class="line">              <span class="keyword">return</span> (V) e.value;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>查找时先定位键值对所在的桶的位置，然后再对链表或红黑树进行查找</p><p>◆</p><p>Hashtable的删除</p><p>◆</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">     * 删除方法</span><br><span class="line">     */</span><br><span class="line">    public synchronized V remove(Object key) &#123;</span><br><span class="line">        Entry&lt;?, ?&gt; tab[] = table;</span><br><span class="line">        //计算hash</span><br><span class="line">        int hash = key.hashCode();</span><br><span class="line">        int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">        @SuppressWarnings("unchecked")</span><br><span class="line">        Entry&lt;K, V&gt; e = (Entry&lt;K, V&gt;) tab[index];</span><br><span class="line">        //遍历链表删除</span><br><span class="line">        for (Entry&lt;K, V&gt; prev = null; e != null; prev = e, e = e.next) &#123;</span><br><span class="line">            if ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="attribute">modCount++;</span></span><br><span class="line">                if (prev != null) &#123;</span><br><span class="line">                    prev.next = e.next;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    tab[index] = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="attribute">count--;</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = null;</span><br><span class="line">                return oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看了Hashtable的增删改查方法你就明白了为什么他是线程安全的了这哥们的方法都是使用synchronize修饰的。</p><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，Hashtable完整源码解析请点击“<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/Hashtable.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>”查看！！！</p><p></p><h4 style="color:red"><span id="推荐阅读">推荐阅读</span></h4><p></p><ol><li><a href="https://mp.weixin.qq.com/s/c3ngvdAc6lAs4d1sIdg16Q/" target="_blank" rel="noopener">多线程面试必备基础知识汇总</a></li><li><a href="https://mp.weixin.qq.com/s/TL4w0u6QA-wFx19IH9Xs6A" target="_blank" rel="noopener">SpringCloud学习系列汇总</a></li></ol><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-HashMap源码解析-JDK1.8</title>
      <link href="/2019/04/08/Java%E9%9B%86%E5%90%88-HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/08/Java%E9%9B%86%E5%90%88-HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆<br>HashMap简介<br>◆</p><p>HashMap在jdk 1.8中使用用的是数组+链表+红黑树的结构来进行存储的，请看下图：<br><img src="/2019/04/08/Java集合-HashMap源码解析-JDK1-8/1.png" alt="1"></p><p>当要对一个HashMap进行增删改查等操作时，一般情况下都是先根据key的Hash值定位到key在左侧数组桶的位置，然后判断当前的数组桶是使用的链表存储还是使用了红黑树存储。</p><p>举一个简单的例子，我们要往HashMap中添加一个元素21，经过一个特定Hash算法得出的结果是索引0，所以我们把21这个元素放到了数组桶索引0的第一个位置上，因为这个时候索引0的位置上还没有元素，所以是以链表的方式存储的，接着继续添加33节点。。。如上图</p><p>接着当索引3的位置上的元素超过了一个界限以后，如果还使用链表的方式进行存储的话效率比较低，所以把整个链表转换成了红黑树进行存储</p><p>◆<br>HashMap的属性<br>◆</p><p>HashMap的一些基础属性：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认的初始容量 默认16</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 最大容量，2的30次方</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认扩展因子，比如初始情况下，当键值对的数量大于 16 * 0.75 = 12 时，就会触发扩容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 当某个箱子中，链表长度大于 8 时，有可能会转化成树</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 哈希表扩容时，如果发现链表长度小于 6，则会由树重新退化为链表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在转变成树之前，还会判断一次，只有键值对数量大于 64 才会发生转换。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 存储数据的Entry数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">HashMap</span>.Node&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * HashMap的大小，它是HashMap保存的键值对的数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * HashMap被修改的次数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="built_in">int</span> modCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  当前 HashMap 所能容纳键值对数量的最大值，超过这个值，则需扩容</span></span><br><span class="line"><span class="comment">    * （threshold = 容量*实际扩展因子）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">int</span> threshold;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实际的扩展因子</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @serial</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">final</span> <span class="built_in">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p>HashMap存储数据所使用的链表数据结构：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单向链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> Node&lt;K, V&gt; <span class="keyword">implements</span> Map.Entry&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="comment">//hash值</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="comment">//键</span></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="comment">//值</span></span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">//下一个节点</span></span><br><span class="line">        HashMap.Node&lt;K, V&gt; <span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, HashMap.Node&lt;K, V&gt; <span class="keyword">next</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>HashMap存储数据所使用的红黑树数据结构：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode&lt;K</span>, <span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="type">HashMap</span>.<span class="type">TreeNode</span>&lt;<span class="type">K</span>, <span class="type">V</span>&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">       <span class="type">HashMap</span>.<span class="type">TreeNode</span>&lt;<span class="type">K</span>, <span class="type">V</span>&gt; left;</span><br><span class="line">       <span class="type">HashMap</span>.<span class="type">TreeNode</span>&lt;<span class="type">K</span>, <span class="type">V</span>&gt; right;</span><br><span class="line">       <span class="type">HashMap</span>.<span class="type">TreeNode</span>&lt;<span class="type">K</span>, <span class="type">V</span>&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">       boolean red;</span><br><span class="line"></span><br><span class="line">       <span class="type">TreeNode</span>(int hash, <span class="type">K</span> key, <span class="type">V</span> <span class="keyword">val</span>, <span class="type">HashMap</span>.<span class="type">Node</span>&lt;<span class="type">K</span>, <span class="type">V</span>&gt; next) &#123;</span><br><span class="line">           <span class="keyword">super</span>(hash, key, <span class="keyword">val</span>, next);</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>◆<br>HashMap的构造方法<br>◆</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定初始容量及加载因子的构造方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                   initialCapacity);</span><br><span class="line">       <span class="comment">//如果指定的初始容量大于预定义允许的最大容量则使用预定义允许的最大容量</span></span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                   loadFactor);</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       <span class="comment">//计算当前HashMap的容量</span></span><br><span class="line">       <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定初始容量及加载因子的构造方法，加载因子使用默认0.75f</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认构造方法，初始容量为16，加载因子为0.75f</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 包含子map的构造方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">       <span class="comment">// 将m中的全部元素逐个添加到HashMap中</span></span><br><span class="line">       putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据初始容量计算计算当前HashMap的容量</span></span><br><span class="line"><span class="comment">    * 检查所传的参数是否为2的幂次方</span></span><br><span class="line"><span class="comment">    * 如果不为2的幂次方则将其变为比cap大的最小的2的幂次方的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> final <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">       n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">       n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">       n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">       n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">       n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">       <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>◆<br>HashMap的添加方法<br>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算key的hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = <span class="built_in">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的添加方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">                   <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">        <span class="keyword">HashMap</span>.Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">HashMap</span>.Node&lt;K, V&gt; p;</span><br><span class="line">        <span class="built_in">int</span> n, i;</span><br><span class="line">        <span class="comment">//如果Map为空或者容量为0</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//扩容</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">HashMap</span>.Node&lt;K, V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line">             <span class="comment">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> <span class="keyword">HashMap</span>.TreeNode)</span><br><span class="line">                e = ((<span class="keyword">HashMap</span>.TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 对链表进行遍历，并统计链表长度</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            <span class="comment">// 链表&gt;=树化阈值，则进行树化操作</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//表示当前链表包含要插入的键值对，终止遍历</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断要插入的键值对是否存在 HashMap 中</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="comment">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (++<span class="built_in">size</span> &gt; threshold)</span><br><span class="line">            <span class="comment">// 键值对数量超过阈值，进行扩容</span></span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个添加方法主要包含以下逻辑：</p><ol><li>判断Map是否初始化，如果没有初始化则通过扩容的方式进行初始化操作</li><li>判断要添加的节点是否等于通过hash计算出的索引的位置的第一个链表元素</li><li>判断此位置的元素是否是使用红黑树存储，如果是则调用红黑树的添加方法</li><li>此位置的元素使用的是链表存储，判断新插入的元素在链表中存在，如果存在则替换，不存在就插入到列表最后。计算链表是否需要转换为红黑树</li><li>添加结束之后再次判断是否需要扩容</li></ol><p>◆<br>HashMap的扩容<br>◆</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 扩容方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   final HashMap.Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">       HashMap.Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">       <span class="comment">//HashMap的长度</span></span><br><span class="line">       int oldCap = (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : <span class="type">oldTab</span>.length;</span><br><span class="line">       <span class="comment">//当然HashMap容量</span></span><br><span class="line">       int oldThr = threshold;</span><br><span class="line">       <span class="comment">//新的HashMap长度和容量</span></span><br><span class="line">       int <span class="keyword">new</span><span class="type">Cap</span>, <span class="keyword">new</span><span class="type">Thr</span> = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//判断数组桶是否初始化</span></span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//如果超过了数组的最大容量值，则扩容到Integer.MAX_VALUE</span></span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//newCap=hashMap的长度*2</span></span><br><span class="line">           <span class="comment">//newCap&lt;最大容量且&gt;=初始容量</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">new</span><span class="type">Cap</span> = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                   oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               <span class="comment">//newThr=扩容的阈值*2</span></span><br><span class="line">               <span class="keyword">new</span><span class="type">Thr</span> = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//没有初始化，并且扩容阈值大于0</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">           <span class="keyword">new</span><span class="type">Cap</span> = oldThr;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 调用无参构造方法时，桶数组容量为默认容量，</span></span><br><span class="line">           <span class="comment">// 阈值为默认容量与默认负载因子乘积</span></span><br><span class="line">           <span class="keyword">new</span><span class="type">Cap</span> = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">           <span class="keyword">new</span><span class="type">Thr</span> = (int) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Thr</span> == <span class="number">0</span>) &#123;</span><br><span class="line">           float ft = (float) <span class="keyword">new</span><span class="type">Cap</span> * loadFactor;</span><br><span class="line">           <span class="keyword">new</span><span class="type">Thr</span> = (<span class="keyword">new</span><span class="type">Cap</span> &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float) MAXIMUM_CAPACITY ?</span><br><span class="line">                   (int) ft : <span class="type">Integer</span>.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       threshold = <span class="keyword">new</span><span class="type">Thr</span>;</span><br><span class="line">       <span class="comment">//创建新的数据缓冲区</span></span><br><span class="line">       @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">       HashMap.Node&lt;K, V&gt;[] <span class="keyword">new</span><span class="type">Tab</span> = (HashMap.Node&lt;K, V&gt;[]) <span class="keyword">new</span> <span class="type">HashMap</span>.Node[<span class="keyword">new</span><span class="type">Cap</span>];</span><br><span class="line">       table = <span class="keyword">new</span><span class="type">Tab</span>;</span><br><span class="line">       <span class="comment">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class="line">       <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               HashMap.Node&lt;K, V&gt; e;</span><br><span class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                   oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                   <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                       <span class="keyword">new</span><span class="type">Tab</span>[e.hash &amp; (<span class="keyword">new</span><span class="type">Cap</span> - <span class="number">1</span>)] = e;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof HashMap.TreeNode)</span><br><span class="line">                       <span class="comment">//对红黑树进行拆分</span></span><br><span class="line">                       ((HashMap.TreeNode&lt;K, V&gt;) e).split(<span class="built_in">this</span>, <span class="keyword">new</span><span class="type">Tab</span>, j, oldCap);</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                       HashMap.Node&lt;K, V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                       HashMap.Node&lt;K, V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                       HashMap.Node&lt;K, V&gt; next;</span><br><span class="line">                       <span class="comment">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class="line">                       <span class="keyword">do</span> &#123;</span><br><span class="line">                           next = e.next;</span><br><span class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                       <span class="comment">// 将分组后的链表映射到新桶中</span></span><br><span class="line">                       <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                           loTail.next = <span class="literal">null</span>;</span><br><span class="line">                           <span class="keyword">new</span><span class="type">Tab</span>[j] = loHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                           hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                           <span class="keyword">new</span><span class="type">Tab</span>[j + oldCap] = hiHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Tab</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>整个扩容方法主要包含以下逻辑：</p><ol><li>首先判断HashMap是否已初始化，没有初始化则执行初始化逻辑</li><li>如果已初始化则进行扩容HashMap 。正常情况下按当前桶数组长度的2倍进行扩容，阈值也变为原来的2倍（如果计算过程中，阈值溢出归零，则按阈值公式重新计算）</li><li>将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则各个节点重新进行hash</li></ol><p>◆<br>HashMap的查找<br>◆</p><p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据键获取值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       <span class="keyword">HashMap</span>.Node&lt;K, V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(<span class="built_in">key</span>), <span class="built_in">key</span>)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 具体的查找方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">HashMap</span>.Node&lt;K, V&gt; getNode(<span class="built_in">int</span> hash, <span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       <span class="keyword">HashMap</span>.Node&lt;K, V&gt;[] tab;</span><br><span class="line">       <span class="keyword">HashMap</span>.Node&lt;K, V&gt; first, e;</span><br><span class="line">       <span class="built_in">int</span> n;</span><br><span class="line">       K k;</span><br><span class="line">       <span class="comment">//定位键值对所在桶的位置</span></span><br><span class="line">       <span class="comment">//tab=table</span></span><br><span class="line">       <span class="comment">//n=table.length</span></span><br><span class="line">       <span class="comment">//first=table[table.length-1]</span></span><br><span class="line">       <span class="comment">//k=first.key</span></span><br><span class="line">       <span class="comment">//e=first.key</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">               (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                   ((k = first.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//如果是使用红黑树，则调用黑红树查找方法</span></span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> <span class="keyword">HashMap</span>.TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((<span class="keyword">HashMap</span>.TreeNode&lt;K, V&gt;) first).getTreeNode(hash, <span class="built_in">key</span>);</span><br><span class="line">               <span class="comment">//</span></span><br><span class="line">               do &#123;</span><br><span class="line">                   <span class="comment">//对链表进行遍历查找</span></span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                           ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>查找时先定位键值对所在的桶的位置，然后再对链表或红黑树进行查找</p><p>◆<br>HashMap的删除<br>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的删除方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">HashMap</span>.Node&lt;K, V&gt; removeNode(<span class="built_in">int</span> hash, <span class="keyword">Object</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value,</span><br><span class="line">                                        <span class="built_in">boolean</span> matchValue, <span class="built_in">boolean</span> movable) &#123;</span><br><span class="line">        <span class="keyword">HashMap</span>.Node&lt;K, V&gt;[] tab;</span><br><span class="line">        <span class="keyword">HashMap</span>.Node&lt;K, V&gt; p;</span><br><span class="line">        <span class="built_in">int</span> n, index;</span><br><span class="line">        <span class="comment">//如果桶不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">HashMap</span>.Node&lt;K, V&gt; node = <span class="keyword">null</span>, e;</span><br><span class="line">            K k;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="comment">//如果查找的键在第一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是红黑树类型，则调用红黑树的方法查找到key的位置</span></span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> <span class="keyword">HashMap</span>.TreeNode)</span><br><span class="line">                    node = ((<span class="keyword">HashMap</span>.TreeNode&lt;K, V&gt;) p).getTreeNode(hash, <span class="built_in">key</span>);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 遍历链表，找到待删除节点</span></span><br><span class="line">                    do &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> ||</span><br><span class="line">                                        (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 根据具体的类型删除节点</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                    (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> <span class="keyword">HashMap</span>.TreeNode)</span><br><span class="line">                    ((<span class="keyword">HashMap</span>.TreeNode&lt;K, V&gt;) node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --<span class="built_in">size</span>;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样的套路，先定位桶，然后根据类型进行操作。</p><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，HashMap完整源码解析请点击“<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/HashMap.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>”查看！！！</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-Vector源码解析-JDK1.8</title>
      <link href="/2019/04/08/ava%E9%9B%86%E5%90%88-Vector%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/08/ava%E9%9B%86%E5%90%88-Vector%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆<br>Vector简介<br>◆</p><p>与ArrayList不同的是，Vector是线程安全的。<br>建议先阅读 <a href="https://mp.weixin.qq.com/s/YEg1v_A5SuEp05ekUIHD9A" target="_blank" rel="noopener">ArrayList源码分析</a> ，再回来看此文会Soeasy哦！<br>Vector继承了AbstractList实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p><ol><li>AbstractList、List提供了添加、删除、修改、遍历等功能。</li><li>RandmoAccess提供了随机访问功能</li><li>Serializable提供了序列化的功能</li></ol><p>◆<br>Vector的属性<br>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 真实存储Vector元素的数组缓冲区</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">Object</span>[] elementData;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Vector的实际元素数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="built_in">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 容量增长系数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="built_in">int</span> capacityIncrement;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Vector能够增长到的最大容量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>◆<br>Vector的构造方法<br>◆</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定Vector的初始大小以及容量增长系数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">     super();</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> +</span><br><span class="line">                 initialCapacity);</span><br><span class="line">     <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">     <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指定Vector的初始大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Vector的默认初始大小为10</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将集合的数据转换成Vector</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">     elementData = c.toArray();</span><br><span class="line">     elementCount = elementData.length;</span><br><span class="line">     <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">     <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">         elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>◆<br>Vector添加元素<br>◆</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> synchronized <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定索引添加元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">       insertElementAt(element, <span class="keyword">index</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在index索引位置插入数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> synchronized <span class="keyword">void</span> insertElementAt(E obj, <span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">index</span> &gt; elementCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span></span><br><span class="line">                   + <span class="string">" &gt; "</span> + elementCount);</span><br><span class="line">       &#125;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       System.arraycopy(elementData, <span class="keyword">index</span>, elementData, <span class="keyword">index</span> + <span class="number">1</span>, elementCount - <span class="keyword">index</span>);</span><br><span class="line">       elementData[<span class="keyword">index</span>] = obj;</span><br><span class="line">       elementCount++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> synchronized <span class="keyword">void</span> addElement(E obj) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = obj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看的，这几个添加方法最终都被synchronize关键字所修饰包括查询、修改和删除），只有这样才能保证线程安全。</p><p>◆<br>Vector扩容<br>◆</p><p>相信细心的你一定发现了上述的添加方法都调用了一个方法ensureCapacityHelper，这个方法就是用来确认Vector的容量的方法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认Vector的容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> void ensureCapacityHelper(int minCapacity) &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//调用扩容方法</span></span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩容</span></span><br><span class="line">    <span class="keyword">private</span> void grow(int minCapacity) &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//如果指定了容量增长系数则按照capacityIncrement扩容，否则增大一倍</span></span><br><span class="line">        int <span class="keyword">new</span><span class="type">Capacity</span> = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                capacityIncrement : <span class="type">oldCapacity</span>);</span><br><span class="line">        <span class="comment">//如果扩容后还不能存下元素，则使用minCapacity作为最新的容量</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">new</span><span class="type">Capacity</span> = minCapacity;</span><br><span class="line">        <span class="comment">//如果超出最大容量</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">new</span><span class="type">Capacity</span> = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, <span class="keyword">new</span><span class="type">Capacity</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> int hugeCapacity(int minCapacity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">                Integer.MAX_VALUE :<span class="type"></span></span><br><span class="line"><span class="type">                MAX_ARRAY_SIZE</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆<br>Vector的查询和修改<br>◆</p><p>修改和查询方法都比较简单</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 更新</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> synchronized E set(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= elementCount)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">     E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line">     elementData[<span class="keyword">index</span>] = element;</span><br><span class="line">     <span class="keyword">return</span> oldValue;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">public</span> synchronized E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= elementCount)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> elementData(<span class="keyword">index</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line"> E elementData(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>◆<br>Vector的删除<br>◆</p><p>删除涉及到了一个数组copy的过程</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除指定索引位置的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> synchronized E remove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= elementCount)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span>);</span><br><span class="line">       E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> numMoved = elementCount - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, <span class="keyword">index</span> + <span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                   numMoved);</span><br><span class="line">       elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，Vector完整源码解析请点击“<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/Vector.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>”查看！！！</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-CopyOnWriteArrayList源码解析-JDK1.8</title>
      <link href="/2019/04/08/Java%E9%9B%86%E5%90%88-CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/08/Java%E9%9B%86%E5%90%88-CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆<br>CopyOnWriteArrayList简介<br>◆</p><p>CopyOnWriteArrayList和ArrayList一样是一个动态数组。而与ArrayList不同的是，它是线程安全的。<br>建议先阅读 <a href="https://mp.weixin.qq.com/s/YEg1v_A5SuEp05ekUIHD9A" target="_blank" rel="noopener">ArrayList源码分析</a> ，再回来看此文会Soeasy哦！</p><p>CopyOnWriteArrayList实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p><ol><li>List提供了添加、删除、修改、遍历等功能。</li><li>RandmoAccess提供了随机访问功能</li><li>Cloneable提供了可以被克隆的功能</li><li>Serializable提供了序列化的功能</li></ol><p>◆<br>CopyOnWriteArrayList的属性<br>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**实现线程安全的锁对象*/</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 元素缓冲区，volatile保证多线程下始终读取到最新的数据*/</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">Object</span>[] array;</span><br></pre></td></tr></table></figure><p>上方的lock对象就是CopyOnWriteArrayList实现线程安全的秘诀。<br>对于Java中的锁有疑问的同学可以参考此文章：  Java中的锁</p><p>◆<br>CopyOnWriteArrayList的构造方法<br>◆</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public CopyOnWriteArrayList() &#123;</span><br><span class="line">    setArray(<span class="keyword">new</span> <span class="built_in">Object</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public CopyOnWriteArrayList(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">    <span class="built_in">Object</span>[] elements;</span><br><span class="line">    <span class="keyword">if</span> (c.getClass() == java.util.concurrent.CopyOnWriteArrayList.<span class="keyword">class</span>)</span><br><span class="line">        elements = ((CopyOnWriteArrayList&lt;?&gt;)c).getArray();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        elements = c.toArray();</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elements.getClass() != <span class="built_in">Object</span>[].<span class="keyword">class</span>)</span><br><span class="line">            elements = Arrays.copyOf(elements, elements.length, <span class="built_in">Object</span>[].<span class="keyword">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setArray(elements);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public CopyOnWriteArrayList(E[] toCopyIn) &#123;</span><br><span class="line">    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, <span class="built_in">Object</span>[].<span class="keyword">class</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> setArray(<span class="built_in">Object</span>[] a) &#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个构造方法最后都是调用的setArray方法完成的初始化。</p><p>◆<br>CopyOnWriteArrayList的方法<br>◆</p><p>接下来我们就以CopyOnWriteArrayList的几个比较经典的方法来看一下它是如何设计的。</p><p>首先是添加方法：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">       lock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object[] elements = getArray();</span><br><span class="line">           <span class="keyword">int</span> len = elements.length;</span><br><span class="line">           Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">           newElements[len] = e;</span><br><span class="line">           setArray(newElements);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定索引添加</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">       lock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object[] elements = getArray();</span><br><span class="line">           <span class="keyword">int</span> len = elements.length;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">index</span> &gt; len || <span class="keyword">index</span> &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+<span class="keyword">index</span>+</span><br><span class="line">                       <span class="string">", Size: "</span>+len);</span><br><span class="line">           Object[] newElements;</span><br><span class="line">           <span class="keyword">int</span> numMoved = len - <span class="keyword">index</span>;</span><br><span class="line">           <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">               newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               newElements = <span class="keyword">new</span> Object[len + <span class="number">1</span>];</span><br><span class="line">               System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, <span class="keyword">index</span>);</span><br><span class="line">               System.arraycopy(elements, <span class="keyword">index</span>, newElements, <span class="keyword">index</span> + <span class="number">1</span>,</span><br><span class="line">                       numMoved);</span><br><span class="line">           &#125;</span><br><span class="line">           newElements[<span class="keyword">index</span>] = element;</span><br><span class="line">           setArray(newElements);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> Object[] getArray() &#123;</span><br><span class="line">       <span class="keyword">return</span> array;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">void</span> setArray(Object[] a) &#123;</span><br><span class="line">       array = a;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看的，进行添加之前首先是要先获得锁对象才继续进行的操作（包括修改和删除），只有这样才能保证线程安全。</p><p>接着看添加的逻辑<br>新建一个数组，接着将通过getArray（）方法获取到的原始的数组拷贝到新数组中，然后将新增数据也添加到新数组中；最后将新数组赋值给原先的数组。</p><p>接下来看删除操作：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Object[] elements = getArray();</span><br><span class="line">          <span class="keyword">int</span> len = elements.length;</span><br><span class="line">          E oldValue = get(elements, <span class="keyword">index</span>);</span><br><span class="line">          <span class="keyword">int</span> numMoved = len - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">              setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              Object[] newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">              System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, <span class="keyword">index</span>);</span><br><span class="line">              System.arraycopy(elements, <span class="keyword">index</span> + <span class="number">1</span>, newElements, <span class="keyword">index</span>,</span><br><span class="line">                      numMoved);</span><br><span class="line">              setArray(newElements);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> oldValue;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>同添加方法相同的逻辑，先获取锁，然后通过copy数组方式进行删除操作。</p><p>接下来修改方法，修改的时候也使用到了查询方法：</p><pre><code>/**     * 替换指定索引的元素     */    public E set(int index, E element) {        final ReentrantLock lock = this.lock;        lock.lock();        try {            Object[] elements = getArray();            E oldValue = get(elements, index);            if (oldValue != element) {                int len = elements.length;                Object[] newElements = Arrays.copyOf(elements, len);                newElements[index] = element;                setArray(newElements);            } else {                // Not quite a no-op; ensures volatile write semantics                setArray(elements);            }            return oldValue;        } finally {            lock.unlock();        }    }     /**     * get方法     */    public E get(int index) {        return get(getArray(), index);    }     @SuppressWarnings(&quot;unchecked&quot;)    private E get(Object[] a, int index) {        return (E) a[index];    }</code></pre><p>第一步同样是加锁，接着会有一个判断，看要修改的索引位置的元素是否相同，不相同则继续通过copy数组的方式进行替换，最后使用setArray()方法更新。</p><p>看了CopyOnWriteArrayList的增删改查方法你就应该明白一件事，这哥们除了查询、增删改都很慢呀。</p><p>与ArrayList相比，CopyOnWriteArrayList最值得我们注意的地方就是：<br>增删改操作必须获取锁之后才能进行，操作完毕释放锁其他操作才可以继续执行<br>get元素是使用volatile修饰的，可以保证多线程之间的数据更新同步</p><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，CopyOnWriteArrayList完整源码解析请点击“<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/CopyOnWriteArrayList.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>”查看！！！</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> SpringCloud学习系列汇总 </title>
      <link href="/2019/04/04/pringCloud%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%B1%87%E6%80%BB/"/>
      <url>/2019/04/04/pringCloud%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/rAHm5_Us_Aeudd2iTTD5gA" target="_blank" rel="noopener">使用SpringBoot2.0.3整合SpringCloud</a></p><p><a href="https://mp.weixin.qq.com/s/pSEV4Ll7xooyB89vROoKZA" target="_blank" rel="noopener">服务注册与发现Eureka</a></p><p><a href="https://mp.weixin.qq.com/s/l5jwEWadBS1kfineBD17lQ" target="_blank" rel="noopener">自定义Eureka集群负载均衡策略</a></p><p><a href="https://mp.weixin.qq.com/s/B3leLelymJT4H8ph9NiEjw" target="_blank" rel="noopener">如何使用高可用的Eureka</a></p><p><a href="https://mp.weixin.qq.com/s/SBsgwY6IbfdfmLRATpnFyg" target="_blank" rel="noopener">Feigin的使用及自定义配置</a></p><p><a href="https://mp.weixin.qq.com/s/DIzLsB0i0RWxgeJoAvt6BA" target="_blank" rel="noopener">Hystrix使用</a></p><p><a href="https://mp.weixin.qq.com/s/tu8f8gT3-lUalZRKuDQ2NQ" target="_blank" rel="noopener">Hystrix仪表盘</a></p><p><a href="https://mp.weixin.qq.com/s/nUCD8D0mYGIzlBIlSWb3OA" target="_blank" rel="noopener">路由器和过滤器-Zuul</a></p><p><a href="https://mp.weixin.qq.com/s/0N-qV5RAhVHjKoZT0TjILA" target="_blank" rel="noopener">使用Apollo做配置中心</a></p><p><a href="https://mp.weixin.qq.com/s/nTUjnTWg0IDl1E_ySOpQmg" target="_blank" rel="noopener">SpringCloud-Stream整合RabbitMQ</a></p><p><a href="https://mp.weixin.qq.com/s/AmDwlAsG5UQhYlXG_CHLOg" target="_blank" rel="noopener">SpringCloud监控</a></p><p><a href="https://mp.weixin.qq.com/s/cAQDGpSy7g1q061JOiR27Q" target="_blank" rel="noopener">Zipkin全链路监控</a></p><p><a href="https://mp.weixin.qq.com/s/ePO3Jtg-Hf5yI9cbnAYpKQ" target="_blank" rel="noopener">Zipkin使用SpringCloud Stream以及Elasticsearch</a></p><p><a href="https://mp.weixin.qq.com/s/TW12tywCeeL_52HXeGMweg" target="_blank" rel="noopener">SpringCloud最常用配置详解</a></p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程面试必备基础知识汇总</title>
      <link href="/2019/04/04/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2019/04/04/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/aXMl2mTGewFrAR4p53rmLQ" target="_blank" rel="noopener">多线程基本概念</a></p><p>同步和异步，线程和进程，并发和并行，临界资源，阻塞，死锁，饥饿，活锁，线程的并发级别</p><hr><p><a href="https://mp.weixin.qq.com/s/cDS53momhdkgnVKpNh50GA" target="_blank" rel="noopener">多线程内存模型</a></p><p>JMM的基本概念，主内存与工作内存的数据交互，多线程中的原子性、可见性、有序性，指令重排，volatile关键字</p><hr><p><a href="https://mp.weixin.qq.com/s/lMiRx8Uxdhcfhuugvm5WDQ" target="_blank" rel="noopener">Hello，Thread</a></p><p>如何创建线程，线程的生命周期，线程的基本状态，线程的基本操作：“sleep、yield、jion，线程停止、线程中断、wait、notify、suspen、resume、线程组、守护线程、线程的优先级”</p><hr><p><a href="https://mp.weixin.qq.com/s/Z22WRS4mQ0Wftflp6bedew" target="_blank" rel="noopener">浅谈Java中的锁</a></p><p>Synchronized，重入锁，读写锁</p><hr><p><a href="https://mp.weixin.qq.com/s/XhjGCunNPO3hTQwqBYgoeQ" target="_blank" rel="noopener">Java线程池核心原理剖析</a></p><p>Executor框架，WorkQueue，线程工厂，拒绝策略，线程池的扩展</p><hr><p><a href="https://mp.weixin.qq.com/s/t45nMeOUAeLpstV_nrRFig" target="_blank" rel="noopener">锁优化</a></p><p>锁优化常用策略，虚拟机对锁优化做的努力</p><hr><p><a href="https://mp.weixin.qq.com/s/5pWY3C5DApGzIylcYLWfGA" target="_blank" rel="noopener">ThreadLocal及InheritableThreadLocal的原理剖析</a></p><p>ThreadLocal基本使用、原理剖析、注意事项。InheritableThreadLocal基本使用、原理剖析</p><hr><p><a href="https://mp.weixin.qq.com/s/q0tjU4HyzeL1jEqvJLd0ig" target="_blank" rel="noopener">Java原子类操作原理剖析</a></p><p>CAS概念、CAS算法、Java中的CAS实现、CAS的缺点、Java提供的12种原子操作类</p><hr><p><a href="https://mp.weixin.qq.com/s/_uYzuUcOgZxBgf5RegCTJw" target="_blank" rel="noopener">生产者消费者问题</a></p><p>生产者消费者的两种实现方式</p><hr><p><a href="https://mp.weixin.qq.com/s/Ek9j8eI8kpIl_fbkYM7zbQ" target="_blank" rel="noopener">多线程工具类</a></p><p>CountDownLatch、CyclicBarrier、Semaphore、LockSupport</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-LinkedList源码解析-JDK1.8 </title>
      <link href="/2019/04/04/Java%E9%9B%86%E5%90%88-LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/04/Java%E9%9B%86%E5%90%88-LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆</p><p>LinkedList简介</p><p>◆</p><p>LinkedList实际上是通过双向链表去实现的。它继承于AbstractList，实现了List、 RandomAccess、Cloneable、Serializable这些接口。</p><ol><li><p>AbstractSequentialList提供了可以被当作堆栈、队列或双端队列的机制</p></li><li><p>List 接口提供了基本的增删改查</p></li><li><p>Deque 接口提供了双端队列机制</p></li><li><p>Cloneable提供了可以被克隆的功能</p></li><li><p>Serializable提供了序列化的功能</p></li><li><p>同ArrayList，LinkedList也不是线程安全的</p></li></ol><p>◆</p><p>LinkedList的属性</p><p>◆</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List的大小</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> <span class="keyword">size</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表头部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表尾部</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  特别注意这个是继承自AbstractList的属性，用来记录List被修改的次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>相比较于ArrayList使用数组作为缓冲区，LinkedList使用的是一个内部的静态类Node来保存的，每个Node节点不光记录本身的数据，还保留了前一个节点和后一个节点的引用。所以本身LinkedList只保留了链表的头部和尾部的节点。</p><p>下方是Node的代码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static class <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; &#123;</span><br><span class="line">        //当前节点</span><br><span class="line">        E item;</span><br><span class="line">        //后一个节点</span><br><span class="line">        <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next;</span><br><span class="line">        //前一个节点</span><br><span class="line">        <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; prev;</span><br><span class="line">        <span class="keyword">Node</span><span class="title">(Node</span><span class="tag">&lt;E&gt;</span> prev, E element, <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next) &#123;</span><br><span class="line">            this.item = element;</span><br><span class="line">            this.next = next;</span><br><span class="line">            this.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>LinkedList构造方法</p><p>◆</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedList() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinkedList(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> addAll(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(<span class="keyword">size</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从指定索引开始添加一个集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> addAll(<span class="keyword">int</span> index, Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">        <span class="comment">//判断下标是否越界</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; pred, succ;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="keyword">size</span>) &#123;</span><br><span class="line">            <span class="comment">//从链表尾部添加</span></span><br><span class="line">            succ = <span class="keyword">null</span>;</span><br><span class="line">            pred = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从链表中间添加</span></span><br><span class="line">            succ = node(index);</span><br><span class="line">            pred = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            @SuppressWarnings(<span class="string">"unchecked"</span>) E e = (E) o;</span><br><span class="line">            <span class="comment">//创建Node节点，指定Node的前一个节点</span></span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//pred如果为空则代表整个链表为空，</span></span><br><span class="line">                first = newNode;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.<span class="keyword">next</span> = newNode;</span><br><span class="line">            pred = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将节点放到最后</span></span><br><span class="line">            last = pred;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将节点插入</span></span><br><span class="line">            pred.<span class="keyword">next</span> = succ;</span><br><span class="line">            succ.prev = pred;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新链表大小</span></span><br><span class="line">        <span class="keyword">size</span> += numNew;</span><br><span class="line">        <span class="comment">//更新修改次数</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆</p><p>LinkedList的基本方法</p><p>◆</p><p>addAll方法添加一个集合还是比较简单粗暴的，接下来我们来看一下普通的add方法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往最后一个节点添加一个数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> boolean add(E e) &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> void add(int index, E element) &#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == size)</span><br><span class="line">            linkLast(element);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            linkBefore(element, node(index));</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加第一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> void addFirst(E e) &#123;</span><br><span class="line">        linkFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加最后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> void addLast(E e) &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新链表的最后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void linkLast(E e) &#123;</span><br><span class="line">        final Node&lt;E&gt; l = last;</span><br><span class="line">        final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在succ节点之前插入一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">        <span class="comment">// assert succ != null;</span></span><br><span class="line">        final Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">        final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">        succ.prev = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">            first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>LinkedList不仅有普通的add方法，鉴于双向链表的特殊性，它还包含以下方法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往最后添加一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">offer</span>(<span class="params">E e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">add</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Deque operations</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往第一个位置添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">offerFirst</span>(<span class="params">E e</span>) </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往最后一个位置添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">offerLast</span>(<span class="params">E e</span>) </span>&#123;</span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往List头部添加元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params">E e</span>) </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改方法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 将指定索引的元素替换</span><br><span class="line">     */</span><br><span class="line">    public E set(int index, E element) &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; x = <span class="keyword">node</span><span class="title">(index</span>);</span><br><span class="line">        E oldVal = x.item;</span><br><span class="line">        x.item = element;</span><br><span class="line">        return oldVal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>删除方法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除第一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E removeFirst() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">       <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除最后一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E removeLast() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">       <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除第一个元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E remove() &#123;</span><br><span class="line">       <span class="keyword">return</span> removeFirst();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除顺序遍历到的第一个存在的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> removeFirstOccurrence(Object o) &#123;</span><br><span class="line">       <span class="keyword">return</span> remove(o);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除逆序遍历到的最后一个存在的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> removeLastOccurrence(Object o) &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除第一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class="line">       <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = f.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = f.<span class="keyword">next</span>;</span><br><span class="line">       f.item = <span class="keyword">null</span>;</span><br><span class="line">       f.<span class="keyword">next</span> = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">       first = <span class="keyword">next</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>)</span><br><span class="line">           last = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">next</span>.prev = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">size</span>--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除最后一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class="line">       <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = l.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">       l.item = <span class="keyword">null</span>;</span><br><span class="line">       l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">       last = prev;</span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">           first = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           prev.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">size</span>--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除x节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">       <span class="comment">// assert x != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = x.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = x.<span class="keyword">next</span>;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">           first = <span class="keyword">next</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">           x.prev = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">next</span>.prev = prev;</span><br><span class="line">           x.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       x.item = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">size</span>--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>查询方法：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取第一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E getFirst() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">       <span class="keyword">return</span> f.item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取最后一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E getLast() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">       <span class="keyword">return</span> l.item;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取指定索引的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       <span class="comment">//判断是否越界</span></span><br><span class="line">       checkElementIndex(<span class="keyword">index</span>);</span><br><span class="line">       <span class="keyword">return</span> node(<span class="keyword">index</span>).item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取第一个元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E peek() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取第一个元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E element() &#123;</span><br><span class="line">       <span class="keyword">return</span> getFirst();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 弹出第一个元素（删除并获取）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E poll() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取第一个元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E peekFirst() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取最后一个元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E peekLast() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 弹出第一个元素（删除并获取）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E pollFirst() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 弹出最后一个元素（删除并获取）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E pollLast() &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 弹出第一个元素（删除并获取）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E pop() &#123;</span><br><span class="line">       <span class="keyword">return</span> removeFirst();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看了LinkedList的增删改查方法相信你已经明白了为什么一直有人告诉你LinkedList添加和删除效率高而随机查询修改效率低了。</p><p>序列化</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将List写入s，注意先写容量，然后在写数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size</span></span><br><span class="line">        s.writeInt(<span class="keyword">size</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>)</span><br><span class="line">            s.writeObject(x.item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从s读取，先读容量，再读数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">size</span> = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++)</span><br><span class="line">            linkLast((E)s.readObject());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，LinkedList完整源码解析请点击<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/LinkedList.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>查看！！！</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合-ArrayList源码解析-JDK1.8</title>
      <link href="/2019/04/02/ava%E9%9B%86%E5%90%88-ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/"/>
      <url>/2019/04/02/ava%E9%9B%86%E5%90%88-ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-JDK1-8/</url>
      
        <content type="html"><![CDATA[<p>◆<br>ArrayList简介<br>◆</p><p>ArrayList 是一个数组队列，相当于 动态数组。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p><ol><li>AbstractList、List提供了添加、删除、修改、遍历等功能。</li><li>RandmoAccess提供了随机访问功能</li><li>Cloneable提供了可以被克隆的功能</li><li>Serializable提供了序列化的功能</li><li>和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或CopyOnWriteArrayList。</li></ol><p>◆<br>ArrayList的属性<br>◆</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组默认的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用数组大小为0时的默认缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用ArrayList(int initialCapacity)构造方法时且initialCapacity为0时缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实存储arraylist元素的数组缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List的实际大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组可分配的最大大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  特别注意这个是继承自AbstractList的属性，用来记录List被修改的次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="built_in">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>◆<br>ArrayList的构造方法<br>◆</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参构造方法，初始化elementData</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ArrayList() &#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据参数构建具有初始大小的构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ArrayList(<span class="keyword">int</span> initialCapacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个包含collection的ArrayList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ArrayList(Collection&lt;? <span class="keyword">extends</span> E&gt; c) &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size</span> = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].<span class="keyword">class</span>)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, <span class="keyword">size</span>, Object[].<span class="keyword">class</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>ArrayList的方法<br>◆</p><p>接下来我们就以ArrayList的几个比较经典的方法来看一下它是如何设计的。</p><p>首先是添加方法，添加的方法一共有3个：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">       <span class="comment">//计算数组最新的容量，以及判断是否需要扩容</span></span><br><span class="line">       ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[<span class="built_in">size</span>++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定索引添加元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index, E element) &#123;</span><br><span class="line">       <span class="comment">//判断索引是否越界</span></span><br><span class="line">       rangeCheckForAdd(index);</span><br><span class="line">       <span class="comment">//计算数组最新的容量，以及判断是否需要扩容</span></span><br><span class="line">       ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       <span class="comment">//调用系统底层的复制方法</span></span><br><span class="line">       System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">               <span class="built_in">size</span> - index);</span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       <span class="comment">//List长度+1</span></span><br><span class="line">       <span class="built_in">size</span>++;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加一个集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">       <span class="keyword">Object</span>[] a = c.toArray();</span><br><span class="line">       <span class="built_in">int</span> numNew = a.length;</span><br><span class="line">       ensureCapacityInternal(<span class="built_in">size</span> + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">       System.arraycopy(a, <span class="number">0</span>, elementData, <span class="built_in">size</span>, numNew);</span><br><span class="line">       <span class="built_in">size</span> += numNew;</span><br><span class="line">       <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>仔细观察上方三个添加的方法，它们都调用了ensureCapacityInternal方法，这个方法的参数是执行当前添加操作所需要的数组容量。它会根据传递的参数来计算数组是否需要扩容，如果需要扩容则完成扩容操作。<br>不同之处在于，上方的两个方法添加的只有一个元素，所以传的size+1，而addAll因为是添加的一个集合所以传的参数是size+集合的长度。</p><p>接着看这个方法的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算数组最新的容量</span></span><br><span class="line"><span class="comment">    * @param minCapacity</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//如果创建ArrayList时指定大小为0</span></span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="comment">//如果本次添加的大小比初始容量10大的话则不使用默认的容量10，直接使用本次添加的大小作为初始容量</span></span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 记录修改次数，调用扩容方法</span></span><br><span class="line"><span class="comment">    * @param minCapacity</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//扩容</span></span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 扩容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取原来的数组长度</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">//新容量设置为老容量的1.5倍</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//如果新容量还不够存放本次需要添加的大小，则直接扩容到本次添加的大小</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="comment">//如果新容量超出数组最大容量</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// 调用Arrays的复制方法更新数据缓冲池</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="comment">//判断容量是否溢出</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">               Integer.MAX_VALUE :</span><br><span class="line">               MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上就是ArrayList动态扩容的实现方式了，这里注意一下扩容是通过新建一个数组来替换原先的数组来进行的：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">elementData</span> = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><p>接下来看删除操作：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 遍历数组，找出需要删除的元素的索引，并调用删除方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">//具体删除方法</span></span><br><span class="line">                   fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) &#123;</span><br><span class="line">                   fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除指定索引的元素</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       <span class="comment">//判断是否越界</span></span><br><span class="line">       rangeCheck(<span class="keyword">index</span>);</span><br><span class="line">       <span class="comment">//记录修改次数</span></span><br><span class="line">       modCount++;</span><br><span class="line">       E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line">       <span class="comment">//计算需要移动的位置</span></span><br><span class="line">       <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//使用系统底层方法移动数组，将需要删除的元素放到数组最后</span></span><br><span class="line">           System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                   numMoved);</span><br><span class="line">       <span class="comment">//数组长度减一，删除数组最后一个位置的元素</span></span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 删除指定元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                   numMoved);</span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是删除一个元素也是通过底层的方法实现的。</p><p>接着看get和set相对就比较简单了。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       <span class="comment">//判断索引是否越界</span></span><br><span class="line">       rangeCheck(<span class="keyword">index</span>);</span><br><span class="line">       <span class="keyword">return</span> elementData(<span class="keyword">index</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断索引是否越界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> rangeCheck(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= size)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(<span class="keyword">index</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> E set(<span class="keyword">int</span> <span class="keyword">index</span>, E element) &#123;</span><br><span class="line">       <span class="comment">//判断索引是否越界</span></span><br><span class="line">       rangeCheck(<span class="keyword">index</span>);</span><br><span class="line">       <span class="comment">//获取此索引原先的值</span></span><br><span class="line">       E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line">       elementData[<span class="keyword">index</span>] = element;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>看了ArrayList的增删改查方法相信你已经明白了为什么一直有人告诉你ArrayList查询修改效率高而添加和删除效率低了。</strong></p><p>ArrayList的序列化方式同样是比较有意思的，一开始看到ArrayList实现了Serializable我们就知道它是可以序列化的，但是实际存储的数组elementData却是transient，观看下方代码你就可以找到答案：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将List写入s，注意先写容量，然后在写数据</span></span><br><span class="line"><span class="comment">   * @param s</span></span><br><span class="line"><span class="comment">   * @throws java.io.IOException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">          <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">      <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">      <span class="built_in">int</span> expectedModCount = modCount;</span><br><span class="line">      s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 首先写数组容量</span></span><br><span class="line">      s.writeInt(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历写数组中的元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">          s.writeObject(elementData[i]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取s中的List</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> readObject(java.io.ObjectInputStream s)</span><br><span class="line">          <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">      elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">      s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 首先读数组容量</span></span><br><span class="line">      s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">          ensureCapacityInternal(<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">Object</span>[] a = elementData;</span><br><span class="line">          <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</span><br><span class="line">              a[i] = s.readObject();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>鉴于篇幅有限，本篇文章仅列出上方部分代码，ArrayList完整源码解析请看：<a href="https://github.com/shiyujun/syj-study-demo/blob/master/src/main/java/cn/shiyujun/collection/ArrayList.java" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a>！！！</p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅述Java集合架构</title>
      <link href="/2019/04/02/%E6%B5%85%E8%BF%B0Java%E9%9B%86%E5%90%88%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/04/02/%E6%B5%85%E8%BF%B0Java%E9%9B%86%E5%90%88%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>◆<br>基本架构<br>◆</p><p>Java集合主要分为了2大部分：Collection和Map：</p><p><img src="/2019/04/02/浅述Java集合架构/1.jpg" alt="1"><br><img src="/2019/04/02/浅述Java集合架构/2.jpg" alt="1"></p><p>Collection主要包含两大部分，Set和List。</p><p>List是以线性结构存储的，允许存在重复元素，允许存在重复的空值。我们最常用的包含ArrayList、LinkedList。<br>Set不按顺序排列，不允许有重复元素的集合，且最多存在允许一个空值。我们最常用的包含HashSet、TreeSet。</p><p>Map是一种把键对象和值对象映射的集合，它的每一个元素都包含一对键对象和值对象，它不允许有重复的键对象，但是可以包含重复的值对象 ，最多允许存在一个重复的空键，可以存在多个空值。</p><p>◆<br>各个接口和类的基本方法<br>◆</p><p>Collection是一个接口高度抽象的借口，Collection接口的所有子类(直接子类和间接子类)都必须实现2种构造函数：不带参数的构造函数 和 参数为Collection的构造函数。带参数的构造函数，可以用来转换Collection的类型（比如new ArrayList（LinkedList））。<br>以下是Collection的一些基本方法</p> <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取大小</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否存在某个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="comment">//遍历元素</span></span><br><span class="line">Iterator&lt;E&gt; iterator();</span><br><span class="line"><span class="comment">//转化为数组</span></span><br><span class="line">Object[] toArray();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="comment">//添加集合</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? <span class="keyword">extends</span> E&gt; c)</span></span>;</span><br><span class="line"><span class="comment">//删除集合</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"><span class="comment">//清空集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>List是一个继承于Collection的接口，鉴于List是一个有序队列，除了包含继承Collection是的方法外它还定义了自己本身的一些基本方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往指定索引添加元素</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> add(<span class="built_in">int</span> location, E object)</span><br><span class="line"><span class="comment">//往指定索引添加一个集合</span></span><br><span class="line"><span class="keyword">abstract</span> boolean addAll(<span class="built_in">int</span> location, Collection&lt;? <span class="keyword">extends</span> E&gt; collection)</span><br><span class="line"><span class="comment">//获取指定索引的元素</span></span><br><span class="line"><span class="keyword">abstract</span> E <span class="keyword">get</span>(<span class="built_in">int</span> location)</span><br><span class="line"><span class="comment">//获取元素第一次出现的索引</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">int</span> indexOf(<span class="built_in">Object</span> object)</span><br><span class="line"><span class="comment">//获取元素最后一次出现的索引</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">int</span> lastIndexOf(<span class="built_in">Object</span> object)</span><br><span class="line"><span class="comment">//从指定索引遍历对象</span></span><br><span class="line"><span class="keyword">abstract</span> ListIterator&lt;E&gt; listIterator(<span class="built_in">int</span> location)</span><br><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line"><span class="keyword">abstract</span> ListIterator&lt;E&gt; listIterator()</span><br><span class="line"><span class="comment">//删除指定索引位置的对象</span></span><br><span class="line"><span class="keyword">abstract</span> E remove(<span class="built_in">int</span> location)</span><br><span class="line"><span class="comment">//更新指定索引位置的对象</span></span><br><span class="line"><span class="keyword">abstract</span> E <span class="keyword">set</span>(<span class="built_in">int</span> location, E object)</span><br><span class="line"><span class="comment">//截取</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">List</span>&lt;E&gt; subList(<span class="built_in">int</span> start, <span class="built_in">int</span> end)</span><br></pre></td></tr></table></figure><p>Set不同于List的特殊需求，它不需要维护线性结构，所以它的API跟Collection是一样的。</p><p>介于Map是键对象和值对象映射的特殊，它提供了三种遍历方法</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">abstract</span> <span class="keyword">Set</span>&lt;Entry&lt;K, V&gt;&gt;     entrySet()</span><br><span class="line"><span class="built_in">abstract</span> <span class="keyword">Set</span>&lt;K&gt;               keySet()</span><br><span class="line"><span class="built_in">abstract</span> <span class="keyword">Collection</span>&lt;V&gt;        values()</span><br></pre></td></tr></table></figure><p>下方是Map基本方法：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span>                 <span class="built_in">clear</span>()</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">boolean</span>              containsKey(<span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">boolean</span>              containsValue(<span class="keyword">Object</span> value)</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">boolean</span>              equals(<span class="keyword">Object</span> object)</span><br><span class="line"><span class="keyword">abstract</span> V                    <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">int</span>                  hashCode()</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">boolean</span>              isEmpty()</span><br><span class="line"><span class="keyword">abstract</span> V                    put(K <span class="built_in">key</span>, V value)</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span>                 putAll(Map&lt;? extends K, ? extends V&gt; <span class="built_in">map</span>)</span><br><span class="line"><span class="keyword">abstract</span> V                    remove(<span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line"><span class="keyword">abstract</span> <span class="built_in">int</span>                  <span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程工具类：CountDownLatch、CyclicBarrier、Semaphore、LockSupport</title>
      <link href="/2019/03/31/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9ACountDownLatch%E3%80%81CyclicBarrier%E3%80%81Semaphore%E3%80%81LockSupport/"/>
      <url>/2019/03/31/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%9ACountDownLatch%E3%80%81CyclicBarrier%E3%80%81Semaphore%E3%80%81LockSupport/</url>
      
        <content type="html"><![CDATA[<p>◆<br>CountDownLatch<br>◆</p><p>假如有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以。<br>比如你想要买套房子，但是呢你现在手上没有钱。你得等这个月工资发了、然后年终奖发了、然后朋友借你得钱还给你了、然后再给朋友借一部分才可以买，这种场景你就可以使用CountDownLatch。</p><p>CountDownLatch是JDK为我们提供的一个计数器，它的操作是原子操作，同一时间只能有一个线程去操作这个它。</p><p>我们先来看一下CountDownLatch的主要方法。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法，接收计数器的数量</span></span><br><span class="line"><span class="keyword">public</span> CountDownLatch(<span class="keyword">int</span> <span class="keyword">count</span>)</span><br><span class="line"><span class="comment">//持续等待计数器归零</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> await()</span><br><span class="line"><span class="comment">//最多等待unit时间单位内timeout时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> await(<span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line"><span class="comment">//计数器减1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> countDown()</span><br><span class="line"><span class="comment">//返回现在的计数器数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> getCount()</span><br></pre></td></tr></table></figure><p>下面是CountDownLatch的基本使用示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + <span class="string">"完成任务"</span>);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> ThreadDemo().start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"全部完成任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>CyclicBarrier<br>◆</p><p>相比较于CountDownLatch，CyclicBarrier可以完成前者的全部功能，但是相比前者，它的功能更加的强大。<br>CyclicBarrier翻译过来的中文名称叫循环栅栏，顾名思义它可以循环使用<br>CyclicBarrier还可以接收一个Runnable对象，当栅栏循环一次技术后会执行一次Runnable</p><p>我们来看一下CyclicBarrier的常用方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造方法，第一个参数为栅栏饿长度，第二个就是上方所说的Runnable对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取现在的数量</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getParties</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//持续等待栅栏归零</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//最多等待unit时间单位内timeout时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br></pre></td></tr></table></figure><p>下面是CyclicBarrier的基本使用示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    public static <span class="type">CyclicBarrier</span> cyclicBarrier = <span class="keyword">new</span> <span class="type">CyclicBarrier</span>(<span class="number">5</span>,<span class="keyword">new</span> <span class="type">FinallyThreadDemo</span>());</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Thread</span>.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="type">System</span>.out.println(<span class="type">Thread</span>.currentThread().getId() + <span class="string">"完成任务"</span>);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="type">BrokenBarrierException</span> e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"到达屏障点每个线程都会瞬时继续执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">FinallyThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"所有任务已经完成之后单独执行的任务！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="type">ThreadDemo</span>().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察打印结果我们可以发现：<br>当循环栅栏的任务执行完一轮以后，如果构造时传入了Runnable对象，则先执行Runnable对象，然后在瞬间释放所有任务的锁。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span>完成任务</span><br><span class="line"><span class="number">15</span>完成任务</span><br><span class="line"><span class="number">16</span>完成任务</span><br><span class="line"><span class="number">17</span>完成任务</span><br><span class="line"><span class="number">18</span>完成任务</span><br><span class="line">所有任务已经完成之后单独执行的任务！</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line"><span class="number">19</span>完成任务</span><br><span class="line"><span class="number">20</span>完成任务</span><br><span class="line"><span class="number">21</span>完成任务</span><br><span class="line"><span class="number">22</span>完成任务</span><br><span class="line"><span class="number">23</span>完成任务</span><br><span class="line">所有任务已经完成之后单独执行的任务！</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br><span class="line">到达屏障点每个线程都会瞬时继续执行</span><br></pre></td></tr></table></figure><p>◆<br>Semaphore<br>◆</p><p>在  浅谈Java中的锁：Synchronized、重入锁、读写锁 一文中，我们了解了synch和读写锁，我们发现使用锁的时候一次只允许一条线程方法。那么有什么东西可以提供更强大的控制方法么？这个东西就是信号量。</p><p>信号量提供的主要方法：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建具有给定许可数的信号量</span></span><br><span class="line">Semaphore(<span class="keyword">int</span> permits):构造方法，创建</span><br><span class="line"><span class="comment">//拿走1个许可</span></span><br><span class="line"><span class="keyword">void</span> acquire()</span><br><span class="line"><span class="comment">//拿走多个许可</span></span><br><span class="line"><span class="keyword">void</span> acquire(<span class="keyword">int</span> n)</span><br><span class="line"><span class="comment">//释放一个许可</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">release</span>()</span><br><span class="line"><span class="comment">//释放n个许可</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">release</span>(<span class="keyword">int</span> n):</span><br><span class="line"><span class="comment">//当前可用的许可数</span></span><br><span class="line"><span class="keyword">int</span> availablePermits()：</span><br></pre></td></tr></table></figure><p>下面来看使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getId() + <span class="string">"号线程在"</span>+System.currentTimeMillis()+<span class="string">"获取资源"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> ThreadDemo().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>LockSupport<br>◆</p><p>我们在 Hello，Thread 和 生产者消费者模型 两篇文章中使用过wait和notify实现了线程之间的协作，其实关于线程协作JDK还为我们提供了另外一个工具类LockSupport。</p><p>使用LockSupport实现等待通知功能时还不需要获取锁哦</p><p>先来看一下LockSupport的常用方法：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用当前线程</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> park()</span><br><span class="line"><span class="comment">// 如果参数线程的不可用，则使其可用。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> unpark(Thread thread)</span><br></pre></td></tr></table></figure><p>来看一下示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LockSupportThreadDemo</span> </span>&#123;</span><br><span class="line">    public static <span class="type">Thread</span> thread;</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">WaitThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"WaitThread wait,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            thread = <span class="type">Thread</span>.currentThread();</span><br><span class="line">            <span class="type">LockSupport</span>.park();</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"WaitThread end,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">NotifyThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"NotifyThread notify,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            <span class="type">LockSupport</span>.unpark(thread);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Thread</span>.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"NotifyThread end,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">WaitThreadDemo</span> waitThreadDemo = <span class="keyword">new</span> <span class="type">WaitThreadDemo</span>();</span><br><span class="line">        <span class="type">NotifyThreadDemo</span> notifyThreadDemo = <span class="keyword">new</span> <span class="type">NotifyThreadDemo</span>();</span><br><span class="line">        waitThreadDemo.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Thread</span>.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyThreadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者/消费者问题</title>
      <link href="/2019/03/31/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/"/>
      <url>/2019/03/31/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/</url>
      
        <content type="html"><![CDATA[<p>生产者消费者模型具体来讲，就是在一个系统中，存在生产者和消费者两种角色，他们通过内存缓冲区进行通信（解耦），生产者将消费者需要的资源生产出来放到缓冲区，消费者把从缓冲区把资源拿走消费。</p><p>在这个模型中，最关键就是内存缓冲区为空的时候消费者必须等待，而内存缓冲区满的时候，生产者必须等待。其他时候就是一边在生产一边在消费。值得注意的是多线程对内存缓冲区的操作时必须保证线程安全，所以需要设计锁的策略。</p><p>◆<br>使用wait和notify实现生产这消费者<br>◆</p><p>我们在Hello，Thread一文中提到了wait和notify来实现等待通知的功能，本篇文章则继续使用它们实现一个生产者、消费者模型。</p><p>首先我们定义一个资源的类，资源类中初始时什么都没有，最多允许存放10个资源。<br>当生产者调用add方法时，i+1，即代表生产出了一件资源。当生产了一个资源以后就使用notifyAll通知所有等待在此资源文件的线程。如果当资源达到10个后则所有的生产者线程进入等待状态，等待消费者线程唤醒。<br>当消费者调用remove方法时，i-1，即代表消费了一件资源。当消费了一个资源以后就使用notifyAll通知所有等待在此资源文件的线程。如果当资源达到0个后则所有的消费者线程进入等待状态，等待生产者线程唤醒。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> WaitNotifyResouce &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">size</span>=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> add()&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="keyword">size</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.<span class="keyword">println</span>(Thread.currentThread().getName()+<span class="string">"号线程生产一件资源,当前资源"</span>+i+<span class="string">"个"</span>);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> remove()&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            i--;</span><br><span class="line">            System.out.<span class="keyword">println</span>(Thread.currentThread().getName()+<span class="string">"号线程拿走了一件资源,当前资源"</span>+i+<span class="string">"个"</span>);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们创建3个生产者线程、2个消费者线程持续对资源进行生产和消费。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyProducerConsumerDemo</span> </span>&#123;</span><br><span class="line">    static <span class="type">WaitNotifyResouce</span> waitNotifyResouce = <span class="keyword">new</span> <span class="type">WaitNotifyResouce</span>();</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ProducerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                waitNotifyResouce.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                waitNotifyResouce.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> p1 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p1"</span>);</span><br><span class="line">        <span class="type">Thread</span> p2 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p2"</span>);</span><br><span class="line">        <span class="type">Thread</span> p3 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p3"</span>);</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> c1 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ConsumerThreadDemo</span>(), <span class="string">"消费者c1"</span>);</span><br><span class="line">        <span class="type">Thread</span> c2 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ConsumerThreadDemo</span>(), <span class="string">"消费者c2"</span>);</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来程序打印的结果就像预想中一样了：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">生产者<span class="built_in">p1</span>号线程生产一件资源,当前资源<span class="number">1</span>个</span><br><span class="line">生产者<span class="built_in">p2</span>号线程生产一件资源,当前资源<span class="number">2</span>个</span><br><span class="line">生产者<span class="built_in">p3</span>号线程生产一件资源,当前资源<span class="number">3</span>个</span><br><span class="line">消费者<span class="built_in">c1</span>号线程拿走了一件资源,当前资源<span class="number">2</span>个</span><br><span class="line">消费者<span class="built_in">c2</span>号线程拿走了一件资源,当前资源<span class="number">1</span>个</span><br><span class="line">生产者<span class="built_in">p1</span>号线程生产一件资源,当前资源<span class="number">2</span>个</span><br><span class="line">生产者<span class="built_in">p3</span>号线程生产一件资源,当前资源<span class="number">3</span>个</span><br><span class="line">生产者<span class="built_in">p2</span>号线程生产一件资源,当前资源<span class="number">4</span>个</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><p>◆<br>使用Condition实现生产者消费者模型<br>◆</p><p>在文章：浅谈Java中的锁：Synchronized、重入锁、读写锁 中，我们了解了 Lock和Condition，现在我们使用它们配合实现一个生产者消费者模型</p><p>首先同样创建一个资源文件，此资源文件所有的操作跟上方的资源文件是一样的，只不过使用Lock和Condition的组合代替了synchronize。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LockConditionResouce</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = <span class="keyword">lock</span>.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; size) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"号线程生产一件资源,当前资源"</span> + i + <span class="string">"个"</span>);</span><br><span class="line">                condition.signalAll();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.<span class="keyword">await</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                i--;</span><br><span class="line">                System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"号线程拿走了一件资源,当前资源"</span> + i + <span class="string">"个"</span>);</span><br><span class="line">                condition.signalAll();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.<span class="keyword">await</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来使用生产者消费者线程操作资源：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LockConditionProducerConsumerDemo</span> </span>&#123;</span><br><span class="line">    static <span class="type">LockConditionResouce</span> lockConditionResouce = <span class="keyword">new</span> <span class="type">LockConditionResouce</span>();</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ProducerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lockConditionResouce.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lockConditionResouce.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> p1 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p1"</span>);</span><br><span class="line">        <span class="type">Thread</span> p2 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p2"</span>);</span><br><span class="line">        <span class="type">Thread</span> p3 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ProducerThreadDemo</span>(), <span class="string">"生产者p3"</span>);</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> c1 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ConsumerThreadDemo</span>(), <span class="string">"消费者c1"</span>);</span><br><span class="line">        <span class="type">Thread</span> c2 = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">ConsumerThreadDemo</span>(), <span class="string">"消费者c2"</span>);</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fork/Jion框架详解</title>
      <link href="/2019/03/28/ork-Jion%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/03/28/ork-Jion%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>◆<br>Fork/Jion框架可以干什么<br>◆</p><p>如果你要处理1万条数据，但是你的能力暂时还不够，一个简单快捷的办法就是你可以把每次只处理100条，等到处理100次之后再把所有的结果聚合起来你就处理完了这1万条数据。</p><p>Fork/Join就是是Java7提供的原生多线程并行处理框架，它的基本思想就是将大任务分割成小任务，最后将小任务聚合起来得到结果。</p><p>◆<br>如何使用Fork/Jion框架<br>◆</p><p>我们要使用ForkJoin框架，首先要创建一个ForkJoin任务。它提供在任务中执行fork()和join的操作机制。<br>fork用来创建子线程，可以让程序多一个执行分枝，jion在我们之前文章中已经提到了，那就是等待结果。<br>通常我们可以按需继承如下两个类来使用Fork/Jion框架：</p><ol><li><p>RecursiveAction，用于没有返回结果的任务</p></li><li><p>RecursiveTask，用于有返回值的任务</p></li></ol><p>◆<br>代码示例<br>◆</p><p>下方是一个使用Fork/Jion框架计算1到10000的所有数值的和的一个简单的代码示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class ForkJionDemo extends RecursiveTask&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="comment">//任务拆分阈值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">int</span> threshold = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//计算起始值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="comment">//计算结束值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ForkJionDemo(<span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">end</span> = <span class="built_in">end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Integer compute() &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算任务是否需要拆分</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (<span class="built_in">end</span> - start) &lt;= threshold;</span><br><span class="line">        <span class="built_in">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="comment">//无需拆分则执行任务累计</span></span><br><span class="line">            <span class="built_in">for</span> (<span class="keyword">int</span> i = start; i &lt;= <span class="built_in">end</span>; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">else</span> &#123;</span><br><span class="line">            List&lt;ForkJionDemo&gt; forkJionDemoList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//将任务拆分成100份</span></span><br><span class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//计算这个一份任务要计算的起点和终点，如果终点大于最大值则使用最大值为终点</span></span><br><span class="line">                <span class="keyword">int</span> last=(start+threshold)&gt;<span class="built_in">end</span>?<span class="built_in">end</span>:(start+threshold);</span><br><span class="line">                ForkJionDemo forkJionDemo = <span class="keyword">new</span> ForkJionDemo(start, last);</span><br><span class="line">                <span class="comment">//下一份任务的起点要更新</span></span><br><span class="line">                start+=threshold+<span class="number">1</span>;</span><br><span class="line">                forkJionDemoList.add(forkJionDemo);</span><br><span class="line">                <span class="comment">//提交子任务</span></span><br><span class="line">                forkJionDemo.fork();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//汇总拆分完毕后的任务结果</span></span><br><span class="line">            <span class="built_in">for</span>(ForkJionDemo forkJionDemo:forkJionDemoList)&#123;</span><br><span class="line">                sum  += forkJionDemo.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//构造一个任务线程池</span></span><br><span class="line">        ForkJoinPool forkjoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        <span class="comment">//创建一个计算1到10000之间所有数的和的任务</span></span><br><span class="line">        ForkJionDemo forkJionDemo = <span class="keyword">new</span> ForkJionDemo(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//将任务提交到任务线程池</span></span><br><span class="line">        Future&lt;Integer&gt; result = forkjoinPool.submit(forkJionDemo);</span><br><span class="line">        <span class="built_in">try</span> &#123;</span><br><span class="line">            <span class="comment">//打印最后计算结果</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(result.<span class="built_in">get</span>());</span><br><span class="line">        &#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="built_in">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>使用Fork/Jion框架需要注意的点<br>◆</p><p>如果使用Fork/Jion框架计算的任务量特别庞大时很可能会出现以下2种情况：<br>fork的线程越来越多导致性能严重下降<br>函数调用层次越来越深导致栈溢出</p><p>本文所有源码参见：<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/thread/forkjion" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p><p></p><h4 style="color:red"><span id="博客所有文章首发于公众号java学习录转载请保留扫码关注公众号即可领取2000gjava学习资源">博客所有文章首发于公众号《Java学习录》转载请保留<br>扫码关注公众号即可领取2000GJava学习资源 </span></h4><p></p><p><img src="https://shiyujun.cn/img/gongzhonghao.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java原子类操作原理剖析</title>
      <link href="/2019/03/27/va%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%93%8D%E4%BD%9C%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
      <url>/2019/03/27/va%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%93%8D%E4%BD%9C%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>◆<br>CAS的概念<br>◆</p><p>对于并发控制来说，使用锁是一种悲观的策略。它总是假设每次请求都会产生冲突，如果多个线程请求同一个资源，则使用锁宁可牺牲性能也要保证线程安全。而无锁则是比较乐观的看待这个问题，它会假设每次访问都没有冲突，这样就提高了效率。但是事实难料、这个冲突是避免不了的，无锁也考虑到了肯定会遇到冲突，对于冲突的解决无锁就使用一种比较交换（CAS）的技术来检测冲突。一旦检测到冲突就重试当前操作直到成功为止。</p><p>◆<br>CAS算法<br>◆</p><p>CAS机制中使用了3个基本操作数CAS（V,E,N）：V表示要更新的变量，E表示预期值，N表示新值。</p><p>CAS更新一个变量的时候，只有当变量的预期值E和要更新的变量V的实际值相同时，才会将V的值修改为N。</p><p>一个简单的例子：<br>在内存地址V当中，存储一个值为1的变量。</p><p>此时线程1想把变量的值增加1.对线程1来说，预期值E=1，要修改的新值N=2.</p><p>在线程1要提交更新之前，另一个线程2抢先一步，把V的值率先更新成了2。</p><p>此时线程1开始提交更新，首先进行预期值E和变量V的实际值比较，发现E不等于V的实际值，提交失败。</p><p>失败后线程1 重新获取内存地址V的当前值，并重新计算想要修改的值。此时对线程1来说，E=2，V=2。这个重新尝试的过程被称为自旋。</p><p>如果这一次依然在提交时发现被线程2把V值更新到了3则再次重复步骤5。此时E=3，V=3</p><p>步骤5执行执行完毕后再次更新发现没有其他线程改变V的值。线程1进行比较，发现A和V的值是相等的。则线程1进行交换，把V的值替换为N，也就是2.</p><p>◆<br>Java中CAS的底层实现<br>◆</p><p>我们看一下AtomicInteger当中常用的自增方法incrementAndGet：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里涉及到两个重要的对象，一个是unsafe，一个是valueOffset。</p><p>unsafe是什么东西呢？它JVM为我们提供了一个访问操作系统的后门，unsafe为我们提供了硬件级别的原子操作。而valueOffset对象，是通过unsafe.objectFiledOffset方法得到，所代表的是AtomicInteger对象value成员变量在内存中的偏移量。我们可以简单的把valueOffset理解为value变量的内存地址。</p><p>而unsafe的getAndAddInt方法顾名思义就是使用操作系统的原子操作来为我们实现当前的的++操作并把旧值返回回来。因为是返回的旧值所以<br>incrementAndGet方法返回的数据应该是这个旧值加上1</p><p>◆<br>CAS的缺点<br>◆</p><pre><code>CPU开销过大在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很到的压力。    不能保证代码块的原子性CAS机制所保证的知识一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。ABA问题这是CAS机制最大的问题所在。</code></pre><p>我们现在来说什么是ABA问题。</p><p>假设小王账户有1000块钱，即v=1000。</p><p>这时有三个线程想使用CAS的方式更新这个小王的账户。线程1和线程2已经获取当前账户余额为1000，线程3还未获取当前值。</p><p>线程1为花呗扣款、线程2为花呗扣款的备用操作（避免第一次扣款失败），线程3为工资入账</p><p>接下来，线程1先一步执行成功，把当前账户成功从1000减少到500；同时线程2因为某种原因被阻塞住，没有及时扣款；线程3在线程1扣款之后，获取了当前值500。</p><p>在之后，线程2仍然处于阻塞状态，线程3继续执行，成功入账工资500，把当前值又变回了1000。</p><p>此时，线程2恢复运行状态，进行更新之前查询E和V相同，所以毫不犹豫的进行又一次账户扣款。</p><p>这种扣款的方式对于小王来说肯定是不可接受的（估计都要疯了），解决方案就是在操作的时候加个版本号或者是时间戳来标示状态信息。</p><p>同样以刚才的例子来说：</p><p>假设小王账户有1000块钱，即v=1000。</p><p>这时有三个线程想使用CAS的方式更新这个小王的账户。线程1和线程2已经获取当前账户余额为1000，线程3还未获取当前值。但是呢，这里线程1和2还需要记录一个获取当前账户余额的最后更新时间，比如9.30.</p><p>同样的线程1为花呗扣款、线程2为花呗扣款的备用操作（避免第一次扣款失败），线程3为工资入账。</p><p>接下来，线程1先一步执行成功，把当前账户成功从1000减少到500；此时账户余额的时间戳就已经变了，比如9.31。同时线程2因为某种原因被阻塞住，没有及时扣款；线程3在线程1扣款之后，获取了当前值500和时间戳9.31。</p><p>在之后，线程2仍然处于阻塞状态，线程3继续执行，成功入账工资500，把账户又变回了1000，同时时间戳更新为9.32。</p><p>此时，线程2恢复运行状态，进行更新之前查询E和V虽然相同，但是时间戳确是不一样的。</p><p>◆<br>Java提供的12种原子操作类<br>◆</p><p>原子更新基本类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AtomicBoolean：原子更新布尔类型。</span><br><span class="line">AtomicInteger：原子更新整型。</span><br><span class="line">AtomicLong：原子更新长整型。</span><br></pre></td></tr></table></figure><p>原子更新数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AtomicIntegerArray：原子更新整型数组里的元素。</span><br><span class="line">AtomicLongArray：原子更新长整型数组里面的元素。</span><br><span class="line">AtomicReferenceArray：原子更新引用类型数组里的元素。</span><br></pre></td></tr></table></figure><p>原子更新引用类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AtomicReference：原子更新引用类型。</span><br><span class="line">AtomicReferenceFieldUpdater：原子更新引用类型里的字段。</span><br><span class="line">AtomicMarkableReference：原子更新带有标记位的引用类型。</span><br></pre></td></tr></table></figure><p>原子更新字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AtomicIntegerFieldUpdater：原子更新整型字段的更新器。</span><br><span class="line">AtomicLongFieldUpdater：原子更新长整型字段的更新器。</span><br><span class="line">AtomicStampedReference：原子更新带有版本号的引用类型。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal及InheritableThreadLocal的原理剖析</title>
      <link href="/2019/03/26/hreadLocal%E5%8F%8AInheritableThreadLocal%E7%9A%84%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
      <url>/2019/03/26/hreadLocal%E5%8F%8AInheritableThreadLocal%E7%9A%84%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们知道，线程的不安全问题，主要是由于多线程并发读取一个变量而引起的，那么有没有一种办法可以让一个变量是线程独有的呢，这样不就可以解决线程安全问题了么。其实JDK已经为我们提供了ThreadLocal这个东西。</p></blockquote><p>◆<br>ThreadLocal基本使用<br>◆</p><p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。<br>ThreadLocal 的主要方法有这么几个：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initialValue 初始化</span><br><span class="line"><span class="builtin-name">set</span> 赋值</span><br><span class="line"><span class="builtin-name">get</span> 取值</span><br><span class="line"><span class="builtin-name">remove</span> 清空</span><br></pre></td></tr></table></figure><p>下面来看一个简单的使用代码示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">initialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                threadLocal.<span class="keyword">set</span>(threadLocal.<span class="keyword">get</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"thread :"</span> + Thread.currentThread().getId() + <span class="string">" is"</span> + threadLocal.<span class="keyword">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码使用了10个线程循环对一个threadLocal的值进行一千次的加法，如果我们不知道ThreadLocal的原理的话我们可能会觉得最后打印的值一定是1000、2000、3000。。10000或者是线程不安全的值。<br>但是如果你执行这段代码你会发现最后打印的都是1000。</p><p>◆<br>ThreadLocal原理剖析<br>◆</p><p>现在我们来看一下ThreadLocal是如何实现为每个线程单独维护一个变量的呢。<br>先来看一下初始化方法。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>initialValue 默认是返回空的，所以为了避免空指针问题重写了这个方法设置了默认返回值为0，但是呢，虽然这个方法好像是设置默认值的，但是还没有生效，具体请接着往下看。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="built_in">set</span>(T value) &#123;</span><br><span class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</span><br><span class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>)</span><br><span class="line">            <span class="built_in">map</span>.<span class="built_in">set</span>(this, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到set方法首先会获取当前线程，然后通过一个getMap方法获取了ThreadLocalMap，接着来看一下这个map是怎么来的呢。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这个map是在Thread类维护的一个map，下方是Thread类维护的此变量。默认这个map是空的。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap <span class="attr">threadLocals</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>接着往下看代码，如果获取的时候map不为空，则通过set方法把Thread类的threadLocals变量更新。如果是第一次创建的时候则初始化Thread的threadLocals变量。<br>下方是createMap的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来看个get方法就比较容易理解了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="keyword">get</span>() &#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意关注最后的一个return，看到调用的这个方法名我们就可以发现这个ThreadLocal的初始化原来是当第一调用get方法时如果还没有被set的时候才会去获取initialValue 方法的返回值。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        T <span class="keyword">value</span> = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, <span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>◆<br>使用ThreadLocal最应该注意的事项<br>◆</p><p>首先来看一下线程退出的办法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void exit() &#123;</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="literal">null</span>) &#123;</span><br><span class="line">            group.threadTerminated(this);</span><br><span class="line">           <span class="built_in"> group </span>= <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        target = <span class="literal">null</span>;</span><br><span class="line">        threadLocals = <span class="literal">null</span>;</span><br><span class="line">        inheritableThreadLocals = <span class="literal">null</span>;</span><br><span class="line">        inheritedAccessControlContext = <span class="literal">null</span>;</span><br><span class="line">        blocker = <span class="literal">null</span>;</span><br><span class="line">        uncaughtExceptionHandler = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们看到当线程结束的时候上方第7行会把ThreadLocal的值制为空，这个东西本身是没问题的。但是，如果你是使用的线程池，这个问题可就大了！！！<br>要知道线程池里的线程执行完一个任务之后紧接着下一个，这中间线程可不会结束，下一个任务获得Thread的值可是上一个任务的遗留数据。<br>下面是这个问题的示例代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">initialValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                threadLocal.<span class="keyword">set</span>(threadLocal.<span class="keyword">get</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"thread :"</span> + Thread.currentThread().getId() + <span class="string">" is"</span> + threadLocal.<span class="keyword">get</span>());</span><br><span class="line">            <span class="comment">//threadLocal.remove();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        ExecutorService executorService= Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行这段代码你就会发现同样的操作在线程池里已经得不到一样的结果了。想要解决这种问题也很简单，只需要把ThreadLocal的值在线程执行完清空就可以了。把第14行注释的代码放开再执行以下你就明白了。</p><p>◆<br>InheritableThreadLocal<br>◆</p><p>其实ThreadLocal还有一个比较强大的子类InheritableThreadLocal，它呢可以把父线程生成的变量传递给子线程。<br>下面来看一下代码示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InheritableThreadLocalDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  InheritableThreadLocal&lt;Integer&gt; inheritableThreadLocal = <span class="keyword">new</span>  InheritableThreadLocal&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="title">implements</span> <span class="title">Runnable</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                inheritableThreadLocal.<span class="keyword">set</span>(inheritableThreadLocal.<span class="keyword">get</span>() + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"thread :"</span> + Thread.currentThread().getId() + <span class="string">" is"</span> + inheritableThreadLocal.<span class="keyword">get</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        inheritableThreadLocal.<span class="keyword">set</span>(<span class="number">24</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行代码会发现程序输出全是1024，这就是因为InheritableThreadLocal吧在主线程设置的值24传递到了那10个子线程中。</p><p>◆<br>InheritableThreadLocal原理剖析<br>◆</p><p>接下来我们来看一下InheritableThreadLocal为什么可以实现这种功能呢。<br>InheritableThreadLocal是ThreadLocal的子类，<br>与ThreadLocal相同的set方法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="built_in">set</span>(T value) &#123;</span><br><span class="line">       <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</span><br><span class="line">       ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>)</span><br><span class="line">           <span class="built_in">map</span>.<span class="built_in">set</span>(this, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>不同点是InheritableThreadLocal重写了createMap方法，将值赋值给了线程的inheritableThreadLocals变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.inheritableThreadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟进去Thread类的源码看inheritableThreadLocals变量你会发现：我去，这不是跟Threadlocal一样么，同样初始值为null，线程退出的时候清空。没错，就是这样的。也就是说它其实也是一个线程私有的变量，ThreadLocal的功能它是都有的。</p><p>那么它又是怎么把父线程的变量传递到子线程的呢？<br>接着看Thread的构造方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一路追踪init方法你会看见这段代码：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> init(ThreadGroup g, Runnable target, <span class="built_in">String</span> name,</span><br><span class="line">                      long stackSize, AccessControlContext acc) &#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        Thread <span class="built_in">parent</span> = currentThread();</span><br><span class="line">        SecurityManager security = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">                g = security.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (g == <span class="literal">null</span>) &#123;</span><br><span class="line">                g = <span class="built_in">parent</span>.getThreadGroup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        g.checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        g.addUnstarted();</span><br><span class="line">        <span class="keyword">this</span>.group = g;</span><br><span class="line">        <span class="keyword">this</span>.daemon = <span class="built_in">parent</span>.isDaemon();</span><br><span class="line">        <span class="keyword">this</span>.priority = <span class="built_in">parent</span>.getPriority();</span><br><span class="line">        <span class="keyword">if</span> (security == <span class="literal">null</span> || isCCLOverridden(<span class="built_in">parent</span>.getClass()))</span><br><span class="line">            <span class="keyword">this</span>.contextClassLoader = <span class="built_in">parent</span>.getContextClassLoader();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">this</span>.contextClassLoader = <span class="built_in">parent</span>.contextClassLoader;</span><br><span class="line">        <span class="keyword">this</span>.inheritedAccessControlContext =</span><br><span class="line">                acc != <span class="literal">null</span> ? <span class="attribute">acc</span> : AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        setPriority(priority);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parent</span>.inheritableThreadLocals != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.inheritableThreadLocals =</span><br><span class="line">                ThreadLocal.createInheritedMap(<span class="built_in">parent</span>.inheritableThreadLocals);</span><br><span class="line">        <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line">        tid = nextThreadID();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>仔细观察倒数第5行到倒数第二行你就明白了。</p><p>本文所有源码<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/thread/threadlocal" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁的优化</title>
      <link href="/2019/03/26/%E7%9A%84%E4%BC%98%E5%8C%96/"/>
      <url>/2019/03/26/%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在前几天的文章：<a href="https://mp.weixin.qq.com/s/Z22WRS4mQ0Wftflp6bedew" target="_blank" rel="noopener">浅谈Java中的锁：Synchronized、重入锁、读写锁</a> 中我们学习了多线程环境下为了保证线程安全需要加各种各样的锁，但是加锁势必会带来性能的损耗，此篇文章就讨论一下如何优化加锁后的程序</p><p>◆<br>锁优化策略<br>◆</p><pre><code>1. 减少锁持有时间     对一个方法加锁，不如只对需要同步的那几行代码加锁，减少线程持有锁的时间。2. 减小锁粒度    将大对象，拆成小对象进行加锁。例如ConcurrentHashMap采取对segment加锁而不是对整个map加锁，这样只要修改的segment不同，就可以并发的进行。3. 锁分离     使用我们文章开头提到的文章中所说的读写分离锁或者根据不同的功能进行加锁4. 锁粗化     策略1要求每个线程持有锁的时间越短越好，但是呢，锁的申请、同步和释放也是需要时间的，所以说如果有频繁的加锁请求时（例如在循环内加锁），最好把多个加锁的请求合并为一个（在循环外加锁），以减少锁的请求及释放的时间。</code></pre><p>◆<br>虚拟机对锁优化做的努力<br>◆</p><pre><code>1. 锁偏向   当一个线程获得锁之后，锁就会进入偏向模式。接下来这个线程如果再次请求锁的时候就不需要再做同步操作了。（即：持有该锁的线程在接下来的执行中遇到同步块时不再需要lock和unlock了，直接执行即可）直到另外的线程前来请求的时候锁偏向才会失效。锁偏向的优化适用于锁竞争不是很强的场景，如果是竞争激烈的场景则偏向锁会一直处于失效状态。2. 轻量级锁    如果偏向锁失败，那么系统会进行轻量级锁的操作，使用CAS操作来尝试加锁。如果轻量级锁失败，才调用系统级别的重量级锁（syncrhoized）来加锁。     3. 自旋锁    为了避免使用重量级锁的巨大消耗，虚拟机在轻量级锁失败膨胀后让当前线程做几个空循环（这就是自旋的来源）来赌这个线程可以在自旋之后获得锁，如果还不能获得锁的话则真实的使用重量级锁了。4. 锁消除    虚拟机在编译时，会对上下文进行扫描，去除那些不可能存在竞争的锁。</code></pre><p>◆<br>总结<br>◆</p><p>为了尽量避免使用重量级锁，JVM首先在编译期先消除一些不可能存在竞争的锁。当一个线程获得锁后会对这个线程偏向以保证此线程再次获得锁时可以减少同步所需的时间。偏向锁失败后会尝试轻量级锁，轻量级锁尝试使用CAS操作来获得锁。如果轻量级锁失败，JVM同样会赌一下此线程很可能很快获得锁，就会尝试自旋锁，将线程做几个空循环。如果自旋锁也失败，那么就只能升级成重量级锁了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池核心原理剖析</title>
      <link href="/2019/03/26/ava%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
      <url>/2019/03/26/ava%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在系统开发时，我们经常会遇到“池”的概念。使用池一种以空间换时间的做法，通常在内存中事先保存一系列整装待命的对象，以供后期供其他对象随时调用。常见的池有：数据库连接池，socket连接池，线程池等。今天我们就来看一下线程池的概念。</p></blockquote><p>◆<br>Executor<br>◆</p><p>JDK为我们提供了一套Executor框架来方便我们来管理和使用线程池。<br>打开java.util.concurrent.Executors类，我们可以发现JDK为我们提供了那么多的方法来帮助我们高效快捷的创建线程池：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">FixedThreadPool</span>(int nThreads);<span class="comment">//创建一个固定数目的、可重用的线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">SingleThreadExecutor</span>();<span class="comment">//创建一个单线程化的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">CachedThreadPool</span>();<span class="comment">//创建一个可缓存线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="keyword">new</span><span class="type">ScheduledThreadPool</span>(int corePoolSize);<span class="comment">//创建一个支持定时及周期性任务执行的线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="keyword">new</span><span class="type">SingleThreadScheduledExecutor</span>() ;<span class="comment">//创建一个支持定时及周期性任务执行的线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">WorkStealingPool</span>() ;<span class="comment">//创建一个拥有多个任务队列的线程池</span></span><br></pre></td></tr></table></figure><p>上方简单列举了几个Executor框架为我们提供的创建线程池的方法，这些线程池拥有各种各样的功能，我想当你刚刚开始使用线程的时候google如何使用线程池的时候大部分文章都是教你如何使用上方的一些方法创建一个线程池。但是如果你去查看他们的源码就会发现他们最后构造的时候都调用了同一个构造方法。（除了newWorkStealingPool之外，这个我们在下篇文章再讨论）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,<span class="comment">//线程池线程数量</span></span><br><span class="line">                           <span class="keyword">int</span> maximumPoolSize,<span class="comment">//线程中最大的线程数量</span></span><br><span class="line">                           <span class="keyword">long</span> keepAliveTime,<span class="comment">//线程池线程数量超过corePoolSize的空闲线程的存活时间</span></span><br><span class="line">                           TimeUnit unit,<span class="comment">//keepAliveTime时间单位</span></span><br><span class="line">                           BlockingQueue&lt;Runnable&gt; workQueue,<span class="comment">//被提交还没执行的任务存放在这里</span></span><br><span class="line">                           ThreadFactory threadFactory,<span class="comment">//线程工厂</span></span><br><span class="line">                           RejectedExecutionHandler <span class="keyword">handler</span>)<span class="comment">//任务过多时的拒绝策略</span></span><br></pre></td></tr></table></figure><p>上方的4个参数我想你看到了就会明白了，现在我们着重来讲一下下面的三个参数。</p><p>◆<br>WorkQueue<br>◆</p><p>参数workQueue是用来存放已提交但还未执行的任务，JDK为我们提供了一下实现：</p><p>直接提交队列SynchronousQueue</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">当新任务过来的时候它是这样处理的：</span><br><span class="line"><span class="keyword">if</span>（有空闲线程）&#123;</span><br><span class="line">    处理</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    if(当前线程数&lt;maximumPoolSize)&#123;</span><br><span class="line">        创建新线程处理</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        执行拒绝策略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此使用这个队列时一定要设置很大的maximumPoolSize</p><p>有界的任务队列ArrayBlockingQueue</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（当前线程数&lt;corePoolSize）&#123;</span><br><span class="line">    创建新线程执行</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    if(任务队列是否已满)&#123;</span><br><span class="line">       if(当前线程&lt;maximumPoolSize)&#123;</span><br><span class="line">          创建新线程处理</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">          执行拒绝策略</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       放到任务队列</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无界的任务队列LinkedBlockingDeque</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（当前线程数&lt;corePoolSize）&#123;</span><br><span class="line">    创建新线程执行</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    放入任务队列，等待执行，直到系统资源耗尽</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优先任务队列PriorityBlockingQueue</span><br><span class="line">根据任务的优先级将任务存放在任务队列特定位置</span><br><span class="line"><span class="keyword">if</span>（当前线程数&lt;corePoolSize）&#123;</span><br><span class="line">    创建新线程执行</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    等待执行，直到系统资源耗尽</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>线程工厂<br>◆</p><p>第六个参数threadFactory是为线程池中创建线程的，我们使用Executor框架创建的线程就是有threadFactory提供的。我们看一下JDK提供的默认的threadFactory：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup <span class="keyword">group</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">        DefaultThreadFactory() &#123;</span><br><span class="line">            SecurityManager s = System.getSecurityManager();</span><br><span class="line">            <span class="keyword">group</span> = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                                  Thread.currentThread().getThreadGroup();</span><br><span class="line">            namePrefix = <span class="string">"pool-"</span> +</span><br><span class="line">                          poolNumber.getAndIncrement() +</span><br><span class="line">                         <span class="string">"-thread-"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Thread newThread(Runnable r) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">group</span>, r,</span><br><span class="line">                                  namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                                  <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">                t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">                t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重点关注一下其中的newThread方法，看到这个我想你就明白了为什么你使用线程池创建出来的线程打印的时候名字的来源，还有是否是守护线程和优先级等属性的来源了。</p><p>◆<br>拒绝策略<br>◆</p><p>看到刚刚的几种任务队列我们发现当任务过多时是需要指定拒绝策略来进行拒绝呢，那么JDK又为我们提供了哪些拒绝策略呢。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AbortPolicy直接抛出异常。</span><br><span class="line">CallerRunsPolicy：如果线程池未关闭，则在调用者线程中运行当前任务</span><br><span class="line"><span class="keyword">DiscardOldestPolicy：丢弃即将执行的任务，然后再尝试提交当前任务</span></span><br><span class="line"><span class="keyword">DiscardPolicy：丢弃此任务</span></span><br></pre></td></tr></table></figure><p>◆<br>线程池的扩展<br>◆</p><p>ThreadPoolExecutor不仅仅能够创建各种各样的线程来帮助我们实行功能，它还预留了三个接口来供我们进行扩展。</p><p>在runWorker方法中调用线程进行执行之前调用了beforeExecute方法，执行之后调用了afterExecute()方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> runWorker(Worker w) &#123;</span><br><span class="line">       Thread wt = Thread.currentThread();</span><br><span class="line">       Runnable <span class="keyword">task</span> = w.firstTask;</span><br><span class="line">       w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">       w.unlock(); </span><br><span class="line">       <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">task</span> != <span class="keyword">null</span> || (<span class="keyword">task</span> = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               w.lock();</span><br><span class="line">               <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                    (Thread.interrupted() &amp;&amp;</span><br><span class="line">                     runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                   !wt.isInterrupted())</span><br><span class="line">                   wt.interrupt();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   beforeExecute(wt, <span class="keyword">task</span>);<span class="comment">//线程执行前</span></span><br><span class="line">                   Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="keyword">task</span>.run();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                       thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                       thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                       thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       afterExecute(<span class="keyword">task</span>, thrown);<span class="comment">//线程执行后</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   <span class="keyword">task</span> = <span class="keyword">null</span>;</span><br><span class="line">                   w.completedTasks++;</span><br><span class="line">                   w.unlock();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           processWorkerExit(w, completedAbruptly);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这两个方法在ThreadPoolExecutor类中是没有实现的，我们想要监控线程运行前后的数据就可以通过继承ThreadPoolExecutor类来实现这个扩展。<br>另外还有一个terminated()方法是在整个线程池退出的时候调用的，我们这里一并扩展。</p><pre><code>public class ThreadPoolExecutorDemo extends ThreadPoolExecutor {    //注意这里因为ThreadPoolExecutor没有无参的构造，所以还需要重写一下构造方法。    //这里限于篇幅就不贴了    @Override    protected void afterExecute(Runnable r, Throwable t) {        System.out.println(Thread.currentThread().getId()+&quot;执行完成&quot;);    }    @Override    protected void terminated() {        System.out.println(&quot;线程池退出&quot;);    }}//使用这个demo就可以验证我们扩展的结果了。public class ThreadPoolDemo {    static class ThreadDemo extends Thread {        @Override        public void run() {            System.out.println(System.currentTimeMillis() + &quot;:Thread ID is:&quot; + Thread.currentThread().getId());            try {                Thread.sleep(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void main(String[] args) throws InterruptedException {        ThreadPoolExecutorDemo threadPoolExecutorDemo=  new ThreadPoolExecutorDemo(5,5,0,TimeUnit.SECONDS,new LinkedBlockingDeque&lt;Runnable&gt;());        ThreadDemo threadDemo = new ThreadDemo();        for (int i = 0; i &lt; 20; i++) {            threadPoolExecutorDemo.submit(threadDemo);        }        threadPoolExecutorDemo.shutdown();    }}</code></pre><p>本文所有源码：<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/thread/threadpool" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java中的锁：Synchronized、重入锁、读写锁</title>
      <link href="/2019/03/26/Java%E4%B8%AD%E7%9A%84%E9%94%81%EF%BC%9ASynchronized%E3%80%81%E9%87%8D%E5%85%A5%E9%94%81%E3%80%81%E8%AF%BB%E5%86%99%E9%94%81/"/>
      <url>/2019/03/26/Java%E4%B8%AD%E7%9A%84%E9%94%81%EF%BC%9ASynchronized%E3%80%81%E9%87%8D%E5%85%A5%E9%94%81%E3%80%81%E8%AF%BB%E5%86%99%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java开发必须要掌握的知识点就包括如何使用锁在多线程的环境下控制对资源的访问限制</p></blockquote><p>◆<br>Synchronized<br>◆</p><p>首先我们来看一段简单的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotSyncDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10000</span>;j++)&#123;</span><br><span class="line">               i++;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadDemo t1=<span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo t2=<span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方的代码使用了2个线程同时对静态变量i进行++操作，理想中的结果最后输出的i的值应该是20000才对，但是如果你执行这段代码的时候你会发现最后的结果始终是一个比20000小的数。这个就是由于JMM规定线程操作变量的时候只能先从主内存读取到工作内存，操作完毕后在写到主内存。而当多个线程并发操作一个变量时很可能就会有一个线程读取到另外一个线程还没有写到主内存的值从而引起上方的现象。更多关于JMM的知识请参考此文章：<a href="https://mp.weixin.qq.com/s/cDS53momhdkgnVKpNh50GA" target="_blank" rel="noopener">Java多线程内存模型</a></p><p>想要避免这种多线程并发操作引起的数据异常问题一个简单的解决方案就是加锁。JDK提供的synchronize就是一个很好的选择。<br>synchronize的作用就是实现线程间的同步，使用它加锁的代码同一时刻只能有一个线程访问，既然是单线程访问那么就肯定不存在并发操作了。<br>synchronize可以有多种用法，下面给出各个用法的示例代码。</p><p>◆<br>Synchronized的三种使用方式<br>◆</p><p>给指定对象加锁，进入代码前需要获得对象的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncObjDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadDemo t1 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo t2 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给方法加锁，相当于给当前实例加锁，进入代码前需要获得当前实例的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                 add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo=<span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(threadDemo);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(threadDemo);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给静态方法加锁，相当于给当前类加锁，进入代码前需要获得当前类的锁。这种方式请慎用，都锁住整个类了，那效率能高哪去</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>◆<br>重入锁<br>◆</p><p>在JDK6还没有优化synchronize之前还有一个锁比它表现的更为亮眼，这个锁就是重入锁。<br>我们来看一下一个简单的使用重入锁的案例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">                 <span class="keyword">try</span> &#123;</span><br><span class="line">                     i++;</span><br><span class="line">                 &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                     <span class="keyword">lock</span>.unlock();</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws InterruptedException </span>&#123;</span><br><span class="line">        ThreadDemo t1 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        ThreadDemo t2 = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.<span class="keyword">join</span>();</span><br><span class="line">        t2.<span class="keyword">join</span>();</span><br><span class="line">        System.<span class="keyword">out</span>.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码使用重入锁同样实现了synchronize的功能。并且呢，我们可以看到使用冲入锁是显示的指定什么时候加锁什么时候释放的，这样对于一些流程控制就会更加的有优势。</p><p>再来看这个锁为什么叫做重入锁呢，这是因为这种锁是可以反复进入的，比如说如下操作是允许的。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line"><span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">lock</span>.unlock();</span><br><span class="line">    <span class="keyword">lock</span>.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过需要注意的是如果多次加锁的话同样也要记得多次释放，否则资源是不能被其他线程使用的。</p><p>在之前的文章：多线程基本概念 中有提到过因为线程优先级而导致的饥饿问题，重入锁提供了一种公平锁的功能，可以忽略线程的优先级，让所有线程公平竞争。使用公平锁的方式只需要在重入锁的构造方法传入一个true就可以了。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>重入锁还提供了一些高级功能，例如中断。<br>对于synchronize来说，如果一个线程获取资源的时候要么阻塞要么就是获取到资源，这样的情况是无法解决死锁问题的。而重入锁则可以响应中断，通过放弃资源而解决死锁问题。<br>使用中断的时候只需要把原先的lock.lock()改成lock.lockInterruptibly()就OK了。<br>来看代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockInterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"完成任务"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock1.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock2.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"退出"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo(<span class="number">1</span>),<span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo(<span class="number">2</span>),<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看上方代码我们可以看到，线程t1启动后先占有lock1，然后会在睡眠1秒之后试图占有lock2，而t2则先占有lock2，然后试图占有lock1。这个过程则势必会发生死锁。而如果再这个时候我们给t1一个中断的信号t1就会响应中断从而放弃资源，继而解决死锁问题。</p><p>除了提供中断解决死锁以外，重入锁还提供了限时等待功能来解决这个问题。<br>限时等待的使用方式是使用lock.tryLock(2,TimeUnit.SECONDS)<br>这个方法有两个参数，前面是等待时长，后面是等待时长的计时单位，如果在等待时长范围内获取到了锁就会返回true。</p><p>请看代码示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReentrantLockTimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">lock</span>.tryLock(<span class="number">2</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"获取锁成功"</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"获取锁失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">lock</span>.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo(), <span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadDemo(), <span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的tryLock也可以不带参数，不带参数的时候就是表示立即获取，获取不成功就直接返回false</p><p>我们知道synchronize配合wait和notify可以实现等待通知的功能，重入锁同样也提供了这种功能的实现。那就是condition。使用lock.newCondition()就可以获得一个Condition对象。</p><p>下面请看使用Condition的代码示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReentrantLockWaitNotifyThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Condition condition = <span class="keyword">lock</span>.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WaitThreadDemo</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"WaitThread wait,time="</span> + System.currentTimeMillis());</span><br><span class="line">                <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">                condition.<span class="keyword">await</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">lock</span>.unlock();</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"WaitThread end,time="</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">NotifyThreadDemo</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"NotifyThread notify,time="</span> + System.currentTimeMillis());</span><br><span class="line">                condition.signal();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                    System.<span class="keyword">out</span>.println(<span class="string">"NotifyThread end,time="</span> + System.currentTimeMillis());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        WaitThreadDemo waitThreadDemo = <span class="keyword">new</span> WaitThreadDemo();</span><br><span class="line">        NotifyThreadDemo notifyThreadDemo = <span class="keyword">new</span> NotifyThreadDemo();</span><br><span class="line">        waitThreadDemo.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyThreadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>读写锁<br>◆</p><p>通过上方的内容我们知道了为了解决线程安全问题，JDK提供了相当多的锁来帮助我们。但是如果多线程并发读的情况下是不会出现线程安全问题的，那么有没有一种锁可以在读的时候不控制，读写冲突的时候才会控制呢。答案是有的，JDK提供了读写分离锁来实现读写分离的功能。</p><p>这里给出使用读写锁的一个代码示例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock readLock = readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock writeLock = readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span>(<span class="params">Lock <span class="keyword">lock</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"readTime："</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span>(<span class="params">Lock <span class="keyword">lock</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">"writeTime："</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">lock</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ReadThread</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            read(readLock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WriteThread</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            write(writeLock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> ReadThread().start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> WriteThread().start();</span><br><span class="line">        <span class="keyword">new</span> WriteThread().start();</span><br><span class="line">        <span class="keyword">new</span> WriteThread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码模拟了10个线程并发读，3个线程并发写的状况，如果我们使用synchronize或者重入锁的时候我想上方最后的耗时应该是26秒多。但是如果你执行 一下上方的代码你就会发现仅仅只花费了6秒多。这就是读写锁的魅力。</p><p>本文所有源码<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/thread/lock" target="_blank" rel="noopener">https://github.com/shiyujun/syj-study-demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello，Thread</title>
      <link href="/2019/03/22/ello%EF%BC%8CThread/"/>
      <url>/2019/03/22/ello%EF%BC%8CThread/</url>
      
        <content type="html"><![CDATA[<p>创建线程的三种方法，线程的生命周期，sleep，yield，join，wait 和notify，线程组，守护线程，线程的优先级<br>◆<br>如何创建线程<br>◆</p><p>Java 中创建线程的方法有三种：</p><ol><li>继承 Thread 类创建线程</li></ol><p>新建一个类继承 Thread 类，并重写 Thread 类的 run() 方法。<br>创建 Thread 子类的实例。<br>调用该子类实例的 start() 方法启动该线程。</p><p>代码举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello Thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.实现 Runnable 接口创建线程:</p><p>创建一个类实现 Runnable 接口，并重写该接口的 run() 方法。<br>创建该实现类的实例。<br>将该实例传入 Thread(Runnable r) 构造方法中创建 Thread 实例。<br>调用该 Thread 线程对象的 start() 方法。</p><p>代码举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello Thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 Callable 和 FutureTask 创建线程:</li></ol><p>创建一个类实现 Callable 接口，并重写 call() 方法。<br>创建该 Callable 接口实现类的实例。<br>将 Callable 的实现类实例传入 FutureTask(Callable<v> callable) 构造方法中创建 FutureTask 实例。<br>将 FutureTask 实例传入 Thread(Runnable r) 构造方法中创建 Thread 实例。<br>调用该 Thread 线程对象的 start() 方法。<br>调用 FutureTask 实例对象的 get() 方法获取返回值。</v></p><p>代码举例如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloThread3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Callable</span></span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">String</span> call() &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello Thread"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Callable return value"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> <span class="type">ThreadDemo</span>();</span><br><span class="line">        FutureTask&lt;<span class="keyword">String</span>&gt; futureTask = <span class="keyword">new</span> <span class="type">FutureTask</span>&lt;<span class="keyword">String</span>&gt;(threadDemo);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> <span class="type">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(futureTask.<span class="keyword">get</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>◆<br>线程的生命周期<br>◆</p><p>关于Java中线程的生命周期，首先看一下下面这张图：</p><p>上图中基本上囊括了Java中多线程各重要知识点。掌握了上图中的各知识点，Java中的多线程也就基本上掌握了。</p><p>◆<br>线程的基本状态<br>◆</p><p>新建状态（New）：当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread();</p><p>就绪状态（Runnable）：当调用方法t.start()时，线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；同样还有几种情况会进行就绪状态，请参见上图。</p><p>运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</p><p>阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：请参见上图。</p><p>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p><p>◆<br>线程的基本操作<br>◆</p><p>sleep：使当前线程休眠指定毫秒</p><p>yield：使当前线程让出CPU，从运行状态转到可运行状态。注意仅仅是让出，让出之后也会加入到抢占资源的队伍中。</p><p>join：把指定的线程加入到当前线程，比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B</p><p>线程停止：<br>Thread本身提供了一个stop方法，但是这个不推荐使用。因为使用stop的时候会暴力终止线程，从而造成数据不一致。<br>优雅的停止线程的代码举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">boolean</span> stopMe = <span class="keyword">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopMe</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.stopMe=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stopMe) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">        threadDemo.stopMe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以一个volatile修饰的变量stopMe来控制线程的停止。</p><p>线程中断：</p><p>线程中断的相关方法分别是这三个</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>; <span class="comment">//中断线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span></span>; <span class="comment">//判断线程是否被中断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span></span>; <span class="comment">//判断线程是否被中断，并清除当前中断状态</span></span><br></pre></td></tr></table></figure><p>线程中断的代码举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        threadDemo.start();</span><br><span class="line">        threadDemo.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait 和notify<br>这两个方法是JDK为了支持多线程之间的协作而提供的。<br>当在线程A中调用了obj.wait()方法时，线程A会停止执行进入等待状态。直到其他线程调用obj.notify()时才会进入阻塞状态继而等待获取锁。<br>请看下方示例代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyThread</span> </span>&#123;</span><br><span class="line">    public static <span class="type">Object</span> obj = <span class="keyword">new</span> <span class="type">Object</span>();</span><br><span class="line"></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">WaitThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            synchronized (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">System</span>.out.println(<span class="string">"WaitThread wait,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">                    obj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">System</span>.out.println(<span class="string">"WaitThread end,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">NotifyThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void run() &#123;</span><br><span class="line">            synchronized (obj) &#123;</span><br><span class="line">                <span class="type">System</span>.out.println(<span class="string">"NotifyThread notify,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">                obj.notify();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Thread</span>.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">System</span>.out.println(<span class="string">"NotifyThread end,time="</span> + <span class="type">System</span>.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">WaitThreadDemo</span> waitThreadDemo = <span class="keyword">new</span> <span class="type">WaitThreadDemo</span>();</span><br><span class="line">        <span class="type">NotifyThreadDemo</span> notifyThreadDemo = <span class="keyword">new</span> <span class="type">NotifyThreadDemo</span>();</span><br><span class="line">        waitThreadDemo.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Thread</span>.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        notifyThreadDemo.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上方的代码中，Wait线程会首先获取到obj的锁，当它执行wait方法时就会释放obj的锁并进入等待状态。这个时候Notify线程可以获取到obj的锁，并且唤醒Wait线程，但是因为此时Notify线程是睡眠了2秒钟之后才释放的obj的锁，所以Wait线程获取锁的时候Notify线程已经执行完毕了。<br>此程序的运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WaitThread wait,<span class="attribute">time</span>=1553088237753</span><br><span class="line">NotifyThread notify,<span class="attribute">time</span>=1553088237862</span><br><span class="line">NotifyThread end,<span class="attribute">time</span>=1553088239867</span><br><span class="line">WaitThread end,<span class="attribute">time</span>=1553088239867</span><br></pre></td></tr></table></figure><p>suspen和resume<br>它们两个的功能是挂起线程和继续执行，被suspen挂起的线程必须被resume唤醒才可以继续执行。乍看起来 可以实现wait和notify的功能，不过我可不推荐你使用它们，和wait之后会释放锁不同，suspen挂起之后依然会持有锁，这个可就非常危险了。</p><p>线程组<br>在一个系统中如果线程数量众多而又功能比较一致，就可以把这些线程放到一个线程组里。<br>线程组示例代码：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">Thread</span></span> </span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> void run() &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"I am "</span>+Thread.currentThread().getThreadGroup().getName()+<span class="string">"-"</span>+Thread.currentThread().getName());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ThreadGroup threadGroup=<span class="keyword">new</span> <span class="type">ThreadGroup</span>(<span class="string">"groupDemo"</span>);</span><br><span class="line">        Thread t1=<span class="keyword">new</span> <span class="type">Thread</span>(threadGroup,<span class="keyword">new</span> <span class="type">ThreadDemo</span>(),<span class="string">"t1"</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> <span class="type">Thread</span>(threadGroup,<span class="keyword">new</span> <span class="type">ThreadDemo</span>(),<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>守护线程<br>在线程的世界里，由我们自己创建的线程叫用户线程。而一些系统创建的线程，如垃圾回收线程等被称之为守护线程，如果想要把一个用户线程设置为守护线程可以在线程的调用线程的start方法前设置线程的daemon属性为true；</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t1</span>.setDaemon(true)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>当一个程序中只有守护线程的时候这个程序也就要结束了。</p><p>线程的优先级</p><p>Java中的线程可以有自己的优先级，优先级高的线程在进行资源抢占的时候往往会更有优势。线程饥饿现象就是由于线程的优先级低无法抢占资源而引起的。<br>在Java中线程的优先级可以设置的范围是1到10之间，数字越大优先级越高。Java线程创建默认的优先级是5，我们可以线程start之前通过如下方式设置线程的优先级。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t1</span>.setPriority(<span class="number">1</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>本文所有源码<a href="https://github.com/shiyujun/syj-study-demo/tree/master/src/main/java/cn/shiyujun/thread/hellothread" target="_blank" rel="noopener">https://github.com/shiyujun</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程内存模型</title>
      <link href="/2019/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/03/21/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>◆<br>JMM的基本概念<br>◆</p><p>Java作为平台无关性语言，JLS(Java语言规范)定义了一个统一的内存管理模型JMM（Java Memory Model)。JMM规定了jvm内存分为主内存和工作内存 ，主内存存放程序中所有的类实例、静态数据等变量，是多个线程共享的，而工作内存存放的是该线程从主内存中拷贝过来的变量以及访问方法所取得的局部变量，是每个线程私有的其他线程不能访问。每个线程对变量的操作都是以先从主内存将其拷贝到工作内存再对其进行操作的方式进行，多个线程之间不能直接互相传递数据通信，只能通过共享变量来进行。<br><img src="/2019/03/21/Java多线程内存模型/2.jpg" alt="2"><br>从上图来看，线程1与线程2之间如要通信的话，必须要经历下面2个步骤：</p><ol><li>首先，线程1把本地工作内存中更新过的共享变量刷新到主内存中去。</li><li>然后，线程2到主内存中去读取线程1之前已更新过的共享变量。<br>典型的高并发引起的问题就存在由于线程读取到的数据还没有从另外的线程刷新到主内存中而引起的数据不一致问题。</li></ol><p>◆<br>主内存与工作内存的数据交互<br>◆</p><p>JLS一共定义了8种操作来完成主内存与线程工作内存的数据交互：</p><pre><code>lock：把主内存变量标识为一条线程独占，此时不允许其他线程对此变量进行读写unlock：解锁一个主内存变量read：把一个主内存变量值读入到线程的工作内存load：把read到变量值保存到线程工作内存中作为变量副本use：线程执行期间，把工作内存中的变量值传给字节码执行引擎assign：字节码执行引擎把运算结果传回工作内存，赋值给工作内存中的结果变量store：把工作内存中的变量值传送到主内存write：把store传送进来的变量值写入主内存的变量中</code></pre><p>使用标准的操作再来重现一下上方的2个线程之间的交互流程则是这样的：<br>线程1从主内存read一个值为0的变量x到工作内存<br>使用load把变量x保存到工作内存作为变量副本<br>将变量副本x使用use传递给字节码执行引擎进行x++操作<br>字节码执行引擎操作完毕后使用assign将结果赋值给变量副本<br>使用store把变量副本传送到主内存<br>使用write把store传送的数据写到主内存<br>线程2从主内存read到x，然后load–&gt;use–&gt;assign–&gt;store–&gt;write</p><p>另外使用这8种操作也有一些规则：<br>read 和 load必须以组合的方式出现，不允许一个变量从主内存读取了但工作内存不接受情况出现<br>store和write必须以组合的方式出现，不允许从工作内存发起了存储操作但主内存不接受的情况出现<br>工作内存的变量如果没有经过 assign 操作，不允许将此变量同步到主内存中<br>在 use 操作之前，必须经过 load 操作<br>在 store 操作之前，必须经过 assign 操作<br>unlock 操作只能作用于被 lock 操作锁定的变量<br>一个变量被执行了多少次 lock 操作就要执行多少次 unlock 才能解锁<br>一个变量只能在同一时刻被一条线程进行 lock 操作<br>执行 lock 操作后，工作内存的变量的值会被清空，需要重新执行 load 或 assign 操作初始化变量的值<br>对一个变量执行 unlock 操作之前，必须先把此变量同步回主内存中</p><p>◆<br>多线程中的原子性、可见性、有序性<br>◆</p><p>原子性：关于原子性的定义可以参考我的上篇博客《浅谈数据库事务》。在JLS中保证原子性的操作包括read、load、assign、use、store和write。基本数据类型（除了long 和double）操作都具有原子性。<br>如果需要更大范围的原子性操作的时候，可以使用lock和unlock操作来完成这种需求。<br>可见性：是指当一个线程修改了共享变量的值，其他线程是否能够立即得知这个修改。<br>由上方JMM的概念得知，线程操作数据是在工作内存的，当多个线程操作同一个数据的时候很容易读取到还没有被write到主内存变量的值。<br>Java是如何保证可见性的：volatile、synchronized、final关键字<br>有序性：在并发时，程序的执行可能会出现乱序。给人的直观感觉就是：写在前面的代码，会在后面执行。有序性问题的原因是因为程序在执行时，可能会进行指令重排，重排后的指令与原指令的顺序未必一致。关于指令重排会在下方讲。</p><p>◆<br>指令重排<br>◆</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int a</span>=1;</span><br><span class="line"><span class="attribute">int b</span>=2;</span><br><span class="line"><span class="attribute">int c</span>=3;</span><br><span class="line"><span class="attribute">int d</span>=4;</span><br></pre></td></tr></table></figure><p>你能说出上方这段代码的执行顺序么？其实我们可能理所当然的以为它会从上往下顺序执行。事实上，在实际运行时，为了优化指令的执行顺序等，代码指令可能并不是严格按照代码语句顺序执行的。上方的代码执行顺序可能完全反过来，这个就是指令重排。<br>不过呢，指令重排也不是可以随意重排的，它需要遵守一定的规则：<br>程序顺序规则：一个线程内保证语义的正确性。<br>锁规则：解锁肯定先于随后的加锁前。<br>volatile规则：对一个volatile的写，先于volatile的读。<br>传递性：如果A 先于 B，且B 先于 C，那么A 肯定先于 C。<br>start()规则：线程的start()操作先于线程的其他操作。<br>join()规则：线程的所有操作先于线程的关闭。<br>程序中断规则：线程的中断先于被中断后执行的代码。<br>对象finalize规则：一个对象的初始化完成先于finalize()方法。</p><p>◆<br>volatile关键字<br>◆</p><p>volatile关键字旨在告诉虚拟机在这个地方要注意不能随意的进行指令重排，而虚拟机看到一个变量被volatile修饰以后就会采用一些特殊的手段来保证变量的可见性。不过要注意的是volatile关键字不能保证原子性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基本概念 </title>
      <link href="/2019/03/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/03/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h4><span id="同步和异步">同步和异步</span></h4><p>同步就好比打电话，通信双方，你一句我一句,一句话得不到回应就会一直问：“喂？喂？可以听到么？是不是信号不好呀”。<br>异步就像发短信，发完短信我就去干点别的，看个视频、玩个游戏、干啥都行，等对方给我回信息了我再来处理短信（也可以不处理）。</p><h4><span id="线程和进程">线程和进程</span></h4><p>进程的概念听起来很抽象，不大好理解。但是我知道你肯定认识这个东西，请看下图：<br><img src="/2019/03/20/多线程基本概念/1.jpg" alt="1"><br>上方这些占用我的电脑CPU、内存、磁盘、网络的这些就都是进程。</p><p>那什么是线程呢？线程可以理解成是在进程中独立运行的子任务。比如微信运行时就会有很多的子任务在同时运行。比如，视频线程、下载线程、表情线程、语言线程等。简单来说，一组线程互相协作完成某一个程序的一些功能供我们使用。</p><h4><span id="并发和并行">并发和并行</span></h4><p>并发和并行乍一看好像是一种东西，但是实际上区别很大。并发表示的是交替做不同事情的能力，而并行表示的是同时做不同事情的能力。例如你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这就是并发。你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这是并行。<br>我们常说的高并发系统就是说的并发而不是并行。<br>并不是所有的系统都可以实现并行，因为一个CPU一次只能执行一条指令，所以想要实现并行必须是多核才可以</p><h4><span id="临界资源">临界资源</span></h4><p>临界资源：是一次仅允许一个进程使用的共享资源。例如公共电话，一次只能一个人使用</p><p>临界区：每个进程中访问临界资源的那段代码叫做临界区。例如使用公共电话的人</p><h4><span id="阻塞">阻塞</span></h4><p>线程在试图执行代码前，会试图获取临界区的锁，如果得不到，线程就会被挂起等待，从而形成阻塞。</p><h4><span id="死锁">死锁</span></h4><p>多个线程循环等待它方占有的资源而无限期地僵持下去的局面。例如两个人想要使用公共电话打电话，结果一个人抢到了话筒，一个人拨了号。两个人谁也不让谁，就会无休止地等下去从而引起死锁。</p><p>死锁产生的四大必要因素：</p><p>互斥：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程，其他进程就不能再访问，直到该进程访问结束。</p><p>占有且等待：一个进程本身占有部分资源，同时还有资源未得到满足，正在等待其他进程释放该资源。</p><p>不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。</p><p>循环等待：存在一个进程链，使得每个进程都占有下一个进程所需的至少一种资源。</p><p>当以上四个条件都满足时才会发生死锁，所以想要避免死锁只要能破坏上方四个条件的任意一个都可以。</p><h4><span id="饥饿">饥饿</span></h4><p>线程因为优先级或其他原因始终无法获取到临界资源。例如A在使用公用电话在打电话，B来了之后在后面排队。之后C来了，一看认识A，好么，哥们你打完我来。然后D来了，他认识C。。。就这样B一直等待从而引起饥饿。</p><h4><span id="活锁">活锁</span></h4><p>多个相互协作的线程为了彼此间的响应而相互礼让，使得没有一个线程能够继续前进，那么就发生了活锁。例如两个人在一个很宅的胡同里。一次只能并排过两个人。两人比较礼貌，都要给对方让路。 结果一起要么让到左边，要么让到右边，结果仍然是谁也过不去从而引起的活锁。</p><h4><span id="线程的并发级别">线程的并发级别</span></h4><p>阻塞：参见上方阻塞的定义</p><p>无饥饿：对比上方的饥饿，如果设置所有线程的优先级相同，则任何想要获取资源的线程都要排队，那么所有的线程都有机会执行。</p><p>无阻塞：所有线程一起修改临界资源，修改完成后读取该资源是否被其他线程修改，如被其他线程修改则进行回滚，然后进行重试。</p><p>无锁：前面说的无阻塞是指所有的线程都能进入临界区，但如果发生了竞争，线程发现自己的数据每次去操作总是跟其它线程产生冲突，它就会不停地重试，如果在临界区当中有10个线程，线程1修改了部分数据，结果它被线程2干扰了，线程2又被线程3干扰，依此类推，最后线程1它又可能去干扰线程10，如果它们之间是彼此干扰的，最终会导致所有的线程都卡死在里面。而无锁在无阻塞的基础上加一个了约束，保证在竞争当中有一个线程是必然能够胜出的，这样就能保证在临界区的线程当中至少有一个是能顺利走出去的。当第一个线程走出去之后，就有第二个线程、第三个线程、等所有的线程都能走出去</p><p>无等待：无等待相比于无锁更进一步，它保证所有线程能进并且至少有一个线程能出来的同时还要求所有进入临界区的线程都能够在有限步当中完成其操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述Spring技术内幕</title>
      <link href="/2019/03/17/%E6%8F%AD%E7%A7%98Spring%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
      <url>/2019/03/17/%E6%8F%AD%E7%A7%98Spring%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信任何一个开发者都使用过Spring这个框架，或许你刚开始使用Spring、或许你有看过源码解析系列文章、或许你曾调试过源码、或许你。。。总之不管你的情况如何，你有想过自己实现一个Spring框架么？本篇文章就就来简单描述一下Spring中的IOC、MVC、AOP都是如何实现的</p></blockquote><h2><span id="ioc">IOC</span></h2><h4><span id="1-加载配置">1. 加载配置</span></h4><p>早期的Spring框架关于bean的定义都是配置在xml文件中的，就算是现在有了Service、Controller等注解、有了SpringBoot号称减少大部分配置，但是关于数据库的等相关信息也是存在于配置文件的。所以作为框架来说加载配置文件是必不可少的功能。</p><h4><span id="2-类加载器">2. 类加载器</span></h4><p>首先通过上一步我们获取到了xml中定义的bean，以及包扫描的路径，根据获取的这两种配置我们就需要把这些bean实例化出来。怎么去实例化呢，分为两个步骤：</p><ol><li>首先根据配置的包扫描路径获取这个包下面的所有类，然后判断类上是否存在Spring的相关注解，如果有的话就把这些类先保存到一个set集合中</li><li>将配置文件中定义的bean也添加的步骤一获取的set集合中，这样就得到了所有需要被Spring管理的类了。</li></ol><h4><span id="3-bean容器">3. Bean容器</span></h4><p>通过第二步我们已经知道了哪些类需要被Spring来管理，那么现在我们就可以通过反射来把set集合中的类实例化出来，实例化出来的这些类我们统一把它们放到一个全局的静态Map中。</p><h4><span id="4-依赖注入">4. 依赖注入</span></h4><p>我们知道使用IOC最直观的一个表现就是我们使用的对象不用自己new了，那么这个功能是如何实现的呢?</p><p>想想我们现在使用的自动注入，是不是自动注入的变量都会使用@Resource和@Autowired来标示呢。简单来说，在第三步所有的Bean都实例化以后，我们需要遍历所有Map中的实例，通过反射获取实例的所有属性，当有属性上方有刚才提到的两个注解时就去Map中寻找对应的实例来进行赋值。这样当把Map遍历完毕以后依赖注入的功能也就完成了。</p><h2><span id="aop">AOP</span></h2><p>写一个AOP框架需要一个前提，那就是你需要懂代理模式。<br>获取所有需要被拦截的方法或类，然后根据增强类型通过动态代理模式为这些方法或类生成代理对象，然后把代理对象放入到SpringIOC管理的Map中。</p><h2><span id="mvc">MVC</span></h2><h4><span id="1-mvcbean容器">1. MVCBean容器</span></h4><p>我们知道@Controller注解是标志着一个类是用于处理MVC请求的，这样的话我们就可以在实现IOC功能实例化类的时候把所有带有@Controller注解的类复制一份放在一个MVCBean容器当中。</p><h4><span id="2-建立请求映射关系">2. 建立请求映射关系</span></h4><p>仅仅只有一个MVCBean容器是不够的，还有一个@RequestMapping注解也是必须用到的，我们应该把所有带有@RequestMapping注解的方法的请求路径、请求方式、请求参数、实例名、方法名都记录下来。这样当一个请求过来以后根据请求路径、方式和参数定义到实例的方法，然后通过反射来调用这个方法。</p><h4><span id="3-返回值处理">3. 返回值处理</span></h4><p>我们知道有的方法返回的是一个view而有的方法返回的是json数据，这种情况就得根据方法是是否含有@ResponseBody注解来判断，如果没有此注解就在反射调用方法完毕后通知浏览器跳转到结果路径、如果包含此注解的话就需要序列化json数据写入HttpServletResponse从而输出到浏览器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈数据库事务</title>
      <link href="/2019/03/16/%E6%B5%85%E8%B0%88%E4%BA%8B%E5%8A%A1/"/>
      <url>/2019/03/16/%E6%B5%85%E8%B0%88%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h5><span id="事务的四大特性acid">事务的四大特性（ACID）</span></h5><h6><span id="原子性">原子性</span></h6><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败。<br>例小王要向小李转账200元。则账要么转账成功小王账户减200元，小李账户加200元，要么执行失败，两者账户都不动。</p><h6><span id="一致性">一致性</span></h6><p>一致性是指事务执行之前和执行之后都必须处于一致性状态。<br><br>假设转账前小王和小李的余额之和是2000元，那么不管他们之间进行了多少次转账，他们的余额之和肯定还是2000元。</p><h6><span id="隔离性">隔离性</span></h6><p>隔离性是当多个事务并发操作数据库时，不能被其他事务的操作所干扰<br><br>例小王银行卡只有200元了，他要向小李转账200元时银行方面进行银行卡的年费扣除则这两个操作必定不可能都成功。</p><h6><span id="持久性">持久性</span></h6><p>持久性是指一个事务一旦提交，那么对数据库中的数据的改变就是永久性的。<br><br>当小王和小李之间进行一次转账时，这笔转账记录便永久的保存在数据库里.</p><h4><span id="并发事务存在的问题">并发事务存在的问题</span></h4><blockquote><p>上方提到了数据库事务的隔离性，先看一下如果事务之间不进行隔离的话可能出现什么问题</p></blockquote><h6><span id="脏读">脏读</span></h6><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。同上方的例子：小王向小李转账200元，对应SQL命令如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update account <span class="builtin-name">set</span> <span class="attribute">balance</span>=balance+200 where <span class="attribute">name</span>=’小李’; </span><br><span class="line">update account <span class="builtin-name">set</span> <span class="attribute">balance</span>=balance-200 where <span class="attribute">name</span>=’小王’;</span><br></pre></td></tr></table></figure><p>当只执行第一条SQL时，小李查询余额发现确实钱已到账（此时即发生了脏读），而之后如果该事务不提交或者出现异常，则所有操作都将回滚，那么小李再次查看账户时就会发现钱其实并没有到账。</p><h6><span id="不可重复读">不可重复读</span></h6><p>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，这个时候就发生了不可重复读。</p><h6><span id="幻读">幻读</span></h6><p>例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。<br></p><p>幻读和不可重复读都是读取了另一条已经提交的事务，所不同的是不可重复读查询的是同一个数据项，而幻读针对的是一批数据。</p><h4><span id="事务的隔离级别">事务的隔离级别</span></h4><h6><span id="read-uncommitted-读未提交最低级别任何情况都无法保证">Read uncommitted (读未提交)最低级别，任何情况都无法保证。</span></h6><h6><span id="read-committed-读已提交可避免脏读的发生">Read committed (读已提交)：可避免脏读的发生。</span></h6><h6><span id="repeatable-read-可重复读可避免脏读-不可重复读的发生">Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</span></h6><h6><span id="serializable-串行化可避免脏读-不可重复读-幻读的发生">Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</span></h6><h6><span id="注意">注意</span></h6><p>上方隔离级别从低到高，隔离级别越高效率越低。<br>在MySQL数据库中，支持上面四种隔离级别，默认为Repeatable read<br>在Oracle数据库中，只支持Serializable和Read committed ，默认为Read committed级别</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学Java的那段日子</title>
      <link href="/2019/03/16/%E5%88%9D%E5%AD%A6Java%E7%9A%84%E9%82%A3%E6%AE%B5%E6%97%A5%E5%AD%90-1/"/>
      <url>/2019/03/16/%E5%88%9D%E5%AD%A6Java%E7%9A%84%E9%82%A3%E6%AE%B5%E6%97%A5%E5%AD%90-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近因为一个朋友想要学习Java，在帮助他找教程的过程中回想到了我自己当年学习Java的那段岁月，故写了此篇文章总结了一下初学Java所必须要掌握的知识点，然后把一部分常见的面试题罗列出来。给予刚刚开始学习Java的同学做一个参考。</p></blockquote><h3><span id="程序语言简史">程序语言简史</span></h3><p>最初由0,1组成的机器语言变成了简单指令的汇编语言，最后才是高级语言。而高级语言又分为面向过程语言与面向对象语言两种。而Java就是典型的面向对象语言。</p><h6><span id="question">question：</span></h6><p>你知道哪些高级语言？</p><p>他们分别是面向过程还是面向对象呢？</p><h3><span id="程序的工作原理">程序的工作原理</span></h3><p>因为计算机只认识机器语言，所以我们写出的代码想要被计算机执行必须有一个转换的过程。这个转换的过程分为两种：编译执行，解释执行。</p><h6><span id="question">question：</span></h6><p>你知道什么是编译执行和解释执行么？</p><p>你知道他们各自的好处么？</p><p>你知道Java是如何执行的么？</p><h3><span id="初识java">初识Java</span></h3><p>Java语言的发展历程、Java这个名字的来历、J2EE、J2SE、J2ME。还有最经典的一句话：Compile once and run everywhere</p><h6><span id="question">question：</span></h6><p>你知道J2EE、J2SE、J2ME分别适用于什么场景么？</p><p>为什么Java可以一次编译到处运行呢？</p><p>Java语言的特性都是有什么？</p><h3><span id="helloword">HelloWord</span></h3><p>JDK的下载和安装，环境变量的配置，HelloWord代码，javac、java命令，Java程序的基本结构</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloJava</span> &#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123; </span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">"Hello world!"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6><span id="question">question：</span></h6><p>你知道JDK每个文件夹的作用是什么吗？</p><p>jdk和jre的区别是什么？</p><p>public static void main(String[] args)每个关键字是什么意思？</p><h3><span id="数据类型">数据类型</span></h3><p>常量、变量、标识符、数据类型、保留字、溢出、命名规则、变量类型转换</p><h6><span id="question">question</span></h6><p>8大基本数据类型都有什么？</p><p>8大基本类型的数值范围是什么？</p><p>8大基本类型所占的内存空间分别是多少？</p><p>什么是强制类型转换和自动转换？</p><h3><span id="运算符">运算符</span></h3><p>算术运算符、逻辑运算符、关系运算符、递增递减运算符、三目运算符、运算符的顺序</p><h6><span id="question">question：</span></h6><p>多级运算符组合使用计算结果你会了么？</p><p>++i和i++的区别是什么？</p><h3><span id="条件判断">条件判断</span></h3><p>if、else if、else、switch、case、continue、break、label</p><h6><span id="question">question：</span></h6><p>continue和break的作用是什么？</p><p>if后面不加括号的话会如何？</p><p>switch都是支持什么数据类型？</p><h3><span id="循环">循环</span></h3><p>do-while、while、for、嵌套循环</p><h6><span id="question">question：</span></h6><p>do-while和while的区别是什么？</p><h3><span id="数组">数组</span></h3><p>一维数组、二维数组、数组下标、数组下标越界</p><h6><span id="question">question：</span></h6><p>数组的下标从什么开始的？</p><p>什么情况下会引起数组下标越界？</p><h3><span id="面向对象">面向对象</span></h3><p>类的概念、对象的概念、类的成员变量和方法、static关键字、创建使用清除对象、构造<br>方法、重载、方法调用参数和返回值、访问控制符、内部类</p><h6><span id="question">question：</span></h6><p>一个方法是void表示什么？</p><p>Java方法中参数传递是值传递还是引用传递？</p><p>static变量和方法是什么时候初始化的?</p><p>访问修饰符都是有哪些？</p><p>怎么样进行方法重载？</p><h3><span id="深入面向对象">深入面向对象</span></h3><p>继承、重写、抽象类、多态、this关键字、super关键字、对象的转型、接口</p><h6><span id="question">question：</span></h6><p>重载和重写的区别是什么？</p><p>抽象类和接口的区别是什么？</p><p>一个类可以继承多个类么?</p><p>子类会继承父类所有的成员变量和方法么？</p><p>面向对象的三大特征是什么？</p><h3><span id="异常">异常</span></h3><p>异常的层次结构、异常处理过程、Error和Exception、try-catch-finally、throw、throws</p><h6><span id="question">question：</span></h6><p>常见的异常都有什么？</p><p>异常流程中包含多个return时的程序处理流程</p><p>Error和Exception的区别是什么？</p><p>throw和throws的区别是什么？</p><h3><span id="流">流</span></h3><p>InputStream、OutputStream、FileInputStream、FileOutputStream、File、FileReader 、FileWriter</p><h6><span id="question">question：</span></h6><p>字节流和字符流的区别？</p><p>什么是序列化？</p><p>如何实现序列化？</p><h3><span id="多线程">多线程</span></h3><p>Thread、Runnable 、start、run、主线程、系统线程、用户线程、线程的生命、周期、优先级</p><h6><span id="question">question：</span></h6><p>字节流和字符流的区别？</p><p>什么是序列化？</p><p>如何实现序列化？</p><h3><span id="jdbc">jdbc</span></h3><p>mysql的安装、mysql基础命令、jdbc基本API</p><h6><span id="question">question：</span></h6><p>jdbc的操作步骤是什么？</p><p>相对于Statement，PreparedStatement的优点是什么？</p><blockquote><p>以上所有内容仅仅是学习Java的最最基础的知识，如果你是Java初学者，当你完成了以上内容的学习的时候请你保持自我继续坚持下去，因为后面还有很多知识在等待着你。例如：jsp、servlet、SSM框架、Linux基础等等。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无套路Java学习资源大全</title>
      <link href="/2019/03/12/%E6%97%A0%E5%A5%97%E8%B7%AFJava%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%A4%A7%E5%85%A8/"/>
      <url>/2019/03/12/%E6%97%A0%E5%A5%97%E8%B7%AFJava%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>声明：</p><pre><code>    所有资源在公众号《Java学习录》后台回复资源对应《》中的编码即可领取。</code></pre><p>视频资源</p><p>15G的hapood教程《0001》</p><p>20G腾讯课堂课程汇总《0002》</p><p>92天的python 全栈开发-项目实战《0003》</p><p>Angular Vue Easy UI ExtJS前端框架视频教程《0004》</p><p>dubbo系列教程《0005》</p><p>Java8新特性与设计模式《0006》</p><p>java初级进阶到架构师148讲视频教程《0007》</p><p>产品经理入门到精通《0078》</p><p>Java架构师系统学习进阶路线篇《0008》</p><p>MySql Oracle Redis Mycat MongoDB Memcached数据库《0009》</p><p>Linux Shell 操作系统入门到精通《0010》</p><p>JVM性能调优垃圾收集算法虚拟机组成《0011》</p><p>Js高级前端必看《0012》</p><p>Java项目20套《0013》</p><p>nginx系列最全视频教程《0014》</p><p>shiro权限管理框架《0015》</p><p>Socket IO Netty NIO Mina视频教程《0016》</p><p>Solr Elasticsearch lucene 搜索引擎教程《0017》</p><p>springboot-springcloud-docker-jenkins微服务教程《0019》</p><p>spring系列教程《0020》</p><p>Storm Executor Task QuartzJob流式框架定时任务处理框架《0021》</p><p>Sun资深Java架构师亲授Java企业架构师课程《0022》</p><p>Svn Git Maven等项目管理工具实战教学《0023》</p><p>webservice cdn 服务器系列教程《0024》</p><p>zookeeper视频教程《0025》</p><p>安卓开发基础《0026》</p><p>大型网站分布式架构高并发高可用可扩展技术《0027》</p><p>多线程高并发解决方案教程《0028》</p><p>分布式实战项目视频《0029》</p><p>分布式系统架构性能调优《0030》</p><p>各种MQ kafka thrift等中间件框架《0031》</p><p>看完这些保你成为大数据专家《0032》</p><p>马士兵Java基础视频《0033》</p><p>数据结构与算法视频教程《0034》</p><p>淘淘商城系统课程全套《0036》</p><p>微信开发微信公众平台微信小程序《0037》</p><p>文件存储服务FastDFS-mfs等《0038》</p><p>代码资源</p><p>B2C商城可运行源代码《0039》</p><p>Java工程师不得不看的几千份代码《0040》</p><p>仿苏宁商城的可运行的源码系统《0041》</p><p>进阶架构师必看的资料《0042》</p><p>做支付系统学习第三方支付不得不看的源码《0043》</p><p>面试资源</p><p>Java面试大汇总《0044》</p><p>Java面试题大汇总多到你想不到《0045》</p><p>Java面试题全集84集《0046》</p><p>面试资料大全《0047》</p><p>软考资源</p><p>系统架构师考前冲刺《0048》</p><p>系统架构师网络课堂《0049》</p><p>系统分析师视频教程《0050》</p><p>系统分析师网络课堂《0051》</p><p>系统集成项目管理工程师教程视频-王勇《0052》</p><p>系统集成项目管理工程师教程视频-左水林《0053》</p><p>系统分析师教程《0054》</p><p>最全的系统集成项目管理工程师教程《0055》</p><p>最全的系统架构师教程《0056》</p><p>书籍资源</p><p>JavaEEWeb技术相关书籍《0057》</p><p>Java并发编程必看书籍《0058》</p><p>Java核心技术相关书籍《0059》</p><p>Java虚拟机JVM优化《0060》</p><p>Spring核心技术相关书籍《0061》</p><p>程序员的成长路线《0062》</p><p>大型网站分布式系统调优架构实战《0063》</p><p>代码大全不得不学的代码《0064》</p><p>代码规范系列《0065》</p><p>代码重构的艺术《0066》</p><p>第三方支付银行接口资料《0067》</p><p>机器学习人工智能数据挖掘必看教程《0068》</p><p>加密解密核心技术《0069》</p><p>看完这些书你要是不成为算法大神算我输《0070》</p><p>设计模式书籍必看《0071》</p><p>数据库进阶告别单纯的crud《0072》</p><p>搜索引擎书籍资料《0073》</p><p>网络编程IO编程隐藏的内幕《0074》</p><p>微服务架构实战《0075》</p><p>想了解操作系统？不看这些书不可能《0076》</p><p>亿级流量网站核心架构《0077》</p><p><img src="/2019/03/12/无套路Java学习资源大全/0.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习进阶路线</title>
      <link href="/2019/03/12/Java%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E8%B7%AF%E7%BA%BF-1/"/>
      <url>/2019/03/12/Java%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E8%B7%AF%E7%BA%BF-1/</url>
      
        <content type="html"><![CDATA[<p>相信大部分的同学都碰到过在被面试官虐完以后都会下定决心好好学习，但是刚刚坚持几天后就被各种俗事打扰或者是不知道学什么而放弃。小编在这里整理了一份Java学习清单，打算在2019年把它全部学习完并通过博客记录下来，并把所有的文章同步给大家。同时欢迎有大神指出文章的错误之处、或者有同学愿意一块学习。（由于新开的公众号没有留言功能，欢迎大家加小编微信来撩！）</p><h2><span id="java基础">Java基础</span></h2><p>入门Java时我们都是学了什么？</p><h2><span id="java集合">Java集合</span></h2><p>ArrayList源码解析</p><p>Vector源码解析</p><p>CopyOnWriteArrayList源码解析</p><p>LinkedList源码解析</p><p>HashMap源码解析</p><p>ConcurrentHashMap源码解析</p><p>LinkedHashMap源码解析</p><p>TreeSet源码解析</p><p>HashSet源码解析</p><p>LinkedHashSet源码解析</p><h2><span id="java多线程">Java多线程</span></h2><p>线程的状态</p><p>线程的使用</p><p>Synchronized</p><p>多线程中的死锁、活锁、饥饿、无锁</p><p>线程池</p><p>线程通信</p><p>ThreadLocal</p><p>Lock</p><p>Java并发级别</p><p>Java内存模型</p><p>线程协作</p><p>Jdk并发包</p><p>锁优化</p><p>volatile 关键字</p><p>synchronized 关键字原理</p><p>多线程的三大核心</p><p>对锁的一些认知</p><p>ReentrantLock 实现原理</p><p>ConcurrentHashMap 的实现原理</p><p>如何优雅的使用和理解线程池</p><p>深入理解线程通信</p><p>乐观锁悲观锁</p><h2><span id="数据结构与算法">数据结构与算法</span></h2><p>基础排序算法</p><p>算法的时间复杂度以及空间复杂度</p><p>一致性 Hash 算法</p><p>LRU缓存算法</p><p>红黑树</p><p>分布式限流算法</p><h2><span id="数据库">数据库</span></h2><p>并发一致性</p><p>封锁</p><p>隔离级别</p><p>MySQL<br>常用命令</p><p>数据库元信息查询</p><p>explain命令</p><p>MySQL的存储引擎</p><p>MySQL的索引技术</p><p>BTree索引和哈希索引</p><p>MySQL的BinLog</p><p>MySQL的事务ACID</p><p>MySQL的锁</p><p>MySQL的事务隔离级别</p><p>分库分表</p><p>MySQL高可用</p><p>MySQL使用时的注意事项</p><p>CAP理论</p><p>索引优化</p><p>查询优化</p><h2><span id="缓存">缓存</span></h2><p>本地缓存GuavaCache</p><p>Redis<br>Redis基础命令</p><p>Redis数据类型、分别适应什么场景</p><p>Redis过期策略</p><p>降低Redis内存占用</p><p>如何使用Redis的Lua脚本</p><p>持久化</p><p>事务</p><p>分布式Redis环境搭建</p><p>缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级</p><p>缓存与数据库双写不一致</p><p>缓存并发</p><p>Redis线程模型</p><h2><span id="rpc框架">RPC框架</span></h2><p>RMI</p><p>Hessian</p><p>Thtift</p><p>Dubbo</p><p>RPC框架的序列化方式</p><p>消息中间件</p><p>中间件的常见优缺点及使用场景？</p><p>实现一个Java中间件所需的基础知识</p><p>本地消息队列<br>LinkedBlockingQueue</p><p>ConcurrentLinkedQueue</p><p>mq<br>基础概念</p><p>消息幂等保证</p><p>消息丢失处理</p><p>消息堆积处理</p><p>如何保证消息顺序性</p><p>消息延时以及过期失效问题</p><h2><span id="jvm">JVM</span></h2><p>Java运行时内存区</p><p>对象的创建与内存分配</p><p>GC算法</p><p>常用垃圾回收器</p><p>类加载机制</p><p>OOM 分析</p><p>性能监控工具</p><h2><span id="网络">网络</span></h2><p>常见网络IO模型</p><p>网络编程模型</p><p>网络协议</p><p>Https的基本概念</p><p>从游览器中输入URL到页面加载的发生了什么</p><h2><span id="linux">Linux</span></h2><p>Linux常用基础命令</p><p>Shell基础</p><h2><span id="性能调优">性能调优</span></h2><p>性能测试</p><p>前端性能调优要点</p><p>应用优化</p><p>Linux系统常用诊断工具（uptime、dmesg、vmstat、mpstat、free、sar、top）</p><p>JDK常用诊断工具</p><p>CPU分析、内存分析、IO分析</p><h2><span id="spring">Spring</span></h2><p>如何自己实现一个简单的Spring框架</p><p>动态代理（CGLib 与 JDK）</p><p>Spring 事务实现方式、事务的传播机制、默认的事务类别</p><p>Spring 事务底层原理</p><p>Spring事务失效</p><p>SpringBoot启动流程</p><p>Spring 框架中用到了哪些设计模式</p><p>使用Java类加载SpringBoot、SpringCloud配置文件</p><p>SpringBoot条件注解@Conditional</p><h2><span id="分布式">分布式</span></h2><p>Nginx基础</p><p>cap定理</p><p>为什么要进行分布式</p><p>无状态服务</p><p>分布式限流</p><p>分布式 ID 生成器</p><p>分布式锁</p><p>分布式事务</p><p>分布式会话</p><p>异地多活</p><p>幂等性</p><p>分布式文件系统</p><h2><span id="微服务">微服务</span></h2><p>持续交付<br>Jenkins基础使用</p><p>Docker常用命令总结</p><p>Kubernetes基础概念</p><p>Kubernetes（k8s）1.12.2集群搭建</p><p>Spring Cloud基础使用<br>使用SpringBoot2.0.3整合SpringCloud</p><p>服务注册与发现Eureka，自定义Eureka集群负载均衡策略，如何使用高可用的Eureka</p><p>Feign的使用及自定义配置</p><p>Hystrix使用</p><p>Hystrix仪表盘</p><p>路由器和过滤器-Zuul</p><p>使用Apollo做配置中心</p><p>SpringCloud-Stream整合RabbitMQ</p><p>SpringCloud监控</p><p>Zipkin全链路监控</p><p>Zipkin使用SpringCloud Stream以及Elasticsearch</p><p>SpringCloud最常用配置详解</p><p>Eureka和zookeeper</p><p>微服务设计<br>注册中心</p><p>服务限流</p><p>服务降级</p><p>网关</p><p>灰度发布</p><p>任务调度</p><p>调用链路收集</p><p>配置中心</p><p>日志收集</p><h2><span id="常用工具">常用工具</span></h2><p>ApacheCommons</p><p>Guava</p><p>正则表达式</p><p>Java定时任务解决方案</p><p>IDEA中使用Lombok</p><p>如何使用自定义注解</p><p>IDEA远程DeBug</p><p>IDEA常用快捷键</p><p>Java项目启动时执行指定方法的几种方式</p><p>QQ、新浪微博、码云和百度的第三方登录</p><p>如何将自己的jar包发布到mavan中央仓库</p><p>Java新版本特性</p><p>Optional</p><p>Lambda</p><p>Stream</p><p>函数式编程</p><p>17</p><h2><span id="设计模式">设计模式</span></h2><p>设计模式学习基础–UML</p><p>设计模式的的六大原则及其含义</p><p>享元模式</p><p>代理模式</p><p>原型模式</p><p>命令模式</p><p>备忘录模式</p><p>外观模式</p><p>单例模式</p><p>工厂模式</p><p>建造者模式</p><p>桥梁模式</p><p>合成模式</p><p>模板模式</p><p>状态模式</p><p>策略模式</p><p>装饰者模式</p><p>责任链模式</p><p>观察者模式</p><p>适配器模式</p><h2><span id="安全">安全</span></h2><p>常见加密算法</p><p>常见的web攻击手段</p><h2><span id="我的开源作品">我的开源作品</span></h2><p>不写代码就能完成一个模块的组件</p><p>大型网站限流算法的实现和改造</p><h6><span id="以上内容现已完成部分更新关注下方公众号获取文章">以上内容现已完成部分更新，关注下方公众号获取文章</span></h6><p><img src="/2019/03/12/Java学习进阶路线-1/0.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Kubernetes</title>
      <link href="/2018/12/13/ello-Kubernetes/"/>
      <url>/2018/12/13/ello-Kubernetes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在<a href="http://shiyujun.cn/2018/12/13/Kubernetes%EF%BC%88k8s%EF%BC%891-12-2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">上一篇文章</a>中我们已经搭建起来了一个k8s集群，在本文中我们主要学习一下k8s中的一些基本概念、术语和常用的配置文件的定义。</p></blockquote><p>在k8s中最常见的就是yaml文件了，通过一个简单的yaml文件我们就可以完成80%的功能，现在我们来编写一个简单的yaml文件nginx.yaml来启动一个nginx服务：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">apiVersion</span>: v1</span><br><span class="line"><span class="attribute">kind</span>: Pod</span><br><span class="line"><span class="attribute">metadata</span>:</span><br><span class="line">  <span class="attribute">name</span>: nginx</span><br><span class="line"><span class="attribute">spec</span>:</span><br><span class="line"> <span class="attribute">containers</span>:</span><br><span class="line"> - <span class="attribute">name</span>: nginx</span><br><span class="line">  <span class="attribute">image</span>: <span class="attribute">nginx</span>:<span class="number">1.9</span>.<span class="number">6</span></span><br><span class="line">  <span class="attribute">ports</span>:</span><br><span class="line">  - <span class="attribute">containerPort</span>: <span class="number">80</span></span><br></pre></td></tr></table></figure><p>当我们使用如下命令以后k8s就会帮我们启动一个nginx服务</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubectl</span> <span class="selector-tag">create</span> <span class="selector-tag">-f</span> <span class="selector-tag">nginx</span><span class="selector-class">.yaml</span> </span><br><span class="line"><span class="selector-tag">kubectl</span> <span class="selector-tag">apply</span> <span class="selector-tag">-f</span> <span class="selector-tag">nginx</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><p>你可以使用如下命令来进行验证微服务是否已经启动成功</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pod</span><br></pre></td></tr></table></figure><p>如果你想停止这两个微服务可以使用如下命令：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> -f nginx.yaml</span><br></pre></td></tr></table></figure><p>相信看到这里你对上方的nginx.yaml一定会充满好奇，下面就让我们来逐步解开k8s的面纱吧。</p><h4><span id="1-master">1. Master</span></h4><p>每个k8s集群都最少需要一个Master节点来负责整个集群的管理和控制，它就是我们在上一篇文章中提到的主节点。Master主要包括以下进程：<br>1. kube-apiserver：k8s中所有资源增删改查等操作的唯一入口，也是集群控制的入口进程<br>2. kube-controller-manager：k8s中所有资源对象的自动化控制中心<br>3. kube-scheduler：负责资源调度的进程<br>4. etcd：k8s中所有的资源对象的数据都是保存在etcd中的</p><h4><span id="2-node">2. Node</span></h4><p>除了Master在k8s集群中所有的机器都可以被称为Node节点，也就是上篇文章中的子节点。Node节点是集群中的工作负载节点，我们所有的微服务都是由Master负责调度到Node节点上进行执行的。Node节点主要包括以下进程：<br>1. kubelet：负责pod（下面会讲）对应的容器的创建、启动、停止等任务。<br>2. kube-proxy：负责k8s的通信与负载均衡机制的组件<br>3. Docker Engine：Daocker引擎，负责本机的容器创建和管理工作<br>在k8s中，我们可以使用如下命令来查看集群中的node节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure><p>通过如下命令查看某个node的详细信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe <span class="keyword">node</span> <span class="title">node1</span></span><br></pre></td></tr></table></figure><h4><span id="3-pod">3. Pod</span></h4><p>Pod是k8s中最基本也是最重要的概念，一个Pod主要包含两个组件：<br>1. 业务容器：一个pod中可以包含一个或多个业务容器<br>2.Pause：Pause是属于k8s平台的一部分，在Pod中单独设计一个Pause是为了两个方面的考虑。一是以Pause的状态来代表整个pod的状态，以起到监控应用的状态，二是为了当一个pod中包含多个容器时让这些容器共享Pause的Ip和挂载的Volume。<br>我们再来回顾一下文章开头的一个yaml文件中的各个属性的含义，不过相比文章开头的yaml此文件的属性要相对全一些。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1       <span class="meta">#版本号</span></span><br><span class="line"><span class="symbol">kind:</span> Pod       <span class="meta">#类型</span></span><br><span class="line"><span class="symbol">metadata:</span>       <span class="meta">#元数据</span></span><br><span class="line"><span class="symbol">  name:</span> nginx       <span class="meta">#Pod名称</span></span><br><span class="line"><span class="symbol">spec:</span>         <span class="meta">#Pod中容器的详细定义</span></span><br><span class="line"><span class="symbol">  containers:</span>      <span class="meta">#Pod中容器列表</span></span><br><span class="line">  - name: nginx     <span class="meta">#必选，容器名称</span></span><br><span class="line"><span class="symbol">    image:</span> nginx:<span class="number">1.9</span><span class="number">.6</span>    <span class="meta">#容器的镜像地址</span></span><br><span class="line"><span class="symbol">    imagePullPolicy:</span> [Always | Never | IfNotPresent] <span class="meta">#获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像</span></span><br><span class="line"><span class="symbol">    command:</span> [string]    <span class="meta">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span></span><br><span class="line"><span class="symbol">    args:</span> [string]     <span class="meta">#容器的启动命令参数列表</span></span><br><span class="line"><span class="symbol">    workingDir:</span> string     <span class="meta">#容器的工作目录</span></span><br><span class="line"><span class="symbol">    volumeMounts:</span>    <span class="meta">#挂载到容器内部的存储卷配置</span></span><br><span class="line">    - name: string     <span class="meta">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span></span><br><span class="line"><span class="symbol">      mountPath:</span> string    <span class="meta">#存储卷在容器内mount的绝对路径，应少于512字符</span></span><br><span class="line"><span class="symbol">      readOnly:</span> boolean    <span class="meta">#是否为只读模式</span></span><br><span class="line"><span class="symbol">    ports:</span>       <span class="meta">#需要暴露的端口库号列表</span></span><br><span class="line">    - name: nginx    <span class="meta">#端口号名称</span></span><br><span class="line"><span class="symbol">      containerPort:</span> <span class="number">80</span>   <span class="meta">#容器需要监听的端口号</span></span><br><span class="line"><span class="symbol">      hostPort:</span> <span class="number">8080</span>    <span class="meta">#容器所在主机需要监听的端口号类似于docker run -p 8080:80</span></span><br><span class="line"><span class="symbol">    env:</span>       <span class="meta">#容器运行前设置的环境变量列表</span></span><br><span class="line">    - name: string     <span class="meta">#环境变量名称</span></span><br><span class="line"><span class="symbol">      value:</span> string    <span class="meta">#环境变量的值</span></span><br><span class="line"><span class="symbol">    resources:</span>       <span class="meta">#资源限制和请求的设置</span></span><br><span class="line"><span class="symbol">      limits:</span>      <span class="meta">#资源限制的设置</span></span><br><span class="line"><span class="symbol">        cpu:</span> string    <span class="meta">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span></span><br><span class="line"><span class="symbol">        memory:</span> string     <span class="meta">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span></span><br><span class="line"><span class="symbol">      requests:</span>      <span class="meta">#资源请求的设置</span></span><br><span class="line"><span class="symbol">        cpu:</span> string    <span class="meta">#Cpu请求，容器启动的初始可用数量</span></span><br><span class="line"><span class="symbol">        memory:</span> string     <span class="meta">#内存清楚，容器启动的初始可用数量</span></span><br><span class="line"><span class="symbol">    restartPolicy:</span> [Always | Never | OnFailure]<span class="meta">#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod</span></span><br><span class="line"><span class="symbol">    imagePullSecrets:</span>    <span class="meta">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span></span><br><span class="line">    - name: string</span><br><span class="line"><span class="symbol">    hostNetwork:</span>false      <span class="meta">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span></span><br><span class="line"><span class="symbol">    volumes:</span>       <span class="meta">#在该pod上定义共享存储卷列表</span></span><br><span class="line">    - name: string     <span class="meta">#共享存储卷名称 （volumes类型有很多种）</span></span><br><span class="line"><span class="symbol">      emptyDir:</span> &#123;&#125;     <span class="meta">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span></span><br><span class="line"><span class="symbol">      hostPath:</span> string     <span class="meta">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span></span><br><span class="line"><span class="symbol">        path:</span> string     <span class="meta">#Pod所在宿主机的目录，将被用于同期中mount的目录</span></span><br><span class="line"><span class="symbol">      secret:</span>      <span class="meta">#类型为secret的存储卷，挂载集群与定义的secre对象到容器内部</span></span><br><span class="line"><span class="symbol">        scretname:</span> string  </span><br><span class="line"><span class="symbol">        items:</span>     </span><br><span class="line">        - key: string</span><br><span class="line"><span class="symbol">          path:</span> string</span><br><span class="line"><span class="symbol">      configMap:</span>     <span class="meta">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span></span><br><span class="line"><span class="symbol">        name:</span> string</span><br><span class="line"><span class="symbol">        items:</span></span><br><span class="line">        - key: string</span><br><span class="line"><span class="symbol">          path:</span> string</span><br></pre></td></tr></table></figure><h4><span id="4-label">4. Label</span></h4><p>Label可以附加到k8s中的各种资源对象中，比如我们上方提到的Node、Pod以及接下来要学习的Service、RC、Deployment。我们可以给指定的资源对象绑定一个或多个label来实现多维度的资源分组管理功能。</p><p>Label的中文名称叫做标签，当一个应用被打上标签以后我们就可以通过Label Selector（标签选择器）去查询和筛选某些资源对象。听起来是不是和js的标签选择器差不多呢，其实就是差不多。Label Selector支持一下场景的表达式匹配方式<br>1. name = nginx<br>2. name != nginx<br>3. name in (nginx,mysql)<br>4. name not in (tomcat)<br>5. name = nginx ,env != test</p><p>如果我们要给我们的nginx服务加上一个Label的话，就应该这样操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>   <span class="comment">#</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span>      <span class="comment">#标签</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">nginx</span>     <span class="comment">#标签名字</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr"> containers:</span></span><br><span class="line"><span class="attr"> - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">nginx:1.9.6</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4><span id="5-replication-controllerrc">5. Replication Controller(RC)</span></h4><p>RC是负责声明某中Pod的副本数量在任意时刻都符合某个预期值，RC的定义主要包括以下几个部分：<br>1. Pod期待的副本数<br>2. 用于筛选目标Pod的Label Selector<br>3. 到Pod数量小于目标Pod的时候用于创建新Pod的pod模板<br>使用RC最大的功能：</p><ol><li>通过改变Pod的数量实现动态扩容</li><li>Pod模板中的镜像版本实现滚动升级<br>一个标准的RC应该是这样的：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>   </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span>  <span class="comment">#副本数</span></span><br><span class="line"><span class="attr">  selector:</span>   <span class="comment">#标签选择器（LabelSelector）</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span>  <span class="comment">#模板</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">nginx:1.9.6</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4><span id="6-deployment">6. Deployment</span></h4><p>Deployment其实是相对于RC的一个升级，它相比于RC增加的功能就是让我们可以随时知道当前Pod的部署进度，配置文件上不同的就是版本号和类型了</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> nginx</span><br><span class="line">  ·······</span><br></pre></td></tr></table></figure><p>在Pod部署的时候我们可以通过执行以下命令来观察当前Pod的部署进度</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> deployments</span><br></pre></td></tr></table></figure><h4><span id="7-hpa">7. HPA</span></h4><p>我们学习了RC以后知道了程序可以按照我们的逾期进行扩容，但是如果某一天突然流量超出我们的逾期了，这个情况k8s也为我们提供了解决方案，那就是HPA。</p><p>HPA可以通过追踪分析RC控制的所有Pod的的负载变化情况来确定是否进行针对性的调整。HPA主要有两种方式作为Pod负载的度量指标：<br>1. CPUUtilizationPercentage：目标Pod所有副本自身的CPU利用率的平均值<br>2. 应用程序自定义的度量指标。比如TPS或QPS<br>一个典型的HPA文件是这样的：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> autoscaling/v1</span><br><span class="line"><span class="symbol">kind:</span> HorizontalPodAutoscaler</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> nginx</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  scaleTargetRef:</span></span><br><span class="line"><span class="symbol">    kind:</span> Deployment</span><br><span class="line"><span class="symbol">    name:</span> nginx</span><br><span class="line"><span class="symbol">  minReplicas:</span> <span class="number">1</span>    <span class="meta">#最小容量</span></span><br><span class="line"><span class="symbol">  maxReplicas:</span> <span class="number">10</span>   <span class="meta">#最大扩容</span></span><br><span class="line"><span class="symbol">  targetCPUUtilizationPercentage:</span> <span class="number">30</span>  <span class="meta">#cpu利用率%</span></span><br></pre></td></tr></table></figure><h4><span id="8-service">8. Service</span></h4><p>因为Pod的地址信息会随着Pod的创建或销毁以及Master的调度而改变，当我们的服务想要对外提供服务时那么就势必需要一个固定对外暴露的端口，这个时候就到了Service出场的时候了。</p><p>首先Service会对外暴露一个固定不变的端口来接受请求，接受到请求以后能，它会通过Label Selector选择请求对应的Pod将请求转发过去。</p><p>一个service的定义如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">ClientIP</span> <span class="comment">#使用本机ip</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span> <span class="comment">#选择所有lable为nginx的pod</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">31080</span> <span class="comment">#对外暴露端口</span></span><br></pre></td></tr></table></figure><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes（k8s）1.12.2集群搭建</title>
      <link href="/2018/12/13/Kubernetes%EF%BC%88k8s%EF%BC%891-12-2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/12/13/Kubernetes%EF%BC%88k8s%EF%BC%891-12-2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本博客搭建k8s集群1.12.2版本</p></blockquote><h4><span id="1-准备2台以上最低2核4g的服务器">1. 准备2台以上最低2核4G的服务器</span></h4><h4><span id="2-关闭机器的防火墙">2. 关闭机器的防火墙</span></h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br></pre></td></tr></table></figure><p>生产环境下建议不要关闭防火墙，只开放k8s所用的端口</p><h4><span id="3-配置docker和k8s仓库为阿里云镜像仓库">3. 配置docker和k8s仓库为阿里云镜像仓库</span></h4><p>首先选择一台性能比较好的机器作为主节点</p><ol><li></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/docker-ce<span class="selector-class">.repo</span> https:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><ol start="2"><li>vim /etc/yum.repos.d/kubernetes.repo</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[kubernetes]</span></span><br><span class="line"><span class="attr">name</span>=kubernetes Repo</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x<span class="number">86_64</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">https:</span><span class="comment">//mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line">rpm --<span class="keyword">import</span> rpm-<span class="keyword">package</span>-key.gpg</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure><h4><span id="4-安装docker和kubelet">4. 安装docker和kubelet</span></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">kubeadm-1</span><span class="selector-class">.12</span><span class="selector-class">.2-0</span><span class="selector-class">.x86_64</span> <span class="selector-tag">docker-ce-18</span><span class="selector-class">.06</span><span class="selector-class">.0</span><span class="selector-class">.ce</span> <span class="selector-tag">kubelet-1</span><span class="selector-class">.12</span><span class="selector-class">.2-0</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p>这里指定了docker和kubelet的版本，如果不指定的话默认下载最新的版本，如果你的服务器可以上Google的话可以选择执行以下命令下载最新版</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> kubeadm docker-ce kubelet</span><br></pre></td></tr></table></figure><h4><span id="5-下载k8s镜像">5. 下载k8s镜像</span></h4><p>这里分为两种场景</p><h5><span id="能上google的同学看这个">能上Google的同学看这个</span></h5><ol><li>vim /usr/lib/systemd/system/docker.service  增加如下配置</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Environment</span>=<span class="string">"HTTPS_PROXY=http://www.ik8s.io:10080"</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">"NO_PROXY=127.0.0.0/8,172.0.0.0/16"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>加载配置文件</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置docker开机启动并启动docker</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h5><span id="不能的同学看这个">不能的同学看这个</span></h5><ol><li>设置docker开机启动并启动docker</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ol start="2"><li>下载k8s镜像</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/<span class="keyword">pause</span>:<span class="number">3.1</span></span><br><span class="line">docker pull mirrorgooglecontainers/etcd-amd64:<span class="number">3.2</span><span class="meta">.24</span></span><br><span class="line">docker pull coredns/coredns:<span class="number">1.2</span><span class="meta">.2</span></span><br></pre></td></tr></table></figure><ol start="3"><li>镜像tag更新</li></ol><p>因为来自mirrorgooglecontainers或者coredns的镜像k8s是不认识的，所以我们需要修改一下上方下载的镜像的tag</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker tag mirrorgooglecontainers/kube-apiserver-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> k8s.gcr.io/kube-apiserver-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> </span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/kube-controller-manager-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> k8s.gcr.io/kube-controller-manager-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/kube-scheduler-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> k8s.gcr.io/kube-scheduler-amd64:v1<span class="meta">.12</span><span class="meta">.2</span></span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> k8s.gcr.io/kube-proxy-amd64:v1<span class="meta">.12</span><span class="meta">.2</span> </span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/<span class="keyword">pause</span>:<span class="number">3.1</span> k8s.gcr.io/<span class="keyword">pause</span>:<span class="number">3.1</span></span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/etcd-amd64:<span class="number">3.2</span><span class="meta">.24</span> k8s.gcr.io/etcd-amd64:<span class="number">3.2</span><span class="meta">.24</span></span><br><span class="line"></span><br><span class="line">docker tag coredns/coredns:<span class="number">1.2</span><span class="meta">.2</span> k8s.gcr.io/coredns:<span class="number">1.2</span><span class="meta">.2</span></span><br></pre></td></tr></table></figure><h4><span id="6-验证网络及k8s依赖">6. 验证网络及k8s依赖</span></h4><ol><li>验证网络</li></ol><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/<span class="built_in">net</span>/bridge/bridge-nf-<span class="keyword">call</span>-ip6tables</span><br><span class="line">cat /proc/sys/<span class="built_in">net</span>/bridge/bridge-nf-<span class="keyword">call</span>-iptables</span><br></pre></td></tr></table></figure><p>查看两条命令是否返回的都是1</p><ol start="2"><li>验证k8s依赖</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpm -ql kubelet</span></span><br></pre></td></tr></table></figure><p>执行以上命令看屏幕结果是否如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/etc/</span>kubernetes/manifests   <span class="meta">#清单目录</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>sysconfig/kubelet   <span class="meta">#配置文件</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>systemd<span class="meta-keyword">/system/</span>kubelet.service  </span><br><span class="line"><span class="meta-keyword">/usr/</span>bin/kubelet   <span class="meta">#主程序</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置k8s开启启动</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> kubelet</span><br></pre></td></tr></table></figure><h4><span id="7-初始化k8s">7. 初始化k8s</span></h4><h6><span id="1-系统检查">1. 系统检查</span></h6><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1<span class="number">.12</span><span class="number">.2</span> --pod-network-cidr=<span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> --service-cidr=<span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">12</span></span><br></pre></td></tr></table></figure><p>注意如果使用最新版本的话不需要使用–kubernetes-version参数</p><p>命令执行后k8s会进行一系列的检查，比如说：</p><ul><li>Linux 内核的版本必须是否是 3.10 以上？</li><li>Linux Cgroups 模块是否可用？</li><li>机器的 hostname 是否标准？在 Kubernetes 项目里，机器的名字以及一切存储在 Etcd 中的 API 对象，都必须使用标准的 DNS 命名（RFC 1123）。</li><li>用户安装的 kubeadm 和 kubelet 的版本是否匹配？</li><li>机器上是不是已经安装了 Kubernetes 的二进制文件？</li><li>Kubernetes 的工作端口 10250/10251/10252 端口是不是已经被占用？</li><li>ip、mount 等 Linux 指令是否存在？</li><li>Docker 是否已经安装？</li><li>……</li></ul>检查结束以后如果没问题的话名字执行结束最后会有这样的一条指令出现<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 172<span class="selector-class">.26</span><span class="selector-class">.15</span><span class="selector-class">.165</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">ns4kps</span><span class="selector-class">.j8cuqwf78emp5a5b</span> <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:b71b7e52c318959bab3f05f02f6fe51d6396d8c54ea6849ec7556927d1c6c88a</span></span><br></pre></td></tr></table></figure><p>这个就是node节点需要加入主节点时所需要的token，很重要，记下来，一会会用到</p><h6><span id="2-系统检查">2. 系统检查</span></h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> <span class="variable">$HOME</span>/.kube</span><br><span class="line">cp -<span class="selector-tag">i</span> /etc/kubernetes/admin<span class="selector-class">.conf</span> <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span>  nodes</span><br></pre></td></tr></table></figure><p>查看节点status是否为NotReady</p><h6><span id="3-安装flannel">3. 安装flannel</span></h6><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> kubectl apply -f <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/coreos</span><span class="regexp">/flannel/master</span><span class="regexp">/Documentation/kube</span>-flannel.yml</span><br><span class="line">curl -sSL <span class="string">"https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml?raw=true"</span> | kubectl create -f -</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span>  nodes</span><br></pre></td></tr></table></figure><p>查看节点status是否为Ready</p><p>至此master节点的配置已经完成了。</p><h4><span id="8-配置节点服务器">8. 配置节点服务器</span></h4><ol><li>拷贝master中的一些配置到节点服务器</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/CentOS-Base<span class="selector-class">.repo</span> docker-ce<span class="selector-class">.repo</span> kubernetes<span class="selector-class">.repo</span> 服务器ip:/etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/</span><br><span class="line">scp /etc/sysconfig/kubelet 服务器ip:/etc/sysconfig/</span><br></pre></td></tr></table></figure><ol start="2"><li>配置镜像</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">https:</span><span class="comment">//mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line">rpm --<span class="keyword">import</span> rpm-<span class="keyword">package</span>-key.gpg</span><br></pre></td></tr></table></figure><ol start="3"><li>安装docker<br>同上方第四步</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">kubeadm-1</span><span class="selector-class">.12</span><span class="selector-class">.2-0</span><span class="selector-class">.x86_64</span> <span class="selector-tag">docker-ce-18</span><span class="selector-class">.06</span><span class="selector-class">.0</span><span class="selector-class">.ce</span> <span class="selector-tag">kubelet-1</span><span class="selector-class">.12</span><span class="selector-class">.2-0</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动docker和kubelet并设置开启启动</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="builtin-name">enable</span> docker kubelet</span><br></pre></td></tr></table></figure><ol start="5"><li>加入集群管理<br>使用上方安装master结束后记住的命令加入到集群中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 172<span class="selector-class">.26</span><span class="selector-class">.15</span><span class="selector-class">.165</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">ns4kps</span><span class="selector-class">.j8cuqwf78emp5a5b</span> <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:b71b7e52c318959bab3f05f02f6fe51d6396d8c54ea6849ec7556927d1c6c88a</span></span><br></pre></td></tr></table></figure><ol start="6"><li>验证<br>切换到master节点，再次使用以下命令查看节点数量是不是增加了一个呢</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span>  nodes</span><br></pre></td></tr></table></figure><p>至此k8s集群就搭建完成了。</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（十四）：Zipkin使用SpringCloud Stream以及Elasticsearch</title>
      <link href="/2018/12/07/%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9AZipkin%E4%BD%BF%E7%94%A8SpringCloud-Stream%E4%BB%A5%E5%8F%8AElasticsearch/"/>
      <url>/2018/12/07/%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9AZipkin%E4%BD%BF%E7%94%A8SpringCloud-Stream%E4%BB%A5%E5%8F%8AElasticsearch/</url>
      
        <content type="html"><![CDATA[<p>在前面的文章中，我们已经成功的使用Zipkin收集了项目的调用链日志。但是呢，由于我们收集链路信息时采用的是http请求方式收集的，而且链路信息没有进行保存，ZipkinServer一旦重启后就会所有信息都会消失了。基于性能的考虑，我们可以对它进行改造，使用SpringCloud Stream进行消息传递，使用Elasticsearch进行消息的存储。</p><h4><span id="参考文章">参考文章</span></h4><p><br><a href="http://shiyujun.cn/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/">Zipkin全链路监控 </a><br><br><a href="http://shiyujun.cn/2018/12/07/每天学点SpringCloud（十三）：SpringCloud-Stream整合RabbitMQ/">SpringCloud-Stream整合RabbitMQ </a></p><h4><span id="改造zipkinserver">改造ZipkinServer</span></h4><h5><span id="1-增加依赖">1. 增加依赖</span></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-collector-rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-storage-elasticsearch-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5><span id="2-配置文件">2. 配置文件</span></h5><p>增加rabbit和es的相关配置</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">zipkin</span>:</span><br><span class="line">  <span class="attribute">collector</span>:</span><br><span class="line">    <span class="attribute">rabbitmq</span>:</span><br><span class="line">      <span class="attribute">addresses</span>: <span class="number">10.0</span>.<span class="number">20.132</span></span><br><span class="line">      <span class="attribute">port</span>: <span class="number">5672</span></span><br><span class="line">      <span class="attribute">username</span>: root</span><br><span class="line">      <span class="attribute">password</span>: root</span><br><span class="line">      <span class="attribute">virtual-host</span>: /unicode-pay</span><br><span class="line">      <span class="attribute">queue</span>: zipkin</span><br><span class="line">  <span class="attribute">storage</span>:</span><br><span class="line">    <span class="attribute">StorageComponent</span>: elasticsearch</span><br><span class="line">    <span class="attribute">type</span>: elasticsearch</span><br><span class="line">    <span class="attribute">elasticsearch</span>:</span><br><span class="line">      <span class="attribute">hosts</span>: <span class="number">10.0</span>.<span class="number">20.25</span>:<span class="number">9200</span></span><br><span class="line">      <span class="attribute">cluster</span>: elasticsearch</span><br><span class="line">      <span class="attribute">index</span>: zipkin</span><br><span class="line">      <span class="attribute">index-shards</span>: <span class="number">5</span></span><br><span class="line">      <span class="attribute">index-replicas</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>至此ZipkinServer的配置就搞定了。</p><h5><span id="3-客户端增加依赖">3. 客户端增加依赖</span></h5><p>以下两个依赖任选其一就可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5><span id="4-客户端增加mq的相关配置">4. 客户端增加mq的相关配置</span></h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  sleuth:</span></span><br><span class="line"><span class="symbol">    sampler:</span></span><br><span class="line"><span class="symbol">      probability:</span> <span class="number">1.0</span></span><br><span class="line"><span class="symbol">  rabbitmq:</span></span><br><span class="line"><span class="symbol">    addresses:</span> <span class="number">10.0</span><span class="number">.20</span><span class="number">.132</span></span><br><span class="line"><span class="symbol">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="symbol">    username:</span> root</span><br><span class="line"><span class="symbol">    password:</span> root</span><br><span class="line"><span class="symbol">  zipkin:</span></span><br><span class="line"><span class="symbol">    rabbitmq:</span></span><br><span class="line"><span class="symbol">      queue:</span> zipkin</span><br></pre></td></tr></table></figure><p>注意要把以下配置去掉哦</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">zipkin</span>:</span><br><span class="line">    <span class="attribute">base-url</span>: <span class="attribute">http</span>:<span class="comment">//localhost:19411</span></span><br><span class="line">    <span class="attribute">sender</span>:</span><br><span class="line">      <span class="attribute">type</span>: web</span><br></pre></td></tr></table></figure><p>现在环境已经搭建完毕了，根据你的采样频率看一看结果如何吧</p><p>GitHub地址：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a>。代码所在模块：cloud-demo-zipkin-server,cloud-demo-consumer-feign-hystrix,cloud-demo-provider</p><p>如果对您有所帮助，请记得帮忙点一个star哦</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（十三）：SpringCloud-Stream整合RabbitMQ</title>
      <link href="/2018/12/07/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9ASpringCloud-Stream%E6%95%B4%E5%90%88RabbitMQ/"/>
      <url>/2018/12/07/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9ASpringCloud-Stream%E6%95%B4%E5%90%88RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p>我们知道，当微服务越来越来多的时候，仅仅是feign的http调用方式已经满足不了我们的使用场景了。这个时候系统就需要接入消息中间件了。相比较于传统的Spring项目、SpringBoot项目使用消息中间件的很多配置不同，SpringCloud Stream抽象了中间件产品的不同，在SpringCloud中你仅仅需要修改几行配置文件就可以灵活的切换中间件产品而不需要修改任何代码。</p><p>现在我们以SpringCloud Stream整合RabbitMQ为例来学习一下</p><h2><span id="创建生产者">创建生产者</span></h2><h4><span id="1-引入依赖">1. 引入依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="2-定义配置文件">2. 定义配置文件</span></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">cloud</span>:</span><br><span class="line">    <span class="attribute">stream</span>:</span><br><span class="line">      <span class="attribute">binders</span>:</span><br><span class="line">        <span class="attribute">test</span>:</span><br><span class="line">          <span class="attribute">type</span>: rabbit</span><br><span class="line">          <span class="attribute">environment</span>:</span><br><span class="line">            <span class="attribute">spring</span>:</span><br><span class="line">              <span class="attribute">rabbitmq</span>:</span><br><span class="line">                <span class="attribute">addresses</span>: <span class="number">10.0</span>.<span class="number">20.132</span></span><br><span class="line">                <span class="attribute">port</span>: <span class="number">5672</span></span><br><span class="line">                <span class="attribute">username</span>: root</span><br><span class="line">                <span class="attribute">password</span>: root</span><br><span class="line">                <span class="attribute">virtual-host</span>: /unicode-pay</span><br><span class="line">      <span class="attribute">bindings</span>:</span><br><span class="line">        <span class="attribute">testOutPut</span>:</span><br><span class="line">          <span class="attribute">destination</span>: testRabbit</span><br><span class="line">          <span class="attribute">content-type</span>: application/json</span><br><span class="line">          <span class="attribute">default-binder</span>: test</span><br></pre></td></tr></table></figure><p>现在来解释一下这些配置的含义</p><ol><li>binders： 这是一组binder的集合，这里配置了一个名为test的binder，这个binder中是包含了一个rabbit的连接信息</li><li>bindings：这是一组binding的集合，这里配置了一个名为testOutPut的binding，这个binding中配置了指向名test的binder下的一个交换机testRabbit。</li><li>扩展： 如果我们项目中不仅集成了rabbit还集成了kafka那么就可以新增一个类型为kafka的binder、如果项目中会使用多个交换机那么就使用多个binding，</li></ol><h4><span id="3创建通道">3.创建通道</span></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span> MqMessageSource &#123;</span><br><span class="line"></span><br><span class="line">    String TEST_OUT_PUT = <span class="string">"testOutPut"</span>;</span><br><span class="line"></span><br><span class="line">    @Output(TEST_OUT_PUT)</span><br><span class="line">    MessageChannel testOutPut();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个通道的名字就是上方binding的名字</p><h4><span id="4-发送消息">4. 发送消息</span></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableBinding</span>(MqMessageSource.class)</span><br><span class="line">public class MqMessageProducer &#123;</span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    <span class="variable">@Output</span>(MqMessageSource.TEST_OUT_PUT)</span><br><span class="line">    private MessageChannel channel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">sendMsg</span>(String msg) &#123;</span><br><span class="line">        <span class="selector-tag">channel</span><span class="selector-class">.send</span>(MessageBuilder.withPayload(msg).build());</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.err</span><span class="selector-class">.println</span>(<span class="string">"消息发送成功："</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是使用上方的通道来发送到指定的交换机了。需要注意的是withPayload方法你可以传入任何类型的对象，但是需要实现序列化接口</p><h4><span id="5-创建测试接口">5. 创建测试接口</span></h4><p>EnableBinding注解绑定的类默认是被Spring管理的，我们可以在controller中注入它</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MqMessageProducer mqMessageProducer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = <span class="meta-string">"/testMq"</span>)</span></span><br><span class="line"><span class="keyword">public</span> String testMq(<span class="meta">@RequestParam(<span class="meta-string">"msg"</span>)</span>String msg)&#123;</span><br><span class="line">    mqMessageProducer.sendMsg(msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"发送成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者的代码到此已经完成了。</p><h2><span id="创建消费者">创建消费者</span></h2><h4><span id="1-引入依赖">1. 引入依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="2-定义配置文件">2. 定义配置文件</span></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">cloud</span>:</span><br><span class="line">    <span class="attribute">stream</span>:</span><br><span class="line">      <span class="attribute">binders</span>:</span><br><span class="line">        <span class="attribute">test</span>:</span><br><span class="line">          <span class="attribute">type</span>: rabbit</span><br><span class="line">          <span class="attribute">environment</span>:</span><br><span class="line">            <span class="attribute">spring</span>:</span><br><span class="line">              <span class="attribute">rabbitmq</span>:</span><br><span class="line">                <span class="attribute">addresses</span>: <span class="number">10.0</span>.<span class="number">20.132</span></span><br><span class="line">                <span class="attribute">port</span>: <span class="number">5672</span></span><br><span class="line">                <span class="attribute">username</span>: root</span><br><span class="line">                <span class="attribute">password</span>: root</span><br><span class="line">                <span class="attribute">virtual-host</span>: /unicode-pay</span><br><span class="line">      <span class="attribute">bindings</span>:</span><br><span class="line">        <span class="attribute">testInPut</span>:</span><br><span class="line">          <span class="attribute">destination</span>: testRabbit</span><br><span class="line">          <span class="attribute">content-type</span>: application/json</span><br><span class="line">          <span class="attribute">default-binder</span>: test</span><br></pre></td></tr></table></figure><p>这里与生产者唯一不同的地方就是testIntPut了，相信你已经明白了，它是binding的名字，也是通道与交换机绑定的关键</p><h4><span id="3创建通道">3.创建通道</span></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span> MqMessageSource &#123;</span><br><span class="line"></span><br><span class="line">    String TEST_IN_PUT = <span class="string">"testInPut"</span>;</span><br><span class="line"></span><br><span class="line">    @Input(TEST_IN_PUT)</span><br><span class="line">    SubscribableChannel testInPut();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="4-接受消息">4. 接受消息</span></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">EnableBinding</span>(<span class="keyword">MqMessageSource</span>.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> class MqMessageConsumer &#123;</span><br><span class="line">    @<span class="keyword">StreamListener</span>(<span class="keyword">MqMessageSource</span>.<span class="keyword">TEST_IN_PUT</span>)</span><br><span class="line">    public void messageInPut(Message&lt;String&gt; message) &#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.err</span><span class="selector-class">.println</span>(" 消息接收成功：" + <span class="selector-tag">message</span><span class="selector-class">.getPayload</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候启动Eureka、消息生产者和消费者，然后调用生产者的接口应该就可以接受到来自mq的消息了。</p><p>GitHub地址：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a>。代码所在模块：cloud-demo-consumer，cloud-demo-provider-2</p><p>如果对您有所帮助，请记得帮忙点一个star哦</p><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令总结</title>
      <link href="/2018/11/27/cker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/11/27/cker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了docker的一些常用命令以及Dockerfile的组成元素</p></blockquote><h2><span id="镜像">镜像</span></h2><h4><span id="拉取镜像">拉取镜像</span></h4><p>docker pull</p><h4><span id="查看镜像">查看镜像</span></h4><p>docker images</p><h4><span id="删除镜像">删除镜像</span></h4><p>docker rmi</p><p>常用参数：<br>1. -f：强制删除运行中的容器</p><h4><span id="创建镜像">创建镜像</span></h4><ol><li>docker commit</li></ol><p>常用参数：<br>1. -m：本次提交信息<br>2. --author=&quot;&quot; ：作者<br>2.docker build 使用此从Dockerfile文件来构建镜像</p><p>常用参数：<br>1. -t x/y:z：指定镜像的命名空间为x仓库为y，tag为z</p><h2><span id="容器">容器</span></h2><h4><span id="创建启动容器">创建/启动容器</span></h4><ol><li>docker create<br>docker create命令创建的容器并不会立即进入运行状态，需要使用docker start命令来启动</li><li>docker retart 重启容器</li><li>docker run</li></ol><p>常用参数：</p><pre><code>1. --name:为容器指定名称2. -it:启动一个交互型容器，此参数为我们和容器提供了一个交互shell3. -d:创建后台型容器4. -restart=always:容器退出后自动重启5. -restart=on-failure:x:容器退出时如果返回值是非0，就会尝试重启x次6. -p x:y :主机端口：容器端口7. -P：随机分配一个49000到49900的端口8.-v：创建数据卷7. -n :指定dns8. -h : 指定容器的hostname9. -e ：设置环境变量10. -m :设置容器使用内存最大值11. --net: 指定容器的网络连接类型，支持 bridge/host/none/container12. --link=x: 添加链接到另一个容器x13. --expose=x: 开放端口x</code></pre><p>这里docker create和docker run -it创建的容器都是交互型容器</p><h4><span id="查看容器">查看容器</span></h4><ol><li>docker ps 查看正在运行的容器</li></ol><p>常用参数：</p><pre><code>1. -a：查看所有容器2. -l:只列出最近创建的3. -n=x:只列出最后创建的x个3. -q:只列出容器id</code></pre><h4><span id="停止容器">停止容器</span></h4><ol><li>docker stop</li><li>docker kill</li></ol><h4><span id="删除容器">删除容器</span></h4><p>docker rm</p><p>常用参数：</p><pre><code>1. -f：强制删除运行中的容器2. docker rm `docker ps -aq`:删除所有容器</code></pre><h4><span id="查看容器日志">查看容器日志</span></h4><p>docker logs</p><p>常用参数：</p><pre><code>1. -f：实时查看日志2. --tail=x:查看最后x行3. -t:查看日志产生的时间</code></pre><h4><span id="查看容器进程">查看容器进程</span></h4><p>docker top</p><h4><span id="查看容器配置信息">查看容器配置信息</span></h4><p>docker inspect<br>常用参数：</p><pre><code>1. -f='{{x}}'：查看x配置</code></pre><h4><span id="进入容器">进入容器</span></h4><ol><li>docker attch 进入交互型容器</li></ol><p>常用参数：</p><pre><code>1. -f：强制删除运行中的容器2. docker rm `docker ps -aq`:删除所有容器</code></pre><ol start="2"><li>docker exec 进入后台型容器</li></ol><p>常用参数：</p><pre><code>1. -it 容器id /bin/bash：进入到后台容器</code></pre><h2><span id="dockerfile">Dockerfile</span></h2><p>如下是一个Dockerfile文件，我们就来通过这个文件来学习一下Dockerf的相关指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">"syj &lt;syj@shiyujun.cn&gt;"</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">EXPOSE 80  </span></span><br><span class="line"><span class="bash">ADD test.0.0.1.jar app.jar</span></span><br><span class="line"><span class="bash">VOLUME /tmp</span></span><br><span class="line"><span class="bash">WORKDIR /tmp</span></span><br><span class="line"><span class="bash">ENV username syj</span></span><br><span class="line"><span class="bash">CMD java -jar /app.jar</span></span><br><span class="line"><span class="bash">ENTRYPOINT java -jar /app.jar</span></span><br><span class="line"><span class="bash">USER root</span></span><br><span class="line"><span class="bash">ONBUILD：<span class="built_in">echo</span> <span class="string">"hello child"</span></span></span><br></pre></td></tr></table></figure><ol><li>FROM：文件开头的指令，指定父级镜像</li><li>MAINTAINER： 作者信息，syj是用户名，后面是邮箱</li><li>RUN： 用来执行命令，可以有一下三种形式<ol><li>RUN apt-get update</li><li>RUN [ “apt-get”,&quot; update&quot; ]</li><li>RUN apt-get update &amp;&amp; apt-get nginx</li></ol></li><li>EXPOSE： 指定容器对外开放的端口</li><li>ADD ：将主机上的文件（Dockerfile的相对路径）或者网络文件添加到镜像中</li><li>VOLUME ：指定挂载点</li><li>WORKDIR：下方指令执行的目录</li><li>ENV：设置环境变量</li><li>CMD：启动容器时默认运行的命令，同RUN的执行方式<ol><li>CMD java -jar /app.jar</li><li>CMD [“java”,&quot;-jar&quot;,&quot;/app.jar&quot;]</li></ol></li><li>ENTRYPOINT ：同CMD</li><li>USER ：执行指令的用户</li><li>ONBUILD：触发器指令，此镜像当做父镜像时执行的命令，可以跟ADD、RUN、ENTRYPOINT</li></ol><blockquote><p>本文出自<a href="http://shiyujun.cn/">http://shiyujun.cn/</a>,转载请保留</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools规则引擎入门指南(三)——使用Docker部署Workbench</title>
      <link href="/2018/11/26/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%89-%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Workbench/"/>
      <url>/2018/11/26/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%89-%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Workbench/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实本来我也是打算使用Tomcat来部署Workbench的，但是在网上看了几篇文章，超级繁琐的配置、各种版本。实在看不下去了索性就直接使用Docker来部署了。本次部署的版本是最新稳定版，对应drools的7.14.0.Final版本。</p></blockquote><h4><span id="1-拉取镜像">1. 拉取镜像</span></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jboss/drools-workbench-<span class="string">showcase:</span>latest</span><br></pre></td></tr></table></figure><p>镜像文件比较大，870多M，可能需要一些时间，不要着急。</p><h4><span id="2-配置">2. 配置</span></h4><p>镜像拉取完毕后首先通过以下命令启动</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">8080</span> -<span class="selector-tag">p</span> <span class="number">8001</span>:<span class="number">8001</span> -d --name drools-workbench jboss/drools-workbench-showcase:latest</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> 容器<span class="built_in">id</span> /bin/bash</span><br></pre></td></tr></table></figure><p>Workbench的日志存在/opt/jboss/wildfly/standalone/log/目录</p><p>我们现在要做的是进入/opt/jboss/wildfly/standalone/configuration目录，打开standalone-full-drools.xml文件新增一条配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"org.uberfire.nio.git.dir"</span> <span class="attribute">value</span>=<span class="string">"/opt/jboss/wildfly/mygit"</span>/&gt;</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/1.png" alt="1"></p><p>然后退出容器之后重启一下容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>紧接着你就可以去浏览器访问了：ip:8080/drools-wb</p><h4><span id="3-构建规则文件">3. 构建规则文件</span></h4><p>使用默认用户名密码admin登陆系统，在欢迎页选择新建一个projects<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/2.png" alt="2"><br>按照如下操作创建一个项目<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/3.png" alt="3"><br>接着呢，进入drools-test项目，点击屏幕右方的Add Asset按钮。我在这里为大家演示一下下方的三个如何操作，剩下就要靠你自己去探索了。<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/4.png" alt="4"></p><ol><li><p>软件包，这个是跟Java中的package一样的，上方input是包名，下方是上级包名，我在这里创建一个一个包entity，全路径是cn.org.zhixiang.entity<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/5.png" alt="5"></p></li><li><p>数据对象，这个数据对象其实就是Java中的实体类了，我们这里创建一个名为Dog的对象，然后进入这个数据对象就会发现有一个添加字段的按钮可以供我们添加各种字段，然后左侧的源代码可以让我们直观的感受到创建之后的对象到底为何物。我在这里为Dog添加了name和age属性</p></li><li><p>向导型规则模板，这个就是我们的规则对象，创建一个规则对象hello，进入hello之后有一个事是必须注意的，我们想引用刚才创建的Dog对象，得先去数据对象标签页新建一个条目，选择类型是cn.org.zhixiang.entity.Dog.然后在会的model标签页，如果你看了前两篇文章的话我想你一定知道该如何操作。我在这里是这样操作的：<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/6.png" alt="6"><br>其实源码就跟我第一篇文章写的HelloWord差不多<br><img src="/2018/11/26/rools规则引擎入门指南-三-——使用Docker部署Workbench/7.png" alt="7"></p></li><li><p>接下来就可以构建了<br>回到这个项目的主页，单击build按钮，然后再单击Deploy按钮，这个jar包就被发布到了WorkBench的maven仓库里，我们可以通过访问如下地址来得到这个jar包</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ip:</span><span class="number">8080</span><span class="regexp">/drools-wb/</span>maven2<span class="regexp">/cn/</span>org<span class="regexp">/zhixiang/</span>drools-test<span class="regexp">/0.0.1/</span>drools-test<span class="number">-0.0</span><span class="number">.1</span>.jar</span><br></pre></td></tr></table></figure><h4><span id="4-java获取规则文件">4. Java获取规则文件</span></h4><p>规则文件既然已经发布了，那么接下来就是Java出场的时候了。</p><ol><li>创建一个实体Dog，这里注意的是包名、类名还有属性都要与上方在Workbench创建的保持一致。</li><li>创建DroolsApplicationWorkBenchTests测试类</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsApplicationWorkBenchTests</span> </span>&#123;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="keyword">public</span> void testWorkbench() &#123;</span><br><span class="line">        <span class="keyword">String</span> url = <span class="string">"http://ip:8080/drools-wb/maven2/cn/org/zhixiang/drools-test/0.0.1/drools-test-0.0.1.jar"</span>;</span><br><span class="line">        KieServices kieServices = KieServices.Factory.<span class="keyword">get</span>();</span><br><span class="line">        KieRepository kieRepository = kieServices.getRepository();</span><br><span class="line">        UrlResource resource = (UrlResource) kieServices.getResources().<span class="keyword">new</span><span class="type">UrlResource</span>(url);</span><br><span class="line">        resource.setBasicAuthentication(<span class="string">"enabled"</span>);</span><br><span class="line">        resource.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        resource.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        InputStream is = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = resource.getInputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        KieModule kieModule = kieRepository.addKieModule(kieServices.getResources().<span class="keyword">new</span><span class="type">InputStreamResource</span>(is));</span><br><span class="line">        KieContainer kieContainer = kieServices.<span class="keyword">new</span><span class="type">KieContainer</span>(kieModule.getReleaseId());</span><br><span class="line">        KieSession kieSession = kieContainer.<span class="keyword">new</span><span class="type">KieSession</span>();</span><br><span class="line">        Dog dog = <span class="keyword">new</span> <span class="type">Dog</span>();</span><br><span class="line">        dog.setName(<span class="string">"大黄"</span>);</span><br><span class="line">        kieSession.insert(dog);</span><br><span class="line">        kieSession.fireAllRules();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完测试方法以后你的控制台打印出了大黄出场四个字么？</p><p>本文所有源码：<a href="https://github.com/shiyujun/drools" target="_blank" rel="noopener">https://github.com/shiyujun/drools</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn/">http://shiyujun.cn/</a>,转载请保留</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools规则引擎入门指南（二）</title>
      <link href="/2018/11/24/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/11/24/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客主要讲解Drools常用的属性以及函数</p></blockquote><h1><span id="属性">属性</span></h1><p>首先我们在resources\rules文件夹下创建一个Property.drl，还有一个DroolsApplicationPropertyTests</p><h4><span id="1-salience优先级">1. salience优先级</span></h4><p>salience 属性的值默认为0，它的值越大执行的优先级就越高,看如下代码在执行的时候就会先执行salience2</p> <figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> rule <span class="string">"salience2"</span></span><br><span class="line">salience <span class="number">2</span></span><br><span class="line">    when</span><br><span class="line">        <span class="built_in">eval</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.<span class="built_in">err</span>.println(<span class="string">"salience2"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">"salience1"</span></span><br><span class="line">salience <span class="number">1</span></span><br><span class="line">    when</span><br><span class="line">        <span class="built_in">eval</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.<span class="built_in">err</span>.println(<span class="string">"salience1"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure> <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testSalience</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       kieSession.fireAllRules();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4><span id="2-date-effective日期比较小于等于">2. date-effective日期比较（小于等于）</span></h4><p>当系统时间小于等于date-effective的值是才会执行。</p> <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> rule <span class="string">"dateEffective"</span></span><br><span class="line"><span class="built_in">date</span>-effective <span class="string">"2018-11-24"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"2018-11-24被执行"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">"dateEffectiveTomorrow"</span></span><br><span class="line"><span class="built_in">date</span>-effective <span class="string">"2018-11-25"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"2018-11-25被执行"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure> <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testDateEffective</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"dateEffective"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testDateEffectiveTomorrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"dateEffectiveTomorrow"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于今天是11月24，所以上方的dateEffectiveTomorrow将不会执行。</p><p>还有需要注意的是Drools默认的时间格式是dd-MMM-yyyy的，也就是说你必须使用24-十一月-2018它才能识别，我为什么能使用yyyy-MM-dd呢，请参考上篇文章中进行自动配置时的getKieServices()方法</p><h4><span id="3-date-expires日期比较大于">3. date-expires日期比较（大于）</span></h4><p>刚好于date–effective相反</p><h4><span id="4-enabled">4. enabled</span></h4><p>当一个规则的enabled属性变为false时这条规则将不再可用</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"enabled"</span></span><br><span class="line">enabled <span class="literal">false</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"被禁用的规则"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"enabled"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1><span id="函数">函数</span></h1><p>接着我们在resources\rules文件夹下创建一个Function.drl，还有一个DroolsApplicationFunctionTests</p><p>Drools中常用函数分别为insert、update和retract，分别是插入更新和删除，我们来看一下下方的几个规则的执行过程</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"test1"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      insert(new User(<span class="string">"赵六"</span>,<span class="number">12</span>));</span><br><span class="line">      System.err.println(<span class="string">"创造赵六"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">"test2"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">       <span class="variable">$u</span><span class="symbol">:User</span>(name==<span class="string">"赵六"</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="variable">$u</span>.setName(<span class="string">"王五"</span>);</span><br><span class="line">        update(<span class="variable">$u</span>);</span><br><span class="line">        System.err.println(<span class="string">"赵六"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">"test3"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">         <span class="variable">$u</span><span class="symbol">:User</span>(name==<span class="string">"王五"</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"王五"</span>);</span><br><span class="line">        retract(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">"test4"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">         <span class="variable">$u</span><span class="symbol">:User</span>(name==<span class="string">"王五"</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"王五删除删除之后"</span>+<span class="variable">$u</span>.getName());</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可用看的，test1规则没有判断条件，所以直接被执行，执行过程中它生成了一个对象插入到工作内存中，此对象的规则又恰好与test2规则匹配，所以紧接着test2执行，test2执行时更新了user对象，更新后的对象又匹配了test3，所以test3继续执行。执行完毕后user对象被删除，test4就执行不了了。</p><p>另外还有几个方法也是常用的：</p><ol><li>getWorkingMemory,获取当前的WorkingMemory对象</li><li>halt，执行完当前规则后不再执行其他规则</li><li>getRule，获取当前规则对象</li></ol><p>本文所有源码：<a href="https://github.com/shiyujun/drools" target="_blank" rel="noopener">https://github.com/shiyujun/drools</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn/">http://shiyujun.cn/</a>,转载请保留</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools规则引擎入门指南（一）</title>
      <link href="/2018/11/24/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/11/24/rools%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近项目需要增加风控系统，在经过一番调研以后决定使用Drools规则引擎。因为项目是基于SpringCloud的架构，所以此次学习使用了SpringBoot2.0版本结合Drools7.14.0.Final版本。</p></blockquote><h1><span id="引入依赖">引入依赖</span></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.14.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.kie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kie-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.14.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1><span id="创建配置类">创建配置类</span></h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RULES_PATH = <span class="string">"rules/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(KieFileSystem.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KieFileSystem <span class="title">kieFileSystem</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieFileSystem kieFileSystem = getKieServices().newKieFileSystem();</span><br><span class="line">        <span class="keyword">for</span> (Resource file : getRuleFiles()) &#123;</span><br><span class="line">            kieFileSystem.write(ResourceFactory.newClassPathResource(RULES_PATH + file.getFilename(), <span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kieFileSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Resource[] getRuleFiles() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ResourcePatternResolver resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> resourcePatternResolver.<span class="title">getResources</span><span class="params">(<span class="string">"classpath*:"</span> + RULES_PATH + <span class="string">"**/*.*"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(KieContainer.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KieContainer <span class="title">kieContainer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> KieRepository kieRepository = getKieServices().getRepository();</span><br><span class="line">        kieRepository.addKieModule(<span class="keyword">new</span> KieModule() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function">ReleaseId <span class="title">getReleaseId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">return</span> kieRepository.<span class="title">getDefaultReleaseId</span><span class="params">()</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        KieBuilder kieBuilder = getKieServices().newKieBuilder(kieFileSystem());</span><br><span class="line">        kieBuilder.buildAll();</span><br><span class="line">        <span class="keyword">return</span> getKieServices().newKieContainer(kieRepository.getDefaultReleaseId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(KieBase.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KieBase <span class="title">kieBase</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kieContainer().getKieBase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(KieSession.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KieSession <span class="title">kieSession</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        KieSession kieSession = kieContainer().newKieSession();</span><br><span class="line">        <span class="keyword">return</span> kieSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(KModuleBeanFactoryPostProcessor.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KModuleBeanFactoryPostProcessor <span class="title">kiePostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KModuleBeanFactoryPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function">KieServices <span class="title">getKieServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"drools.dateformat"</span>,<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">return</span> KieServices.Factory.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个时候我们的基本环境已经搭建好了，接下来我们一起来学习Drools吧</p><h1><span id="helloword">HelloWord</span></h1><blockquote><p>程序员的世界里，我们学习任何一门语言都是以HelloWord开启的，本次学习也不例外。</p></blockquote><h2><span id="1创建规则文件">1.创建规则文件</span></h2><p>Drools的规则文件是以*.drl结尾的文件，我们来看一个最简单的规则文件中都是包含什么。</p><p>通常来说，我们会把规则文件放在resources资源文件夹下，这里呢我们在resources文件夹下新建一个rules文件夹，然后再新建一个HelloWord.drl文件</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package rules;</span><br><span class="line"><span class="keyword">import</span> cn.org.zhixiang.entity.User;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line">rule <span class="string">"hello,word"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">        eval(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"hello,word!"</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol><li>规则文件，就是我们新建的这个HelloWord.drl可以理解为一个Java类</li><li>package，这个跟Java中的包名是差不多的</li><li>import，此文件中需要的类。</li><li>rule，可以理解为给这个规则起的一个名字，一个规则文件中可以包含多个rule。</li><li>when，when下面可以放置一些条件判断的表达式以及定义一些变量什么的。如果里面内容为空的话则会默认添加一个eval(true)代表一个为true的表达式</li><li>then，当when下面的表达式为true是then下方的代码才会执行，在这里可以直接编写Java代码（代码所需要的类通过import引入），当然也可以使用when模块定义的一些变量</li><li>end 代表规则hello,word的结束。</li></ol><h2><span id="2java调用">2.Java调用</span></h2><p>现在我们的规则文件写好以后就可以在Java中来进行调用了。</p><h3><span id="1-新建一个测试类droolsapplicationhellowordtests">1. 新建一个测试类DroolsApplicationHelloWordTests</span></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="variable">@SpringBootTest</span></span><br><span class="line">public class DroolsApplicationHelloWordTests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    KieSession kieSession;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方注入的kieSession对象就是以后与Drools打交道最常用的一个对象了，通过它可以直接操作在配置类kieFileSystem方法中加载的所有的规则文件</p><h3><span id="2-编写测试代码">2. 编写测试代码</span></h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testHelloWord</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    kieSession.fireAllRules();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kieSession.fireAllRules方法是执行所有的规则，在运行了这个测试方法之后我们应该就可以看到控制台打印的一句hello,word!了</p><h1><span id="基础学习">基础学习</span></h1><h3><span id="1-向规则文件传参">1. 向规则文件传参</span></h3><h4><span id="1-在entity包下新增一个user的实体类">1. 在entity包下新增一个User的实体类</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter，setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="2-在helloword规则下方再次新建一个规则user">2. 在hello,word规则下方再次新建一个规则user</span></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"user"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">      <span class="variable">$u</span><span class="symbol">:User</span>(name==<span class="string">"张三"</span>,age==<span class="number">18</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="variable">$u</span>.setName(<span class="string">"李四"</span>);</span><br><span class="line">        System.err.println(<span class="string">"hello,word："</span>+<span class="variable">$u</span>.getName());</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>$u:User(name==“张三”,age==18)的意思就是当存在一个user对象，并且它的name属性等于张三age等于18时就把这个对象赋值给$u。</p><p>在下方的then模块，如果上方的条件成立时就把$u的name属性更新一下，然后打印。</p><h4><span id="3-编写测试代码">3. 编写测试代码</span></h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">18</span>);</span><br><span class="line">    kieSession.insert(user);</span><br><span class="line">    kieSession.fireAllRules();</span><br><span class="line">    System.err.println(<span class="string">"规则执行完毕后张三变为了："</span>+user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用kieSession.insert方法向规则文件中传参，然后在调用方法后你会发现在规则文件中更改的值在Java代码中也被更改了。</p><h4><span id="4-存在的小问题">4. 存在的小问题</span></h4><p>可能你会发现上方代码执行的时候连那句helloword也打印了，为什么呢，这是因为HelloWord那条规则没有验证条件再加上kieSession.fireAllRules()本来就是执行所有被加载的规则的。那么避免这种情况的办法就是执定本次执行的规则</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testOneRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">18</span>);</span><br><span class="line">        kieSession.insert(user);</span><br><span class="line">        kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"user"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上方的user就是指定的本次执行的规则名称了。</p><h4><span id="5扩展操作">5.扩展操作</span></h4><p>上方我们通过RuleNameEndsWithAgendaFilter对象成功指定了需要执行的规则文件，其实通过查看此对象的源码我们发现这个对象是AgendaFilter的一个实现类，决定执不执行一个规则的条件是accept方法返回的boolean值决定的。<br>所以说如果我们希望可以一次批量匹配多个规则的话可以通过继承AgendaFilter重写accept方法哦</p><h3><span id="2-常用运算符">2. 常用运算符</span></h3><h4><span id="1-连接符">1. 连接符</span></h4><p>Drools中存在的三种连接符，上方的代码中我们已经使用过一个了，那就$u:User(name==“张三”,age==18)中的逗号，这里的逗号其实就是and的意思。另外的两个运算符就是&amp;&amp;和||，相信它们两个的意思不用我来介绍了吧。</p><p>不过有一点需要注意的是&amp;&amp;和|| 和逗号,不能同时出现。要不你选择用&amp;&amp;和||要不就只用逗号， 。</p><h4><span id="2-类型比较操作符">2. 类型比较操作符</span></h4><h5><span id="1首先就是ltgtgtlt这六个">1.首先就是&lt;,&gt;,==,!=,&gt;=,&lt;=这六个</span></h5><p>它们是配合eval使用的，比如上方我们使用的eval（true）就是直接返回的true。当我们比较常量时可以使用eval（u.age&gt;b.age）</p><h5><span id="2-contains-not-contains">2. contains not contains</span></h5><p>contains用于判断对象的某个字段是否包含另外一个对象</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"contains"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">      <span class="variable">$s</span><span class="symbol">:String</span>()</span><br><span class="line">      <span class="variable">$u</span><span class="symbol">:User</span>(name contains <span class="variable">$s</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"用户张三存在"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testContains</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       String name=<span class="string">"张三"</span>;</span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">18</span>);</span><br><span class="line">        kieSession.insert(name);</span><br><span class="line">        kieSession.insert(user);</span><br><span class="line">        kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"contains"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>not contains顾明思议就是不包含</p><h5><span id="3-memberof-not-memberof">3. memberOf not memberOf</span></h5><p>memberOf用于判断对象的某个字段是否存在一个集合中</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"memberOf"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">      <span class="variable">$list</span><span class="symbol">:List</span>()</span><br><span class="line">      <span class="variable">$u</span><span class="symbol">:User</span>(name memberOf <span class="variable">$list</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"用户李四存在"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMemberOf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List <span class="built_in">list</span>=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="string">"李四"</span>);</span><br><span class="line">        User user=<span class="keyword">new</span> User(<span class="string">"李四"</span>,<span class="number">18</span>);</span><br><span class="line">        kieSession.insert(<span class="built_in">list</span>);</span><br><span class="line">        kieSession.insert(user);</span><br><span class="line">        kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"memberOf"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>not memberOf顾明思议就是不存在</p><h5><span id="3-matches-not-matches">3. matches not matches</span></h5><p>matches就是用于匹配正则表达式的了</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rule <span class="string">"matches"</span></span><br><span class="line">    <span class="keyword">when</span></span><br><span class="line">      <span class="variable">$u</span><span class="symbol">:User</span>(name matches <span class="string">"张.*"</span>)</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        System.err.println(<span class="string">"用户张xx存在"</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testMatches</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       User user=<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">18</span>);</span><br><span class="line">       kieSession.insert(user);</span><br><span class="line">       kieSession.fireAllRules(<span class="keyword">new</span> RuleNameEndsWithAgendaFilter(<span class="string">"matches"</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>not matches不用我说了吧</p><p>本文所有源码：<a href="https://github.com/shiyujun/drools" target="_blank" rel="noopener">https://github.com/shiyujun/drools</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn/">http://shiyujun.cn/</a>,转载请保留</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（十二）：Zipkin全链路监控</title>
      <link href="/2018/11/19/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9AZipkin%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/11/19/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9AZipkin%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Zipkin是SpringCloud官方推荐的一款分布式链路监控的组件，使用它我们可以得知每一个请求所经过的节点以及耗时等信息，并且它对代码无任何侵入，我们先来看一下Zipkin给我们提供的UI界面都是提供了哪些信息。</p></blockquote><ol><li>zipkin首页为我们提供了对于调用链路的搜索查询及展示的功能<br><img src="/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/1.png" alt="1"></li><li>第二个选项卡里提供了历史数据的导入功能<br><img src="/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/2.png" alt="3"></li><li>第三个选项卡里展示了各个微服务之间的关系<br><img src="/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/3.png" alt="3"></li><li>我们再次回到首页，我们点开一个调用链路之后就会看到此次链路调用的详情<br><img src="/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/4.png" alt="3"></li><li>现在我们点开详情中的一个service，可以看到此次调用在这个微服务中的详细信息。<br><img src="/2018/11/19/每天学点SpringCloud（十二）：Zipkin全链路监控/5.png" alt="3"></li></ol><h4><span id="如何使用zipkin">如何使用Zipkin</span></h4><p>虽然在SpringBoot2.0以后官方不推荐我们自定义Zipkin服务端，而是使用官方提供的jar包。但是作为开发者来说，如果不能去看一看源码，修改一些自定义的配置的话就好像生命掌握在别人手里一样，哪天碰到一个莫名奇妙的bug可就不开心了。所以本例中使用zipkin最新2.11.8release版本来构建一个服务端</p><h5><span id="1-创建一个微服务-cloud-demo-zipkin-server">1. 创建一个微服务 cloud-demo-zipkin-server</span></h5><h6><span id="1-pomxml">1. pom.xml</span></h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6><span id="2-yml">2. yml</span></h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9411</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  metrics:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        auto-time-requests:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h6><span id="3-启动注解">3. 启动注解</span></h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@EnableEurekaClient</span></span><br><span class="line"><span class="variable">@EnableZipkinServer</span></span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br></pre></td></tr></table></figure><p>需要注意的是EnableZipkinServer注解是zipkin2.server.internal包下的。</p><h5><span id="2-创建一个微服务-cloud-demo-zipkin-server">2. 创建一个微服务 cloud-demo-zipkin-server</span></h5><p>改造一下我们原先的两个微服务：cloud-demo-consumer-feign-hystrix，cloud-demo-provider</p><p>首先为它们都加上zipkin客户端的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml中指定zipkin-server的url，并且指定日志发送方式为web</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">zipkin</span>:</span><br><span class="line">    <span class="attribute">base-url</span>: <span class="attribute">http</span>:<span class="comment">//localhost:19411</span></span><br><span class="line">    <span class="attribute">sender</span>:</span><br><span class="line">      <span class="attribute">type</span>: web</span><br></pre></td></tr></table></figure><h5><span id="3-查看结果">3. 查看结果</span></h5><p>此时我们所有的准备工作已经做好了，我们启动Eureka、zipkin、cloud-demo-consumer-feign-hystrix、cloud-demo-provider几个微服务，调用几次cloud-demo-consumer-feign-hystrix的user/getUser接口。然后访问http://localhost:9411应该就可以看到zipkin的UI界面。</p><p>这个时候可能有的童鞋看到有数据，有的没有数据，这个不是你的配置错了，而是因为zipkin客户端默认收集10%的数据，你可以使用下方的配置更改zipkin的采样频率。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  sleuth:</span></span><br><span class="line"><span class="symbol">    sampler:</span></span><br><span class="line"><span class="symbol">      probability:</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>GitHub地址：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a>。代码所在模块：cloud-demo-zipkin-server,cloud-demo-consumer-feign-hystrix,cloud-demo-provider</p><p>如果对您有所帮助，请记得帮忙点一个star哦</p><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（十一）：Hystrix仪表盘</title>
      <link href="/2018/11/17/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
      <url>/2018/11/17/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHystrix%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>在SpringCloud学习系列博客第六篇<a href="http://shiyujun.cn/2018/07/26/%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AHystrix%E4%BD%BF%E7%94%A8/">文章</a>中,我们已经学习了Hystrix的使用，但是那篇文章中有一点遗漏没有讲，那就是Hystrix Dashboard ，它可以实时的监控Hystrix的运行情况。</p><br>我们先来看一下使用Hystrix Dashboard我们可以得到多少有用的信息呢？<p><img src="/2018/11/17/每天学点SpringCloud（十一）：Hystrix仪表盘/2.png" alt="1"></p><p>这些状态对我们定位问题还是比较有帮助的，那么我们来看一下如何使用它吧</p><h4><span id="1引入依赖">1.引入依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hystrix依赖主要是hystrix核心功能依赖，dashboard是为我们提供仪表盘面板的页面功能的，actuator是用来暴露dashboard所需要的端口的。</p><h4><span id="2启用hystrix仪表盘">2.启用hystrix仪表盘</span></h4><p>在启动类增加注解@EnableHystrixDashboard。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaClient</span></span><br><span class="line"><span class="variable">@EnableHystrixDashboard</span></span><br><span class="line"><span class="variable">@EnableFeignClients</span></span><br><span class="line"><span class="variable">@EnableHystrix</span></span><br></pre></td></tr></table></figure><h4><span id="3修改actuator配置">3.修改actuator配置</span></h4><p>默认的时候actuator是没有开启hystrix的端口的，所以我们需要在配置文件中增加一些配置来开启这个端口。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>上方的配置如果不明白的话可以参考：<a href="http://shiyujun.cn/2018/11/16/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ASpringCloud%E7%9B%91%E6%8E%A7/">SpringCloud监控</a></p><h4><span id="4使用">4.使用</span></h4><p>访问ip:端口/hystrix,我们可以看到如下界面<br><img src="/2018/11/17/每天学点SpringCloud（十一）：Hystrix仪表盘/1.png" alt="1"><br>这个是Dashboard的欢迎页面，第一个文本框是hystrix监控页面的地址。此地址默认是/hystrix.stream，然后还会被actuator的路径所影响，比如说，我的actuator默认路径/actuator，所以我输入访问地址为：  ip:端口/actuator/hystrix.stream。<br>第二个文本框为间隔更新数据时间，第三个是此次监控起的一个名字。<br><br><br>上方信息输入完成后点击monitor后我们就可以看到文章开头图片描述的页面了。</p><br><p>GitHub地址：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a>。代码所在模块：cloud-demo-consumer-feign-hystrix</p><p>如果对您有所帮助，请记得帮忙点一个star哦</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（十）：SpringCloud监控</title>
      <link href="/2018/11/16/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ASpringCloud%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/11/16/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ASpringCloud%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天我们来学习一下actuator这个组件，它不是SpringCloud之后才有的，而是SpringBoot的一个starter，Spring Boot Actuator。我们使用SpringCloud的时候需要使用这个组件对应用程序进行监控与管理</p></blockquote><p>在SpringBoot2.0版本中，actuator可以为我们提供以下端点：</p><table><thead><tr><th>访问路径</th><th>描述</th></tr></thead><tbody><tr><td>/actuator/auditevents</td><td>显示当前应用程序的审计事件信息</td></tr><tr><td>/actuator/beans</td><td>显示一个应用中所有Spring Beans的完整列表</td></tr><tr><td>/actuator/conditions</td><td>显示配置类和自动配置类的状态及它们被应用或未被应用的原因</td></tr><tr><td>/actuator/configprops</td><td>显示一个所有@ConfigurationProperties的集合列表</td></tr><tr><td>/actuator/env</td><td>显示来自Spring的 ConfigurableEnvironment的属性</td></tr><tr><td>/actuator/features</td><td>显示系统启动的一些features</td></tr><tr><td>/actuator/health</td><td>显示应用的健康信息</td></tr><tr><td>/actuator/httptrace</td><td>最后100个HTTP请求</td></tr><tr><td>/actuator/info</td><td>显示任意的应用信息</td></tr><tr><td>/actuator/metrics</td><td>展示当前应用的metrics信息</td></tr><tr><td>/actuator/mappings</td><td>显示一个所有@RequestMapping路径的集合列表</td></tr><tr><td>/actuator/refresh</td><td>更新配置</td></tr><tr><td>/actuator/scheduledtasks</td><td>显示应用程序中的定时任务</td></tr><tr><td>/actuator/service-registry</td><td>当前应用在注册中心的状态</td></tr><tr><td>/actuator/shutdown</td><td>允许应用以优雅的方式关闭</td></tr><tr><td>/actuator/threaddump</td><td>执行一个线程dump</td></tr><tr><td>/actuator/heapdump</td><td>返回一个GZip压缩的hprof堆dump文件</td></tr><tr><td>/actuator/loggers</td><td>返回系统的一些日志</td></tr></tbody></table><p>虽然actuator默认给我们提供了这么多的端点供我们使用，但是为了安全起见，在SpringBoot2.0中它仅仅开放了health和info两个端口，如果想要使用其他的端口就需要我们增加一些配置了，一起来看一下如何使用actuator吧。</p><h4><span id="1-引入依赖">1. 引入依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="2-修改配置文件">2. 修改配置文件</span></h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">management:</span></span><br><span class="line"><span class="symbol">  endpoints:</span></span><br><span class="line"><span class="symbol">    web:</span></span><br><span class="line"><span class="symbol">      exposure:</span></span><br><span class="line">        <span class="meta">#exclude: shutdown,threaddump   #此处控制的是不开放哪些端点</span></span><br><span class="line"><span class="symbol">        include:</span> <span class="string">"*"</span> <span class="meta">#此处控制的是开放哪些端点，如果需要开启少数端点可以这样配置：health,info。如果开启多个则使用*号开启除了exclude的端点</span></span><br></pre></td></tr></table></figure><p>这个时候我们使用postman等接口调用工具访问 ip:端口/actuator 这个路径时就会得到下图所示的这么一个json串，这个json串中就是对应的各个端点的地址信息。<br><img src="/2018/11/16/每天学点SpringCloud（十）：SpringCloud监控/1.png" alt="1"></p><h4><span id="3-健康检查">3. 健康检查</span></h4><p>默认我们访问/actuator/health得到的只是一个状态值，其实它的详细信息里包含了很多有用的东西，比如说检查磁盘空间、DataSource的连接、Elasticsearch、Mongo、Rabbit、Redis等信息，我们可以通过如下配置来开启详细的健康检查：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">management</span>:</span><br><span class="line">  <span class="attribute">endpoint</span>:</span><br><span class="line">    <span class="attribute">health</span>:</span><br><span class="line">      <span class="attribute">show-details</span>: always</span><br></pre></td></tr></table></figure><p>不仅如此，健康检查的指标我们还可以自定义，创建如下的一个bean提供健康检查的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectTimeHealthIndicator</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> connectTime=(<span class="keyword">long</span>)Math.random()*<span class="number">10</span>;<span class="comment">//模拟一个连接操作</span></span><br><span class="line">        <span class="keyword">if</span>(connectTime&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">//如果连接时间大于3则认为连接失败，返回状态为down</span></span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">"code"</span>, <span class="string">"504"</span>).withDetail(<span class="string">"msg"</span>,<span class="string">"xx应用连接超时"</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们访问 ip:端口/actuator/health 访问时可能就会根据连接时间呈现下方的两种状态<br><img src="/2018/11/16/每天学点SpringCloud（十）：SpringCloud监控/2.png" alt="2"><br><img src="/2018/11/16/每天学点SpringCloud（十）：SpringCloud监控/3.png" alt="3"></p><p>GitHub地址：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a>。代码所在模块：cloud-demo-consumer-feign</p><p>如果对您有所帮助，请记得帮忙点一个star哦</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存区域</title>
      <link href="/2018/11/03/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>/2018/11/03/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为多个区域，这些区域各有自己的用途以及独特的创建和销毁时间，今天就带着大家来揭开这些不同的数据区域的面纱</p></blockquote><p>先来一张最经典的图：<br><img src="/2018/11/03/JVM内存区域/2.png" alt="1"></p><p>今天我们来学习一下图片上方的程序计数器、方法区、栈、堆几个部分。</p><h1><span id="1程序计数器">1.程序计数器</span></h1><p>程序计数器是随着一条线程的启动而创建的，每一个线程独有一个程序计数器，多个线程之间互不影响。（可以理解为Java中的ThreadLocal）</p><h5><span id="程序计数器为什么要这样设计呢">程序计数器为什么要这样设计呢?</span></h5><blockquote><p>想要知道程序计数器为何如此设计我们先要知道它保存的是什么？<br></p></blockquote><ol><li>如果当前线程正在执行的是一个java方法，那么这个线程的程序计数器记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是native方法，这个计数器则为undefined。</li><li>我们知道多线程其实就是通过线程轮流切换并分配处理器执行时间的方式实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。当切换到另外一条线程时，若是当前线程没有程序计数器来记录此刻的执行位置，下次处理机再执行这条线程时就不知道该从哪开始了。</li></ol><h1><span id="2-栈">2. 栈</span></h1><blockquote><p>本地方法栈和虚拟机栈可以统称为栈，由于本地方法栈是jvm调用操作系统native方法所使用的栈且它们的作用是非常相似的，所以这里我们重点看一下虚拟机栈。</p></blockquote><h4><span id="虚拟机栈">虚拟机栈</span></h4><p>虚拟机栈与程序计数器一样，也是线程私有的，每个线程都会有一个自己的虚拟机栈。它描述的java方法执行的内存模型</p><h5><span id="帧">帧</span></h5><p>而每一个虚拟机栈呢又是有由多个帧组成的，当一个方法被调用时就会产生一个帧，帧的生命周期跟随着这个方法的执行周期。<br><br><br>每一个帧里面又包括了被调用的这个方法的局部变量表、操作数栈、常量池指针、动态链接、方法出口等信息。</p><h6><span id="局部变量表">局部变量表</span></h6><blockquote><p>局部变量表包含了编译器可知的基本数据类型和对象引用。</p></blockquote><p>在下方的静态方法中局部变量表就存放了a和b</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> methed1（<span class="keyword">String</span> a,<span class="keyword">int</span> b）</span><br></pre></td></tr></table></figure><p>而非静态方法中就会多了一个当前对象this，此局部变量表存放的就是this、a、b</p>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> methed1（<span class="keyword">String</span> a,<span class="keyword">int</span> b）</span><br></pre></td></tr></table></figure><h6><span id="操作数栈">操作数栈</span></h6><p>Java中所有的参数传递都是依靠操作数栈进行的，例如如下代码：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> methed1（<span class="keyword">int</span> a,<span class="keyword">int</span> b）&#123;</span><br><span class="line">     <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">     c=a+b;</span><br><span class="line">     <span class="keyword">return</span> c;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其实这短短的三行代码执行的过程是这样的：</p>  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">0</span>压栈</span><br><span class="line"><span class="number">2.</span>弹出int存放局部变量c</span><br><span class="line"><span class="number">3.</span>局部变量a压栈</span><br><span class="line"><span class="number">4.</span>局部变量b压栈</span><br><span class="line"><span class="number">5.</span>弹出两个变量求和，将结果压栈</span><br><span class="line"><span class="number">6.</span>弹出结果放到局部变量c</span><br><span class="line"><span class="number">7.</span>局部变量c压栈</span><br><span class="line"><span class="number">8.</span>return</span><br></pre></td></tr></table></figure><h6><span id="常量池指针">常量池指针</span></h6><p>顾名思义，指向常量池的指针。</p><h4><span id="栈中可能引起的异常">栈中可能引起的异常</span></h4><h5><span id="1-stackoverflowerror">1. StackOverflowError</span></h5><pre><code>这个错误主要是由线程请求的栈深度大于了线程所允许的最大深度而引起的。那么栈的深度又是个什么鬼呢&lt;br&gt;我们知道，一次方法调用就会创建一个帧，一个帧中又包含了我们上边刚刚说起的那么多东西，而它们的生命周期是随着方法调用才会销毁的。这些东西的存在都是需要占用内存的，而栈的内存肯定是有一个极限的。看一下下方的这个无限的递归方法：<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> methed1（<span class="keyword">String</span> a,<span class="keyword">int</span> b）&#123;</span><br><span class="line">      ++c;</span><br><span class="line"><span class="built_in">return</span> methed1（a,b）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方法每执行一次，就会创建一个帧，一个帧里面又包含了局部变量表操作数栈常量池指针等。就这样随着方法的执行虚拟机栈占用的内存越来越多就会引起StackOverflowError。</code></pre><br><h6><span id="如何解决">如何解决？</span></h6><pre><code>使用-Xss10m参数调整栈的大小，可以使用不同的参数来验证一下当抛出异常时c的值，c的值越大代表栈的深度越深。</code></pre><h5><span id="2-outofmemoryerror-unable-to-create-new-native-thread">2.  OutOfMemoryError: unable to create new native thread</span></h5><p>由上方的学习我们知道，每一个线程都有一个自己独有的虚拟机栈，然后这些虚拟机栈中又包含了辣么多东西。当创建的线程多到栈的内存不足以支撑时就会引起此异常。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread<span class="function"><span class="params">(()-&gt;&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125; <span class="keyword">catch</span>(InterruptedException e) &#123; &#125;        </span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;)</span>.<span class="title">start</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h6><span id="如何解决">如何解决？</span></h6><pre><code>同1，使用-Xss10m参数调整栈的大小。</code></pre><h1><span id="3-堆">3. 堆</span></h1><p>在我们的程序中，跟我们打交道最多的就是堆里的对象了。基本上所有（不包括常量池中存在的）通过new操作创建的对象都会保存在堆中。所以与栈的线程私有不同，堆是所有线程共享的（毕竟不共享难道每个线程调用时都new一次对象岂不是疯了），所以它也是虚拟里最大的一块。<br><br><br>如果根据垃圾收集算法来分的话，堆还可以再细分下去。首先呢，堆可以分为新生代和老年代，而新生代又分为eden区和s0、s1（s0、s1又叫from、to）三个区，如下图所示：。<br><img src="/2018/11/03/JVM内存区域/3.png" alt="3"><br><br><br>当一个普通的对象刚new出来的时候它是存在于eden区的，然后呢在进行垃圾回收时回进入s0和s1区，如果几轮垃圾回收后都没有被回收的话就会进入变成一个老年对象进入老年代。当然，有的对象也比较特殊，比如说一些大对象或者伴随整个程序生命周期的对象在刚出生的时候就会进入老年代避免一些不必要的垃圾回收,关于详细内容可参考我的另一篇博客：JVM垃圾收集算法</p><h4><span id="堆中可能引起的异常">堆中可能引起的异常</span></h4><h5><span id="1-javalangoutofmemoryerror-java-heap-space">1. java.lang.OutOfMemoryError: Java heap space</span></h5><p>这个异常就是由于堆中存在大量的对象，这些对象无法通过垃圾回收进行收集从而导致的堆内存溢出。</p><h5><span id="如何解决">如何解决？</span></h5><p>可以适当根据机器的性能使用-Xms -Xmx参数调整栈的大小，不过如果想要治本的话还是要选择优化代码和算法。</p><h4><span id="直接内存">直接内存</span></h4><p>直接内存并不属于运行时数据区的一部分，当然也不属于堆。之所以放到这里是因为直接内存虽然不属于运行时数据区，但是它也是需要占用内存的，如果我们在分配内存时把本机的总内存都分配给运行时数据区的各个部分而忽略了直接内存的话同样也是会引起OutOfMemoryError的。</p><h1><span id="4-方法区">4. 方法区</span></h1><p>方法区同样是各个线程共享的内存区域，它主要存储已经被虚拟机加载的类信息</p><h5><span id="1类信息">1.类信息</span></h5><ol><li>类的全限定名</li><li>父类的全限定名</li><li>直接实现接口的全限定名</li><li>类型标志</li><li>类的访问描述符（public、private、default、abstract、final、static）</li></ol><h5><span id="2-常量池">2、常量池</span></h5><p>存放该类所用到的常量的有序集合</p><h5><span id="3-字段信息">3、字段信息</span></h5><ol><li>字段修饰符（public、protect、private、default）</li><li>字段的类型</li><li>字段名称</li></ol><h5><span id="4-类的所有方法信息">4、类的所有方法信息</span></h5><ol><li>方法修饰符</li><li>方法返回类型</li><li>方法名</li><li>方法参数个数、类型、顺序等</li><li>方法字节码</li><li>操作数栈和该方法在栈帧中的局部变量区大小</li><li>异常表</li></ol><h5><span id="5-类静态变量">5、类静态变量</span></h5><h5><span id="6-指向类加载器的引用">6、指向类加载器的引用</span></h5><h5><span id="7-指向class实例的引用可以通过classforname获取的引用">7、指向Class实例的引用(可以通过Class.forName获取的引用)</span></h5><h5><span id="8-方法表非抽象类-非接口的类才会有">8、方法表（非抽象类、非接口的类才会有）</span></h5><p>一个保存类中所有的方法的数组，数组中每个每个元素是对每个方法的直接引用</p><h5><span id="9-运行时常量池">9、运行时常量池</span></h5><p>Integer,Long等基本类型的包装类 -127到128之间的缓存数据</p><h4><span id="方法区可能引起的异常">方法区可能引起的异常</span></h4><h5><span id="1-javalangoutofmemoryerror-permgen-space">1. java.lang.OutOfMemoryError: PermGen space</span></h5><p>因为方法区主要是负责存放类的相关信息，而且因为gc的次数也不像堆来的频繁，所以当class越来越多的时候就会引起此异常。</p><h5><span id="如何解决">如何解决？</span></h5><pre><code>使用-XX:PermSize参数调整方法区的大小。</code></pre><h1><span id="5综合复习">5.综合复习</span></h1><blockquote><p>看了堆、栈、方法区的介绍以后你理解他们之间的关系么？</p></blockquote><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">   <span class="keyword">public</span> User(<span class="keyword">String</span> name)&#123; </span><br><span class="line">     <span class="built_in">this</span>.name = name; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//省略getset方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">   public static void main(String[] args)&#123; </span><br><span class="line">    <span class="built_in">User </span><span class="attribute">user1</span>=new User(<span class="string">"张三"</span>);</span><br><span class="line">       <span class="built_in"> User </span><span class="attribute">user2</span>=new User(<span class="string">"李四"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道看完上方两端代码，你所理解的关系和我画的图是否一致呢？<br><img src="/2018/11/03/JVM内存区域/1.png" alt="1"></p><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea常用快捷键</title>
      <link href="/2018/10/22/dea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/10/22/dea%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1><span id="查找替换">查找/替换</span></h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + F</td><td><font color="red">在当前页面中进行查找</font></td></tr><tr><td>F3</td><td>如果找到了多个查找结果，每调用一次就会跳到下一个结果</td></tr><tr><td>Shift + F3</td><td>F3 的反向操作</td></tr><tr><td>Ctrl + R</td><td><font color="red">在当前标签页中进行替换操作</font></td></tr><tr><td>Ctrl + Shift + F</td><td>通过路径查找</td></tr><tr><td>Ctrl + Shift + R</td><td>通过路径替换</td></tr><tr><td>Ctrl + N</td><td><font color="red">根据类名查找</font></td></tr><tr><td>Ctrl + Shift + N</td><td>文件查询</td></tr><tr><td>Ctrl + Alt + Shift + N</td><td>文本查询</td></tr></tbody></table><h1><span id="编辑">编辑</span></h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Space</td><td><font color="red">代码提示</font></td></tr><tr><td>Ctrl + Shift + Space</td><td>在列出的可选项中只显示出你所输入的关键字最相关的信息</td></tr><tr><td>Ctrl + Shift + Enter</td><td><font color="red">代码补全后，自动在代码末尾添加分号结束符</font></td></tr><tr><td>Ctrl + P</td><td><font color="red">展示出方法的调用参数列表信息</font></td></tr><tr><td>Ctrl + Q</td><td>展示某个类或者方法的 API 说明文档</td></tr><tr><td>Ctrl + mouse</td><td>跳进到某个类或者方法源代码中进行查看。</td></tr><tr><td>Alt + Insert</td><td><font color="red">自动生成某个类的 Getters, Setters, Constructors, hashCode/equals, toString 等代码</font></td></tr><tr><td>Ctrl + o</td><td>展示该类中所有覆盖或者实现的方法列表</td></tr><tr><td>Ctrl + Alt + T</td><td><font color="red">自动生成if…else,try…catch, for, synchronized 等等代码块</font></td></tr><tr><td>Ctrl + /</td><td>对单行代码，添加或删除注释</td></tr><tr><td>Ctrl + Shift + /</td><td>对代码块，添加或删除注释</td></tr><tr><td>Ctrl + W</td><td>选中当前光标所在的代码块，多次触发，代码块会逐级变大</td></tr><tr><td>Ctrl + Shift + W</td><td>Ctrl + W 的反向操作，代码块会逐级变小</td></tr><tr><td>Alt + Q</td><td>展示包含当前光标所在代码的父节点信息</td></tr><tr><td>Alt + Enter</td><td>展示当前当前光标所在代码，可以变化的扩展操作</td></tr><tr><td>Ctrl + Alt + L</td><td><font color="red">格式化代码</font></td></tr><tr><td>Ctrl + Alt + o</td><td><font color="red">去除没有实际用到的包</font></td></tr><tr><td>Ctrl + Alt + I</td><td><font color="red">自动缩进</font></td></tr><tr><td>Tab / Shift + Tab</td><td>缩进或者不缩进一次所选择的代码段</td></tr><tr><td>Ctrl + Shift + V</td><td>从之前的剪切或拷贝的代码历史记录中，选择现在需要粘贴的内容</td></tr><tr><td>Ctrl + D</td><td><font color="red">复制当前选中的代码</font></td></tr><tr><td>Ctrl + Y</td><td><font color="red">删除当前光标所在的代码行</font></td></tr><tr><td>Ctrl + Shift + J</td><td>把下一行的代码接续到当前的代码行</td></tr><tr><td>Ctrl + Enter</td><td>当前代码行与下一行代码之间插入一个空行</td></tr><tr><td>Shift + Enter</td><td>当前代码行与下一行代码之间插入一个空行</td></tr><tr><td>Ctrl + Shift + U</td><td><font color="red">所选择的内容进行大小写转换</font></td></tr><tr><td>Ctrl + Shift + []</td><td><font color="red">从当前光标所在位置开始，一直选择到当前光标所在代码段起始或者结束位置</font></td></tr><tr><td>Ctrl + Delete</td><td>删除从当前光标所在位置开始，直到这个单词的结尾的内容</td></tr><tr><td>Ctrl + +/-</td><td><font color="red">展开或收缩代码段</font></td></tr><tr><td>Ctrl + F4</td><td><font color="red">关闭当前标签页</font></td></tr><tr><td>Shift + F6</td><td>修改名字</td></tr></tbody></table><h1><span id="编译运行">编译/运行</span></h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + F9</td><td><font color="red">编译项目</font></td></tr><tr><td>Ctrl + Shift + F9</td><td>编译所中的范围（如果在某个类中，那么只会编译当前类）</td></tr><tr><td>Alt + Shift + F10</td><td>会打开一个已经配置的运行列表选择运行</td></tr><tr><td>Alt + Shift + F9</td><td><font color="red">会打开一个已经配置的运行列表，选择以debug模式运行</font></td></tr><tr><td>Shift + F10</td><td>立即运行当前配置的运行实例</td></tr><tr><td>Shift + F9</td><td>立即以debug模式运行当前配置的运行实例。</td></tr><tr><td>Ctrl + Shift + F10</td><td>按照编辑器绑定的文件类型，运行相关的程序</td></tr></tbody></table><h1><span id="调试">调试</span></h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>F8</td><td><font color="red">跳到当前代码下一行</font></td></tr><tr><td>F7</td><td><font color="red">跳入到调用的方法内部代码</font></td></tr><tr><td>Shift + F7</td><td>会打开一个面板，让你选择具体要跳入的类方法</td></tr><tr><td>Shift + F8</td><td>跳出到上一级</td></tr><tr><td>Alt + F9<font color="red">让代码运行到当前光标所在处</font></td><td></td></tr><tr><td>Alt + F8</td><td></td></tr><tr><td>F9</td><td>结束当前断点的本轮调试</td></tr><tr><td>Ctrl + F8</td><td>在当前光标处，添加或者删除断点</td></tr></tbody></table><h1><span id="导航">导航</span></h1><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Alt + --&gt;/&lt;–</td><td><font color="red">跳到下一个/上一个编辑器标签</font></td></tr><tr><td>F12</td><td>如果当前在编辑窗口，触发后，会跳到之前操作过的工具栏上</td></tr><tr><td>ESC</td><td>从工具栏上，再跳回原来的编辑窗口</td></tr><tr><td>Shift + ESC</td><td>隐藏最后一个处于活跃状态的工具窗口</td></tr><tr><td>Ctrl + Shift + F4</td><td>同时关闭处于活动状态的某些工具栏窗口</td></tr><tr><td>Ctrl + G</td><td><font color="red">跳转至某一行代码</font></td></tr><tr><td>Ctrl + E</td><td><font color="red">打开曾经操作过的文件历史列表</font></td></tr><tr><td>Ctrl + Alt ±-&gt;/&lt;–</td><td>在曾经浏览过的代码行中来回跳</td></tr><tr><td>Ctrl + Shift + Backspace</td><td><font color="red">跳转到最近的编辑位置</font></td></tr><tr><td>Alt + F1</td><td>打开类型列表</td></tr><tr><td>Ctrl + B 或 Ctrl + 鼠标左键</td><td>如果是类，那么会跳转到当前光标所在的类定义或者接口；如果是变量，会打开一个变量被引用的列表。</td></tr><tr><td>Ctrl + Alt + B</td><td><font color="red">跳转到实现类，而不是接口</font></td></tr><tr><td>Ctrl + Shift + I</td><td>打开一个面板，里面包含类代码</td></tr><tr><td>Ctrl + Shift + B</td><td>打开变量的类型所对应的类代码，只对变量有用</td></tr><tr><td>Ctrl + U</td><td>打开方法的超类方法或者类的超类</td></tr><tr><td>Alt + 上/下箭头</td><td>在某个类中，跳到上一个/下一个方法的签名上</td></tr><tr><td>Ctrl + [/]</td><td><font color="red">移动光标到类定义的终止右大括号或者起始左大括号</font></td></tr><tr><td>Ctrl + F12</td><td>打开类的结构列表</td></tr><tr><td>Ctrl + H</td><td>打开类的继承关系列表</td></tr><tr><td>Ctrl + Shift + H</td><td>打开某个类方法的继承关系列表</td></tr><tr><td>Ctrl + Alt + H</td><td>打开所有类的方法列表，这些方法都调用了当前光标所处的某个类方法</td></tr><tr><td>F2/Shift + F2</td><td><font color="red">在编译错误的代码行中来回跳</font></td></tr><tr><td>F4</td><td>打开当前光标所在处的方法或类源码</td></tr><tr><td>Alt + Home</td><td>激活包路径的导航栏</td></tr><tr><td>F11</td><td>把光标所处的代码行添加为书签或者从书签中删除</td></tr><tr><td>Ctrl + F11</td><td>把光标所处的代码行添加为带快捷键的书签或者从快捷键书签中删除</td></tr><tr><td>Ctrl + [0-9]</td><td>跳转到之前定义的快捷键书签</td></tr><tr><td>Shift + F11</td><td>打开书签列表</td></tr></tbody></table><p>参考：<a href="https://blog.csdn.net/deniro_li/article/details/72902621" target="_blank" rel="noopener">https://blog.csdn.net/deniro_li/article/details/72902621</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java小技巧 </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（九）：SpringCloud最常用配置详解</title>
      <link href="/2018/10/20/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9ASpringCloud%E6%9C%80%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/10/20/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9ASpringCloud%E6%9C%80%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1><span id="eureka">Eureka</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>eureka.server.enable-self-preservation</td><td>关闭注册中心的保护机制，Eureka 会统计15分钟之内心跳失败的比例低于85%将会触发保护机制，不剔除服务提供者，如果关闭服务注册中心将不可用的实例正确剔除</td><td>false</td></tr><tr><td>eureka.instance.prefer-ip-address</td><td>不使用主机名来定义注册中心的地址，而使用IP地址的形式，如果设置了eureka.instance.ip-address 属性，则使用该属性配置的IP，否则自动获取除环路IP外的第一个IP地址</td><td></td></tr><tr><td>eureka.instance.ip-address</td><td>IP地址</td><td></td></tr><tr><td>eureka.instance.hostname</td><td>设置当前实例的主机名称</td><td></td></tr><tr><td>eureka.instance.lease-renewal-interval-in-seconds</td><td>定义服务续约任务（心跳）的调用间隔，单位：秒</td><td>30</td></tr><tr><td>eureka.instance.lease-expiration-duration-in-seconds</td><td>定义服务失效的时间，单位：秒</td><td>90</td></tr><tr><td>eureka.instance.status-page-url-path</td><td>状态页面的URL，相对路径，默认使用 HTTP 访问，如果需要使用 HTTPS则需要使用绝对路径配置</td><td>/info</td></tr><tr><td>eureka.instance.status-page-url</td><td>状态页面的URL，绝对路径</td><td></td></tr><tr><td>eureka.instance.health-check-url-path</td><td>健康检查页面的URL，相对路径，默认使用 HTTP 访问，如果需要使用 HTTPS则需要使用绝对路径配置</td><td>/health</td></tr><tr><td>eureka.client.service-url</td><td>指定服务注册中心地址，类型为 HashMap，并设置有一组默认值，默认的Key为 defaultZone；如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔如果服务注册中心加入了安全验证，这里配置的地址格式为： http://<username>:<password>@localhost:8761/eureka 其中 <username> 为安全校验的用户名；<password> 为该用户的密码</password></username></password></username></td><td><a href="http://localhost:8761/eureka" target="_blank" rel="noopener">http://localhost:8761/eureka</a></td></tr><tr><td>eureka.client.fetch-registery</td><td>检索服务</td><td>true</td></tr><tr><td>eureka.client.registery-fetch-interval-seconds</td><td>从Eureka服务器端获取注册信息的间隔时间，单位：秒</td><td>30</td></tr><tr><td>eureka.client.allow-redirects</td><td>指示服务器是否可以将客户端请求重定向到备份服务器/集群</td><td>false</td></tr><tr><td>eureka.client.availability-zones</td><td>获取此实例所在区域的可用性区域列表</td><td></td></tr><tr><td>eureka.client.backup-registry-impl</td><td>获取执行BackupRegistry的实现的名称</td><td></td></tr><tr><td>eureka.client.cache-refresh-executor-exponential-back-off-bound</td><td>缓存刷新执行者指数退出相关属性</td><td>10</td></tr><tr><td>eureka.client.cache-refresh-executor-thread-pool-size</td><td>cacheRefreshExecutor初始化的线程池大小</td><td>2</td></tr><tr><td>eureka.client.client-data-accept</td><td>EurekaAccept客户端数据接受名称</td><td></td></tr><tr><td>eureka.client.disable-delta</td><td>指示eureka客户端是否应该禁用提取delta</td><td>false</td></tr><tr><td>eureka.client.dollar-replacement</td><td>在eureka服务器的序列化/反序列化信息期间，获取Dollar符号<code> $ &lt;/ code&gt;的替换字符串</code></td><td>_</td></tr><tr><td>eureka.client.enabled</td><td>标记是否启用Eureka客户端</td><td>true</td></tr><tr><td>eureka.client.escape-char-replacement  在eureka服务器的序列化/反序列化信息期间获取下划线符号<code>_&lt;/ code&gt;的替换字符串</code></td><td>__</td><td></td></tr><tr><td>eureka.client.eureka-connection-idle-timeout-seconds</td><td>表示到eureka服务器的HTTP连接可以在关闭之前保持空闲状态的时间（以秒为单位）</td><td>30</td></tr><tr><td>eureka.client.eureka-server-connect-timeout-seconds</td><td>指示在连接到eureka服务器需要超时之前等待（以秒为单位）的时间</td><td>5</td></tr><tr><td>eureka.client.eureka-server-d-n-s-name</td><td>获取要查询的DNS名称以获取eureka服务器的列表</td><td></td></tr><tr><td>eureka.client.eureka-server-port</td><td>获取用于构建服务url的端口</td><td></td></tr><tr><td>eureka.client.eureka-server-read-timeout-seconds</td><td>指示从eureka服务器读取之前需要等待（秒）多久才能超时</td><td>8</td></tr><tr><td>eureka.client.eureka-server-total-connections</td><td>获取从eureka客户端到所有eureka服务器允许的总连接数</td><td>200</td></tr><tr><td>eureka.client.eureka-server-total-connections-per-host</td><td>获取从eureka客户端到eureka服务器主机允许的总连接数</td><td>50</td></tr><tr><td>eureka.client.eureka-server-u-r-l-context</td><td>获取用于构建服务网址的URL上下文，以便在eureka服务器列表来自DNS时联系eureka服务器</td><td></td></tr><tr><td>eureka.client.eureka-service-url-poll-interval-seconds</td><td>表示轮询对eureka服务器信息进行更改的频率（以秒为单位）</td><td>0</td></tr><tr><td>eureka.client.fetch-registry</td><td>指示该客户端是否应从eureka服务器获取eureka注册表信息</td><td>true</td></tr><tr><td>eureka.client.fetch-remote-regions-registry</td><td>逗号分隔将获取eureka注册表信息的区域列表</td><td></td></tr><tr><td>eureka.client.filter-only-up-instances</td><td>指示是否在仅具有InstanceStatus UP状态的实例的过滤应用程序之后获取应用程序</td><td>true</td></tr><tr><td>eureka.client.g-zip-content</td><td>从服务器支持时，是否必须压缩从eureka服务器提取的内容</td><td>true</td></tr><tr><td>eureka.client.heartbeat-executor-exponential-back-off-bound</td><td>心跳执行者指数回撤相关财产</td><td>10</td></tr><tr><td>eureka.client.heartbeat-executor-thread-pool-size</td><td>heartbeat执行器初始化的线程池大小</td><td>2</td></tr><tr><td>eureka.client.initial-instance-info-replication-interval-seconds</td><td>指示将实例信息复制到eureka服务器的开始时间（以秒为单位）</td><td>40</td></tr><tr><td>eureka.client.instance-info-replication-interval-seconds</td><td>指示复制要复制到eureka服务器的实例更改的频率（以秒为单位）</td><td>30</td></tr><tr><td>eureka.client.log-delta-diff</td><td>指示在注册表信息方面是否记录eureka服务器和eureka客户端之间的差异</td><td>false</td></tr><tr><td>eureka.client.on-demand-update-status-change</td><td>如果设置为true，则通过ApplicationInfoManager进行的本地状态更新将触发对远程eureka服务器的按需（但限速）注册/更新</td><td>true</td></tr><tr><td>eureka.client.prefer-same-zone-eureka</td><td>指示此实例是否应尝试在同一区域中使用eureka服务器延迟和/或其他原因</td><td></td></tr><tr><td>eureka.client.proxy-host</td><td>获取代理主机到eureka服务器（如果有的话）</td><td></td></tr><tr><td>eureka.client.proxy-password</td><td>获取代理密码（如果有）</td><td></td></tr><tr><td>eureka.client.proxy-port</td><td>获取代理端口到eureka服务器（如果有的话）</td><td></td></tr><tr><td>eureka.client.proxy-user-name</td><td>获取代理用户名（如果有）</td><td></td></tr><tr><td>eureka.client.region us-east-1</td><td>获取此实例所在的区域</td><td></td></tr><tr><td>eureka.client.register-with-eureka</td><td>指示此实例是否应将其信息注册到eureka服务器以供其他人发现</td><td>true</td></tr><tr><td>eureka.client.registry-fetch-interval-seconds</td><td>指示从eureka服务器获取注册表信息的频率（以秒为单位）</td><td>30</td></tr><tr><td>eureka.client.registry-refresh-single-vip-address</td><td>指示客户端是否只对单个VIP的注册表信息感兴趣</td><td></td></tr><tr><td>eureka.client.service-url</td><td>可用性区域映射到与eureka服务器通信的完全限定URL的列表。每个值可以是单个URL或逗号分隔的替代位置列表</td><td></td></tr><tr><td>eureka.client.use-dns-for-fetching-service-urls</td><td>指示eureka客户端是否应该使用DNS机制来获取要与之通信的eureka服务器列表。</td><td>false</td></tr><tr><td>eureka.dashboard.enabled</td><td>标志以启用Eureka仪表板</td><td>true</td></tr><tr><td>eureka.dashboard.path</td><td>到Eureka仪表板（相对于servlet路径）的路径</td><td>“/”</td></tr><tr><td>eureka.instance.a-s-g-name</td><td>获取与此实例关联的AWS自动缩放组名称。</td><td></td></tr><tr><td>eureka.instance.app-group-name</td><td>获取要在eureka中注册的应用程序组的名称</td><td></td></tr><tr><td>eureka.instance.appname</td><td>获取要在eureka注册的应用程序的名称</td><td>unknown</td></tr><tr><td>eureka.instance.data-center-info</td><td>返回此实例部署的数据中心</td><td></td></tr><tr><td>eureka.instance.health-check-url</td><td>获取此实例的绝对运行状况检查页面URL</td><td></td></tr></tbody></table><h1><span id="feign">Feign</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>feign.compression.request.mime-types</td><td>支持的MIME类型列表</td><td>[text/xml, application/xml, application/json]</td></tr><tr><td>feign.compression.request.min-request-size</td><td>最小阈值内容大小</td><td>2048</td></tr></tbody></table><h1><span id="health">health</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>health.config.enabled</td><td>标记以指示应安装配置服务器运行状况指示器</td><td>false</td></tr><tr><td>health.config.time-to-live 生成缓存结果的时间，以毫秒为单位</td><td>300000（5分钟）</td><td></td></tr></tbody></table><h1><span id="hystrix">hystrix</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>hystrix.metrics.enabled</td><td>启用Hystrix指标轮询</td><td>true</td></tr><tr><td>hystrix.metrics.polling-interval-ms</td><td>后续轮询度量之间的间隔</td><td>2000</td></tr></tbody></table><h1><span id="zuul">zuul</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>zuul.add-host-header  标识以确定代理是否转发主机头</td><td>false</td><td></td></tr><tr><td>zuul.add-proxy-headers</td><td>标识以确定代理是否添加X-Forwarded-* 标头</td><td>true</td></tr><tr><td>zuul.host.max-per-route-connections</td><td>单个路由可以使用的最大连接数</td><td>20</td></tr><tr><td>zuul.host.max-total-connections</td><td>代理可以容纳到后端的总连接数</td><td>200</td></tr><tr><td>zuul.ignore-security-headers</td><td>如果spring security在类路径上，则将SECURITY_HEADERS添加到忽略的标头</td><td>true</td></tr><tr><td>zuul.ignored-headers</td><td>HTTP标头的名称完全忽略</td><td></td></tr><tr><td>zuul.ignored-services</td><td>一组服务名称不考虑代理自动。</td><td></td></tr><tr><td>zuul.prefix</td><td>所有路由的公共前缀</td><td></td></tr><tr><td>zuul.remove-semicolon-content</td><td>标记说，可以删除超过第一个分号的路径元素</td><td></td></tr><tr><td>zuul.retryable</td><td>默认情况下是否支持重试的标志</td><td></td></tr><tr><td>zuul.routes</td><td>将路线名称映射到属性</td><td></td></tr><tr><td>zuul.securityheaders</td><td>一般预期由Spring安全性添加的标头，因此如果代理和后端使用Spring保护，则通常会重复。默认情况下，如果存在Spring安全性，并且ignoreSecurityHeaders = true，它们将被添加到忽略的标头</td><td></td></tr><tr><td>zuul.semaphore.max-semaphores  Hystrix的总信号量的最大数量</td><td>100</td><td></td></tr><tr><td>zuul.sensitive-headers</td><td>不传递到下游请求的敏感标头列表</td><td></td></tr><tr><td>zuul.servlet-path</td><td>安装Zuul作为servlet的路径</td><td>/zull</td></tr><tr><td>zuul.ssl-hostname-validation-enabled</td><td>标记以说明是否应验证ssl连接的主机名</td><td>true</td></tr><tr><td>zuul.strip-prefix</td><td>在转发之前标记是否从路径中删除前缀</td><td>true</td></tr><tr><td>zuul.trace-request-body</td><td>标记说可以跟踪请求机构</td><td></td></tr></tbody></table><h1><span id="springcloudbus">spring.cloud.bus</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>spring.cloud.bus.ack.destination-service</td><td>想要听ack的服务</td><td>null（表示所有服务）</td></tr><tr><td>spring.cloud.bus.ack.enabled</td><td>标志关闭acks</td><td>true</td></tr><tr><td>spring.cloud.bus.destination</td><td>名称Spring Cloud消息的流目的地</td><td>springCloudBus</td></tr><tr><td>spring.cloud.bus.enabled</td><td>标志表示总线已启用</td><td>true</td></tr><tr><td>spring.cloud.bus.env.enabled</td><td>标志关闭环境变化事件</td><td>true</td></tr><tr><td>spring.cloud.bus.refresh.enabled</td><td>关闭刷新事件的标志</td><td>true</td></tr><tr><td>spring.cloud.bus.trace.enabled</td><td>打开acks跟踪的标志</td><td>false</td></tr></tbody></table><h1><span id="springcloudconfig">spring.cloud.config</span></h1><table><thead><tr><th>属性名</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>spring.cloud.config.allow-override</td><td>标记以指示可以使用{@link #isSystemPropertiesOverride（）systemPropertiesOverride}。设置为false以防止用户意外更改默认值</td><td>true</td></tr><tr><td>spring.cloud.config.authorization</td><td>客户端使用的授权令牌连接到服务器</td><td></td></tr><tr><td>spring.cloud.config.discovery.enabled</td><td>标记以指示启用配置服务器发现</td><td>false</td></tr><tr><td>spring.cloud.config.discovery.service-id</td><td>服务ID来定位配置服务器</td><td>configserver</td></tr><tr><td>spring.cloud.config.enabled</td><td>标记说远程配置启用</td><td>true</td></tr><tr><td>spring.cloud.config.fail-fast</td><td>标记表示无法连接到服务器是致命的</td><td>false</td></tr><tr><td>spring.cloud.config.label</td><td>用于拉取远程配置属性的标签名称</td><td></td></tr><tr><td><a href="http://spring.cloud.config.name" target="_blank" rel="noopener">spring.cloud.config.name</a></td><td>用于获取远程属性的应用程序名称</td><td></td></tr><tr><td>spring.cloud.config.override-none</td><td>标志表示当{@link #setAllowOverride（boolean）allowOverride}为true时，外部属性应该采用最低优先级，并且不覆盖任何现有的属性源（包括本地配置文件）</td><td>false</td></tr><tr><td>spring.cloud.config.override-system-properties</td><td>标记以指示外部属性应覆盖系统属性</td><td>true</td></tr><tr><td>spring.cloud.config.password</td><td>联系远程服务器时使用的密码</td><td></td></tr><tr><td>spring.cloud.config.profile</td><td>获取远程配置时使用的默认配置文件（逗号分隔）</td><td>default</td></tr><tr><td>spring.cloud.config.retry.initial-interval</td><td>初始重试间隔（以毫秒为单位）1000</td><td></td></tr><tr><td>spring.cloud.config.retry.max-attempts</td><td>最大尝试次数</td><td>6</td></tr><tr><td>spring.cloud.config.retry.max-interval</td><td>退避的最大间隔</td><td>2000</td></tr><tr><td>spring.cloud.config.retry.multiplier</td><td>下一个间隔的乘数</td><td>1.1</td></tr><tr><td>spring.cloud.config.server.bootstrap</td><td>表示配置服务器应使用远程存储库中的属性初始化其自己的环境</td><td>false</td></tr><tr><td>spring.cloud.config.server.default-application-name</td><td>application 传入请求没有特定的默认应用程序名称</td><td>application</td></tr><tr><td>spring.cloud.config.server.default-label</td><td>传入请求没有特定标签时的默认存储库标签</td><td></td></tr><tr><td>spring.cloud.config.server.default-profile</td><td>传入请求没有特定的默认应用程序配置文件时</td><td>default</td></tr><tr><td>spring.cloud.config.server.encrypt.enabled</td><td>在发送给客户端之前启用对环境属性的解密</td><td>true</td></tr><tr><td>spring.cloud.config.server.git.force-pull</td><td>标记表示存储库应该强制拉。如果真的丢弃任何本地更改并从远程存储库获取</td><td></td></tr><tr><td>spring.cloud.config.server.git.password</td><td>使用远程存储库验证密码</td><td></td></tr><tr><td>spring.cloud.config.server.git.repos</td><td>存储库标识符映射到位置和其他属性</td><td></td></tr><tr><td>spring.cloud.config.server.git.search-paths</td><td>在本地工作副本中使用的搜索路径</td><td></td></tr><tr><td>spring.cloud.config.server.git.timeout</td><td>用于获取HTTP或SSH连接的超时（以秒为单位）</td><td>5</td></tr><tr><td>spring.cloud.config.server.git.uri</td><td>远程存储库的URI</td><td></td></tr><tr><td>spring.cloud.config.server.git.username</td><td>用于远程存储库的身份验证用户名</td><td></td></tr><tr><td>spring.cloud.config.server.native.fail-on-error</td><td>标识以确定在解密期间如何处理异常</td><td>false</td></tr><tr><td>spring.cloud.config.server.native.search-locations</td><td>搜索配置文件的位置</td><td>[]</td></tr><tr><td>spring.cloud.config.server.native.version</td><td>为本地存储库报告的版本字符串</td><td></td></tr><tr><td>spring.cloud.config.server.overrides</td><td>无条件发送给所有客户的资源的额外地图</td><td></td></tr><tr><td>spring.cloud.config.server.prefix</td><td>配置资源路径的前缀</td><td></td></tr><tr><td>spring.cloud.config.server.strip-document-from-yaml</td><td>标记为指示作为文本或集合（而不是映射）的YAML文档应以“本机”形式返回</td><td>true</td></tr><tr><td>spring.cloud.config.uri</td><td>远程服务器的URI</td><td>http：// localhost：8888</td></tr><tr><td>spring.cloud.config.username</td><td>联系远程服务器时使用的用户名</td><td></td></tr></tbody></table><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你用过不写代码就能完成一个简单模块的组件么？</title>
      <link href="/2018/10/14/%E4%BD%A0%E7%94%A8%E8%BF%87%E4%B8%8D%E5%86%99%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%83%BD%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B9%88%EF%BC%9F/"/>
      <url>/2018/10/14/%E4%BD%A0%E7%94%A8%E8%BF%87%E4%B8%8D%E5%86%99%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%83%BD%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9D%97%E7%9A%84%E7%BB%84%E4%BB%B6%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1><span id="开篇四连问">开篇四连问</span></h1><ol><li>你是否懒得写普通的增删改查方法?</li><li>你是否不喜欢代码生成插件的重复代码？</li><li>你是否渴望一个没有冗余代码的项目？</li><li>你是否渴望一行代码都不用写就能完成一个简单的模块？</li></ol><h1><span id="组件由来">组件由来</span></h1><p>作为后端程序员，相信大家都写过以下几种代码：</p><ol><li>根据主键查询</li><li>多条件分页查询</li><li>插入</li><li>根据主键修改</li><li>根据主键删除（单个或批量）</li></ol><p>抛开业务来说，这几种代码是我们项目中最最基本的代码了，每一个项目中都会出现大量的这种代码。那么你的项目中这种代码你是怎么写的呢？</p><ol><li>按照dao-service-controller的流程写？</li><li>copy一个现有的模块然后修修改改？</li><li>使用代码生成插件？</li><li>自己封装一个组件？<br><br><br><br>对于我个人来说，就是从上方四个步骤走过来的。刚刚开始学习Java的时候跟着老师的步骤从dao到service接口到实现类再到controller。等到参加工作的时候就觉得没什么大不了的了，直接copy后进行修改。工作一段时间以后觉得自己写太累了然后就开始使用代码生成插件。<br><br><br>但是使用插件一段时间以后我觉得每个项目中存在的太多太多的冗余代码了，单单进行全局搜索时一个方法名出现了几十次，如果有一个插件的代码需要修改那么就要修改几十次，稍不注意就给自己挖了个坑等等。然后呢我就在想，既然这些都是冗余方法那么我何不自己封装一个组件把这些东西都抽象出来做一个组件。以后开发时我只维护这一个组件，把剩余的精力放到业务代码上呢？</li></ol><h1><span id="我封装的什么组件">我封装的什么组件？</span></h1><blockquote><p>组件名称：syj-minicode</p></blockquote><h3><span id="当一些单表的增删改查时你只需要告诉前端来调用这几个接口就行了">当一些单表的增删改查时你只需要告诉前端来调用这几个接口就行了</span></h3><blockquote><p>下方出现的entityName为当前操作的对象名称或者数据库表名称（注意命名规范要符合驼峰命名法，例如：UserOrder或者user_order都可以） 删除接口为物理删除，逻辑删除请使用update接口</p></blockquote><ol><li>根据主键查询对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br></pre></td></tr></table></figure><ol start="2"><li>分页查询</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/page"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@RequestBody</span>： GridPageRequest</span><br></pre></td></tr></table></figure><p>这里的GridPageRequest为分页查询的条件，看一下它的组成元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询关键字Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; searchMap;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询关键字Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; likeSearchMap;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序关键字Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; orderMap;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组关键字数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] groupArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br></pre></td></tr></table></figure><p>前端查询时只需要按照查询条件组装GridPageRequest对象就可以了</p><ol start="3"><li>插入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/insert"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@RequestBody</span>： Object（待插入对象）</span><br></pre></td></tr></table></figure><ol start="4"><li>根据主键进行更新</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/update"</span>, method = RequestMethod.PUT)</span><br><span class="line"><span class="meta">@RequestBody</span>： Object（待更新对象）</span><br></pre></td></tr></table></figure><ol start="5"><li>根据主键进行删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span><br></pre></td></tr></table></figure><ol start="6"><li>批量删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/syj-api/&#123;entityName&#125;/deleteByIds"</span>, method = RequestMethod.DELETE)</span><br><span class="line"><span class="meta">@RequestBody</span>： List&lt;String&gt; ids（待删除主键列表）</span><br></pre></td></tr></table></figure><h3><span id="扩展接口">扩展接口</span></h3><ol><li><p>因为默认情况下单个对象查询、修改、删除所依据的主键的字段名使用的都是&quot;id&quot;,但是很可能有的项目使用的是userId、orderId、roleId等主键，如果你的项目符合这个条件注入下方这个bean。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IdField <span class="title">idField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; map=<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"user"</span>,<span class="string">"userId"</span>);<span class="comment">//key的名称为实体名称或数据库表名称，value为主键属性名</span></span><br><span class="line">    map.put(<span class="string">"order"</span>,<span class="string">"orderId"</span>);</span><br><span class="line">    map.put(<span class="string">"role"</span>,<span class="string">"roleId"</span>);</span><br><span class="line">    IdField idField=<span class="keyword">new</span> IdField();</span><br><span class="line">    idField.setMap(map);</span><br><span class="line">    <span class="keyword">return</span> idField;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有的项目在进行插入和更新时会加入创建人和修改人等信息。如果有此需求请按照如下方式调用</p><ol><li>插入扩展</li></ol><p>创建一个名为InsertExtend的bean并实现DefaultExtend接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertExtend</span> <span class="keyword">implements</span> <span class="title">ExtendInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">exectue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"createTime"</span>, System.currentTimeMillis());</span><br><span class="line">        map.put(<span class="string">"createBy"</span>, <span class="string">"创建人id"</span>);</span><br><span class="line">        map.put(<span class="string">"createUserName"</span>, <span class="string">"创建人名称"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>更新扩展</li></ol><p>创建一个名为UpdateExtend的bean并实现DefaultExtend接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateExtend</span> <span class="keyword">implements</span> <span class="title">ExtendInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">exectue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"updateTime"</span>, System.currentTimeMillis());</span><br><span class="line">        map.put(<span class="string">"updateBy"</span>, <span class="string">"修改人id"</span>);</span><br><span class="line">        map.put(<span class="string">"updateUserName"</span>, <span class="string">"修改人名称"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="还有没有更灵活的使用方式">还有没有更灵活的使用方式？</span></h3><blockquote><p>上方使用方式其实是直接抽象到了controller层，解决一般的需要是没问题的，但是我们是有业务逻辑的，那么存在业务逻辑的情况下如何使用呢？<br>你可以在处理完业务逻辑后在service中调用</p></blockquote><ol><li><p>初始化</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> BaseService <span class="title">getUserBaseService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServiceBeanFactory.getBean(<span class="string">"User"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>根据id查询</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; userMap=getUserBaseService().selectOneById(<span class="string">"115"</span>);</span><br><span class="line">User user=(User) BeanMapUtil.mapToBean(map,User.class);</span><br></pre></td></tr></table></figure></li><li><p>根据条件查询列表（相信你已经知道了gridPageRequest对象如何组装）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; userMaps=getUserBaseService().selectBySelective(gridPageRequest);</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map:userMaps)&#123;</span><br><span class="line">    User user=(User) BeanMapUtil.mapToBean(map,User.class);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUserBaseService().insertSelective(user);</span><br></pre></td></tr></table></figure></li><li><p>更新</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUserBaseService().updateByIdSelective(user);</span><br></pre></td></tr></table></figure></li><li><p>删除</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUserBaseService().deleteById(<span class="string">"115"</span>);</span><br></pre></td></tr></table></figure></li><li><p>批量删除</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"115"</span>);</span><br><span class="line">list.add(<span class="string">"116"</span>);</span><br><span class="line">list.add(<span class="string">"117"</span>);</span><br><span class="line">getUserBaseService().deleteByIds(list);</span><br></pre></td></tr></table></figure></li></ol><h1><span id="组件好用么">组件好用么？</span></h1><p>看完我的介绍你觉得这个组件能满足你的基本需要么，如果可以话请移步下方的GitHub链接看一下这个组件的源码写的如何以及如何使用吧。</p><p><a href="https://github.com/shiyujun" target="_blank" rel="noopener">GitHub</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 开源组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站限流算法的实现和改造</title>
      <link href="/2018/09/28/%E5%9E%8B%E7%BD%91%E7%AB%99%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%94%B9%E9%80%A0/"/>
      <url>/2018/09/28/%E5%9E%8B%E7%BD%91%E7%AB%99%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%94%B9%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近写了一个限流的插件，所以避免不了的接触到了一些限流算法。本篇文章就来分析一下这几种常见的限流算法</p></blockquote><h3><span id="分析之前">分析之前</span></h3><ol><li>依我个人的理解来说限流的话应该灵活到可以针对每一个接口来做。比如说一个类里面有5个接口，那么我的限流插件就应该能针对每一个接口就行不同的限流方案。所以呢，既然针对的每个接口所以就需要一个可以唯一标示这个接口的key（我取的是类名+方法名+入参）。</li><li>分布式限流强烈推荐使用redis+lua或者nginx+lua来实现。</li><li>这里用2个限流条件来做示例讲一下常见的限流算法：<ol><li>接口1它10秒钟最大允许访问100次</li><li>接口2它10秒钟最大允许每个人访问100次。</li></ol></li></ol><h3><span id="计数器算法">计数器算法</span></h3><blockquote><p>这个算法可以说是限流算法中最简单的一种算法了。</p></blockquote><h6><span id="核心思想">核心思想</span></h6><p>计数器算法的意思呢就是当接口在一个时间单位中被访问时，我就记下来访问次数，直到它访问的次数到达上限。</p><h6><span id="涉及变量">涉及变量</span></h6><ol><li>接口（key）</li><li>时间单位（expire）</li><li>允许访问多少次（limit）</li><li>访问次数（value）</li></ol><h6><span id="条件一">条件一</span></h6><p>当一个请求过来时，我们就会得到这个key。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(存在<span class="built_in">key</span>)&#123;</span><br><span class="line">   value++;</span><br><span class="line">   <span class="keyword">if</span>(value&gt;=<span class="built_in">limit</span>)&#123;</span><br><span class="line">   不能访问</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   添加<span class="built_in">key</span>，value为<span class="number">1</span></span><br><span class="line">       设置<span class="built_in">key</span>过期时间为expire</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6><span id="条件二">条件二</span></h6><blockquote><p>既然条件一已经实现了，那条件二会复杂么 ？<br></p></blockquote><p>相比于条件一来说就是同一个key对应了多个用户。那么我们只需要把key加上用户的信息就可以了。比如说 key_用户1、key_用户2。</p><h3><span id="漏桶算法">漏桶算法</span></h3><h6><span id="核心思想">核心思想</span></h6><p>漏桶算法的意思呢就是一个接口在一个时间单位中允许被访问次数是动态变化的（假如一分钟允许访问60次，那么从开始计时时不管有没有被访问第59秒只允许访问59次，30秒只允许30次）。为什么这样呢，因为有另外一个线程在进行递减操作</p><h6><span id="涉及变量">涉及变量</span></h6><ol><li>接口（key）</li><li>时间单位（expire）</li><li>允许访问多少次（limit）</li><li>递减间隔时间（interval）</li><li>递减步长（step）</li><li>剩余可访问次数（value）</li><li>key的访问时间（lastUpdateTime）</li><li>当前时间（nowTime）（注意nowTime的取值应为应用取得的时间而不是redis或者nginx取得的时间）</li></ol><h6><span id="条件一">条件一</span></h6><p>线程一：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(存在key)&#123;</span><br><span class="line">   <span class="keyword">value</span>--；</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">value</span>&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">   不能访问</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   添加key，设置<span class="keyword">value</span>为limit</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>线程二：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(过去interval时间)&#123;</span><br><span class="line">   所有<span class="built_in">key</span>的value-<span class="keyword">step</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6><span id="条件二">条件二</span></h6><p>参考计数器算法条件二实现。</p><h5><span id="算法升级">算法升级</span></h5><p>可以看到实现漏桶算法的话需要每隔interval时间都要另外一条线程去遍历所key的value去做递减操作，那么有没有什么办法可以省略这一步呢。答案是肯定有。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(存在key)&#123;</span><br><span class="line">   value--；</span><br><span class="line">   <span class="keyword">if</span>（（nowTime-lastUpdateTime）&gt;interval）&#123;</span><br><span class="line">   <span class="attribute">value</span>=value-（nowTime-lastUpdateTime）/interval*step;</span><br><span class="line">       <span class="attribute">lastUpdateTime</span>=nowTime;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(value&lt;=0)&#123;</span><br><span class="line">   不能访问</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   添加key，设置value为limit；</span><br><span class="line">       <span class="attribute">lastUpdateTime</span>=nowTime；</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3><span id="令牌桶算法">令牌桶算法</span></h3><h6><span id="核心思想">核心思想</span></h6><p>令牌桶算法呢，恰恰是和漏桶算法相反的一个算法，不过还是推荐你使用这个。这个算法的原理我不讲，我觉得聪明的你看了伪代码就明白了。</p><h6><span id="涉及变量">涉及变量</span></h6><ol><li>接口（key）</li><li>时间单位（expire）</li><li>允许访问多少次（limit）</li><li>递增间隔时间（interval）</li><li>递增步长（step）</li><li>当前可访问次数（value）</li><li>key的访问时间（lastUpdateTime）</li><li>当前时间（nowTime）（参照漏桶算法需要注意的点）</li></ol><h6><span id="条件一">条件一</span></h6><p>线程一：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(存在<span class="built_in">key</span>)&#123;</span><br><span class="line">   value++；</span><br><span class="line">   <span class="keyword">if</span>(value&gt;=<span class="built_in">limit</span>)&#123;</span><br><span class="line">   不能访问</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   添加<span class="built_in">key</span>，设置value为<span class="built_in">limit</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>线程二：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(过去interval时间)&#123;</span><br><span class="line">   所有<span class="built_in">key</span>的value+<span class="keyword">step</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6><span id="条件二">条件二</span></h6><p>参考计算器算法条件二实现。</p><h5><span id="算法升级">算法升级</span></h5><p>参考漏桶算法升级实现。</p><h3><span id="代码">代码</span></h3><blockquote><p>代码实现请参考我的限流框架<a href="https://github.com/shiyujun/syj-ratelimit" target="_blank" rel="noopener">https://github.com/shiyujun/syj-ratelimit</a></p></blockquote><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
            <tag> 开源组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Redis执行Lua脚本</title>
      <link href="/2018/09/21/%E4%BD%95%E4%BD%BF%E7%94%A8Redis%E6%89%A7%E8%A1%8CLua%E8%84%9A%E6%9C%AC/"/>
      <url>/2018/09/21/%E4%BD%95%E4%BD%BF%E7%94%A8Redis%E6%89%A7%E8%A1%8CLua%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3><span id="为什么要使用lua脚本">为什么要使用Lua脚本？</span></h3><p>lua脚本有很多的优点，但是对于我来说我使用它只因为它能保证原子性。为什么它能保证原子性你就使用它呢？一个简单的例子，在我们的Java代码中，一个简单的++i都不能保证原子性更别提复杂的情况了。但是使用lua在执行几百行代码的情况下都不需要考虑高并发所带来的问题。</p><h3><span id="lua基础">lua基础</span></h3><ol><li>创建lua脚本<br><br>就像创建其他的文件一样，新建一个以.lua为后缀的文件，比如说test.lua</li><li>–单行注释。–[[多行注释，多行注释–]]</li><li>打印语句</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"Hello World！"</span>)</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>常见数据类型<br><br>boolean、number、string、nil（这个就是我们平常见的null）<br>一些小的细节问题<br><br>· type() 用于查看变量的数据类型，比如print(type(10.4*3)) --&gt; number<br><br>· 判断一个变量是否为空时应该使用&quot; a&quot;==“nil&quot;而不是” a&quot;==nil<br><br>· lua中&quot;1&quot;+“1” 不是合并字符串成ab而是等于2，想要进行字符串拼接需要&quot;1&quot;…“1” --&gt;11<br><br>· lua查看字符串长度应该这样来print(#“Hello”) --&gt;5<br><br>· lua中比较不等于的时候要这样比较：a~=  b<br><br>· lua中逻辑运算符是and、or、not<br></li><li>变量</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span> = <span class="number">5</span>               <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="built_in">local</span> b = <span class="number">5</span>         <span class="comment">-- 局部变量</span></span><br></pre></td></tr></table></figure><ol start="6"><li>条件判断</li></ol><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> maxValue &gt; limit <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">value</span> = limit;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">          <span class="keyword">value</span> = maxValue;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">          <span class="keyword">value</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="7"><li>循环</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)      <span class="comment">--i是索引，且是从1开始的。v就是value了。</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="8"><li>函数</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(n)</span></span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>看完以上几条你的基础其实已经过关了，如果仅仅在操作redis上的话就已经够了。</p><h3><span id="redis执行lua脚本">redis执行lua脚本</span></h3><ol><li>在脚本中如何与redis进行交互</li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> value = redis.<span class="built_in">call</span>(<span class="string">'GET'</span>,key)<span class="comment">;</span></span><br><span class="line">redis.<span class="built_in">call</span>(<span class="string">'SET'</span>,key,value+<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">redis.<span class="built_in">call</span>(<span class="string">'DECR'</span>,key)<span class="comment">;</span></span><br><span class="line">redis.<span class="built_in">call</span>(<span class="string">'EXPIRE'</span>,key,<span class="number">10</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>你是否看明白了呢，只需要执行redis.call命令，第一个参数放入要执行的命令，后面的参数放入命令需要的参数就ok了。</p><ol start="2"><li>如何执行脚本呢</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --<span class="built_in">eval</span> redis-ratelimiter-counter.lua <span class="built_in">key</span> <span class="built_in">limit</span> , value1 value2</span><br></pre></td></tr></table></figure><p>上方这段命令的意思呢，其实就是告诉redis：请你启动客户端的时候帮我执行一下redis-ratelimiter-counter.lua这个文件，然后呢，执行文件的话有这么几个参数，key、limit 、 value1、value2<br><br><br>细心小伙伴可能会有疑问了，为什么传了4个参数只有一个逗号其他都是空格隔开呢。我们来看一下他们分别是怎么获取的就明白了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> <span class="built_in">key</span> = KEYS[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">local</span> <span class="built_in">limit</span> = KEYS[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> value1 = ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">local</span> value2 = ARGV[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>这样的话你是不是看明白了呢，逗号前后的参数是两种不同的传值方式而已。</p><ol start="3"><li>如何在Java程序中执行lua呢<br>你只需要这样的一段代码就可以调用redis执行脚本redis-ratelimiter-tokenBucket.lua了</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">   <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> counterConsume(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">String</span> limit, <span class="keyword">String</span> lrefreshInterval) &#123;</span><br><span class="line">   DefaultRedisScript&lt;Long&gt; consumeRedisScript=<span class="keyword">new</span> DefaultRedisScript();</span><br><span class="line">       consumeRedisScript.setResultType(Long.class);</span><br><span class="line">       consumeRedisScript.setScriptSource(<span class="keyword">new</span> ResourceScriptSource(<span class="keyword">new</span> ClassPathResource(<span class="string">"script/redis-ratelimiter-tokenBucket.lua"</span>)));<span class="comment">//加载lua脚本文件</span></span><br><span class="line">       List&lt;<span class="keyword">Object</span>&gt; keyList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       keyList.<span class="built_in">add</span>(<span class="built_in">key</span>);<span class="comment">//通过KEYS[1]取值</span></span><br><span class="line">       keyList.<span class="built_in">add</span>(limit);<span class="comment">//通过KEYS[2]取值</span></span><br><span class="line">       List&lt;<span class="keyword">Object</span>&gt; argvList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       argvList.<span class="built_in">add</span>(lrefreshInterval);<span class="comment">//通过ARGV[1]取值</span></span><br><span class="line">       <span class="keyword">String</span> result=redisTemplate.execute(redisScript,keyList,argvList).toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看到这里你对lua还有什么疑问么，感兴趣的话来看一下我是如何使用的吧：<a href="https://github.com/shiyujun/syj-ratelimit" target="_blank" rel="noopener">https://github.com/shiyujun/syj-ratelimit</a></p><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何把自定义注解应用到生产的</title>
      <link href="/2018/09/20/%E6%98%AF%E5%A6%82%E4%BD%95%E6%8A%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%BA%94%E7%94%A8%E5%88%B0%E7%94%9F%E4%BA%A7%E7%9A%84/"/>
      <url>/2018/09/20/%E6%98%AF%E5%A6%82%E4%BD%95%E6%8A%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%BA%94%E7%94%A8%E5%88%B0%E7%94%9F%E4%BA%A7%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>最近自己写了一个关于网关限流的插件，为了实现限流时的灵活性所以选择了使用自定义注解，但是在百度了很多篇文章时发现大部分的答案是使用反射，一部分是使用注解处理器。个人感觉这样实现都不是很合适，感兴趣的兄弟可以看一下我是如何使用的。</p><h3><span id="1-如何自定义注解">1. 如何自定义注解</span></h3><p>这个其实网络上的文章太多太多了，我这里就简单的说一下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)<span class="comment">//ElementType.TYPE表示可以用在类上，ElementType.METHOD表示可以用在方法上</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//RetentionPolicy.RUNTIME运行事保留RetentionPolicy.CLASS编译时保留</span></span><br><span class="line"><span class="variable">@Documented</span><span class="comment">//会被 javadoc 之类的工具处理</span></span><br><span class="line"><span class="variable">@Inherited</span><span class="comment">//表示可以被继承</span></span><br><span class="line">public <span class="variable">@interface</span> ClassRateLimit &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2-通过切面的方式处理注解">2. 通过切面的方式处理注解</span></h3><p>我们定义这样的一个切面来对注解标注的方法或者类来进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassAnnotationAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@within(classRateLimit)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationPointcut</span><span class="params">(ClassRateLimit classRateLimit)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"@within(classRateLimit)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint, ClassRateLimit classRateLimit)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//classRateLimit 通过这个对象获取注解中的属性</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();<span class="comment">//通过这个对象取得本次请求的方法信息</span></span><br><span class="line">            </span><br><span class="line">            Class[] clazz=joinPoint.getClass();<span class="comment">//通过这个对象取得本次请求的类信息</span></span><br><span class="line">             ServletRequestAttributes requestAttributes = (ServletRequestAttributes) <span class="comment">//通过这个对象取得本次请求的request和response信息</span></span><br><span class="line">             RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line">        HttpServletResponse response = requestAttributes.getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="3-如何应用于实践呢">3. 如何应用于实践呢</span></h3><p>在1和2的两个步骤中，我们自定义了一个注解，也给他写了一个处理方法，如果是我们应用于自己的项目其实已经是没问题的，只要让ClassAnnotationAspect类被Spring管理就行了。<br><br>但是还有一种场景时，我们的这个注解作为一个jar包，提供给别人用，别人的Spring又不会管理我们jar包里的bean。这个时候怎么办呢？<br><br><br>这时我们就用到了另一个注解@Import，使用这个注解可以引入一个配置类，当我们作为一个第三方jar包存在时想要别人的Spring可以管理到我们的bean的时候，我们可以提供一个统一的配置类，在这个配置类中进行扫包，注册bean等一系列操作。然后别人只需要引入我们的配置类就ok了。<br><br>比如说，我的很多bean，包括刚才说的ClassAnnotationAspect类都在在cn.org.zhixiang包和它的子包下，那么我就可以新建一个配置类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(basePackages=<span class="string">"cn.org.zhixiang"</span>)</span><br><span class="line">public class EnableSyjRateLimitConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当别人要使用我提供的服务时只需要这样引入即可</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Import</span>(EnableSyjRateLimitConfiguration.class)</span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class SyjRateLimitConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="4看看别人是怎么实现的">4.看看别人是怎么实现的</span></h3><p>其实有些东西在文字中可能体现的不是那么完美，那么就请看一下我是在代码中如何用的吧<br><a href="https://github.com/shiyujun/syj-ratelimit" target="_blank" rel="noopener">https://github.com/shiyujun/syj-ratelimit</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将自己的jar包发布到mavan中央仓库</title>
      <link href="/2018/09/20/%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84jar%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0mavan%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2018/09/20/%E5%A6%82%E4%BD%95%E5%B0%86%E8%87%AA%E5%B7%B1%E7%9A%84jar%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0mavan%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近自己写了一个关于网关限流的插件，然后想着肯定会有很多兄弟也需要使用到，所以就想着把jar包上传到Maven的中央仓库上让大家可以更方便的使用</p></blockquote><p>现在咱们来看一下这个流程是什么样的呢。</p><ol><li>首先呢，你得去这个网站去注册一个账号<a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Dashboard.jspa</a></li><li>账号注册以后登录网站，点击上方导航条最显眼的那个create按钮，然后按照下图标示的进行填写信息<br><img src="/2018/09/20/如何将自己的jar包发布到mavan中央仓库/1.png" alt="1"><br>这里有一个小小的坑就是如果你没有域名的话groupId可以写com.github.你的github名或者io.github.你的github名。如果你写域名的话他会让你确认域名是不是你的。大家可以按照我的办法在你的网站做一个简单的转发，转发的地址就是你要上传的项目的github地址。<br><img src="/2018/09/20/如何将自己的jar包发布到mavan中央仓库/2.png" alt="1"><br>另外需要注意的是因为人家上班时间是我们的晚上，所以说如果不想等的时间长的话可以晚上操作。</li><li>当你看到你的项目状态变成了RESOLVED时并且有一条评论是这样的时候你就已经成功了一半了。<br><img src="/2018/09/20/如何将自己的jar包发布到mavan中央仓库/3.png" alt="1"></li><li>接下来呢，去这个网站<a href="https://www.gpg4win.org/" target="_blank" rel="noopener">https://www.gpg4win.org/</a>下载一个gpg</li><li>在你的Maven的seeting.xml中增加以下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>Sonatype 账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>Sonatype 密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>Sonatype 账号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>Sonatype 密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目的pom文件中增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>syj-ratelimit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>a project about ratelimit<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://shiyujun.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>The ApacheSoftware License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>master<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/shiyujun/syj-ratelimit.git<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:https://github.com/shiyujun/syj-ratelimit.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:https://github.com/shiyujun/syj-ratelimit.git<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ShiYuJun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>zxservice@shiyujun.cn<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在项目中执行命令：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg <span class="comment">--gen-key</span></span><br></pre></td></tr></table></figure><p>在执行命令的时候会让你输入一些信息，按照提示输入就行。记住其中的passphrase就行了。</p><ol start="7"><li>然后执行命令</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -P sonatype-oss-<span class="built_in">release</span> -Darguments=<span class="string">"gpg.passphrase=刚才让你记住的东西"</span></span><br></pre></td></tr></table></figure><ol start="8"><li><p>这个时候你的jar包已经上传到了maven的一个仓库，不过别人还不能用。</p></li><li><p>这个时候你应该把你刚才用来加密的密钥上传到一个公共的地方供别人来校验<br><br> 执行命令 gpg --list-keys<br>然后你会看到有一个pub的值，大概是这样的CE2DF6AC<br>然后执行下方命令</p></li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg <span class="params">--keyserver</span> hkp:<span class="string">//keyserver.ubuntu.com</span><span class="function">:11371</span> <span class="params">--send-keys</span> pub CE2DF6AC</span><br></pre></td></tr></table></figure><ol start="10"><li>访问地址<a href="https://oss.sonatype.org/#stagingRepositories" target="_blank" rel="noopener">https://oss.sonatype.org/#stagingRepositories</a>,用你一开始的时候注册的用户名登录。在最下方应该能找到你刚刚提交的jar包。</li><li>选择之后先close，close之后如果没问题的话接着点击release。当然，如果有问题的话可能就是你上传过程中出现了什么问题，如果解决不了欢迎在博客下方提问。</li><li>此时在访问<a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Dashboard.jspa</a>会发现多了一条评论<br><img src="/2018/09/20/如何将自己的jar包发布到mavan中央仓库/4.png" alt="1"><br><br><br>现在大功告成。全世界的开发者都可以在maven中引入你的jar包了<br><br></li></ol><p>欢迎来我的github看一下我的第一个开源项目写的如何<a href="https://github.com/shiyujun/syj-ratelimit" target="_blank" rel="noopener">https://github.com/shiyujun/syj-ratelimit</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot条件注解@Conditional</title>
      <link href="/2018/09/20/SpringBoot%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3@Conditional/"/>
      <url>/2018/09/20/SpringBoot%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3@Conditional/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近项目中使用到了关于@Conditional注解的一些特性，故写此文记录一下</p></blockquote><h3><span id="conditional是啥呀">@Conditional是啥呀？</span></h3><p>@Conditional注解是个什么东西呢，它可以根据代码中设置的条件装载不同的bean，比如说当一个接口有两个实现类时，我们要把这个接口交给Spring管理时通常会只选择实现其中一个实现类，这个时候我们总不能使用if-else吧，所以这个@Conditional的注解就出现了。</p><h3><span id="我怎么用它呢">我怎么用它呢？</span></h3><blockquote><p>在SpringBoot中，@Conditional注解并不是孤军奋斗，它们是一个家族，我们来看一下它们其中的几个成员，又都是怎么用的</p></blockquote><ol><li>@ConditionalOnBean<br>示例代码</li></ol><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@Bean</span></span><br><span class="line"><span class="keyword">@ConditionalOnBean</span>(RedisConnectionFactory.<span class="keyword">class</span>)</span><br><span class="line">   <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) &#123;</span><br><span class="line">       RedisTemplate&lt;Object, Object&gt; <span class="keyword">template</span> = <span class="keyword">new</span> RedisTemplate&lt;Object, Object&gt;();</span><br><span class="line">       <span class="keyword">template</span>.setConnectionFactory(connectionFactory);</span><br><span class="line">       <span class="keyword">template</span>.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">       <span class="keyword">template</span>.afterPropertiesSet();</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这个方法上加了@ConditionalOnBean注解，注解里的属性是RedisConnectionFactory。它的意思呢，就是说如果你配置了redis的相关配置信息那么我就实例化RedisTemplate供你进行操作，如果你没有配置redis的相关配置那么我就不实例化（毕竟没有配置实例化也报错不是）<br><br>不仅如此，你也可以这样玩：<br><br>根据bean的名字@ConditionalOnMissingBean(name = “connectionFactory”)或者<br>@ConditionalOnMissingBean(annotation = EnableSyjRateLimit.class)根据注解等等骚操作都可以</p><ol start="2"><li>@ConditionalOnMissingBean<br>这个仅仅比1多了个Missing，啥意思呢，见名知意，就是不存在某个bean的时候实例化。</li><li>@ConditionalOnClass（存在某个类时，才会实例化一个Bean）</li><li>@ConditionalOnMissingClass（不存在某个类时，才会实例化一个Bean）</li><li>@ConditionalOnProperty(prefix = “syj”, name = “algorithm”, havingValue = “token”)<br>这个就稍微复杂了一点，它的意思呢就是当存在配置文件中以syj为前缀的属性，属性名称为algorithm，然后它的值为token时才会实例化一个类。<br><br>而且这个还有一个比较好的属性<br>@ConditionalOnProperty(prefix = “syj”, name = “algorithm”, havingValue = “counter”, matchIfMissing = true)<br>matchIfMissing的意思呢就是说如果所有的都不满足的话就默认实现，不管这个属性syj.algorithm是不是等于counter</li><li>@ConditionalOnJava(如果是Java应用)</li><li>@ConditionalOnWebApplication(如果是Web应用)<br>其实说到这@Conditional家族的成员我们只讲了其中的一小部分<br>它的家族成员大概有这么多：<br><img src="/2018/09/20/SpringBoot条件注解@Conditional/1.png" alt="图片"><br>想要深入了解的童鞋可以参考一下这个包<br>org.springframework.boot.autoconfigure.condition</li></ol><h3><span id="虽然上边你讲了很多但是我还是不满意">虽然上边你讲了很多，但是我还是不满意</span></h3><blockquote><p>为什么不满意呢，其实原因有很多，比如说你没有用过SpringBoot，在比如说你想自定义。那这个时候怎么办呢，那咱们就来自定义一个。</p></blockquote><ol><li>首先自定义一个规则类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span>    </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">    <span class="comment">//在这里写你的逻辑，比如说你想a&gt;0时实例化类A，a&lt;0时不实现</span></span><br><span class="line">        <span class="keyword">return</span> a&gt;<span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后你就可以用了</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Bean</span></span><br><span class="line">    <span class="variable">@Conditional</span>(MyCondition.class)</span><br><span class="line">    public A a()&#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">A</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3><span id="看看别人怎么用的">看看别人怎么用的</span></h3><p>相信看完上方的几步你已经学会了如何跟@Conditional家族打招呼了。那么你愿意来看一下我是怎么用的么？<br><a href="https://github.com/shiyujun/syj-ratelimit" target="_blank" rel="noopener">https://github.com/shiyujun/syj-ratelimit</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA远程Debug</title>
      <link href="/2018/08/19/IDEA%E8%BF%9C%E7%A8%8BDebug/"/>
      <url>/2018/08/19/IDEA%E8%BF%9C%E7%A8%8BDebug/</url>
      
        <content type="html"><![CDATA[<blockquote><p>进行远程debug是我们排查线上bug的一个最常用的工具，本篇博文就简单介绍一下如何使用IDEA来进行远程debug</p></blockquote><h3><span id="1修改tomcat配置文件">1.修改Tomcat配置文件</span></h3><p>修改bin目录下的catalina.sh文件，在文件的第一行添加下面代码<br><code>JAVA_OPTS=&quot;-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=18088,server=y,suspend=n&quot;</code><br>上方的address属性代表了你要开启的debug端口，可以按需修改。<br><br>启动Tomcat</p><h3><span id="2本地连接远程端口">2.本地连接远程端口</span></h3><p>按下图所示进行操作<br><img src="/2018/08/19/IDEA远程Debug/1.png" alt="图片"><br><img src="/2018/08/19/IDEA远程Debug/2.png" alt="图片"><br><img src="/2018/08/19/IDEA远程Debug/3.png" alt="图片"><br><img src="/2018/08/19/IDEA远程Debug/4.png" alt="图片"><br><img src="/2018/08/19/IDEA远程Debug/5.png" alt="图片"></p><h3><span id="3操作">3.操作</span></h3><p>当本地代码与服务器代码版本一致的情况下，当远程代码被调用时会触发本地断点，我们就可以愉快的进行debug了。</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Java如何接入招行一网通支付功能</title>
      <link href="/2018/08/19/%E8%81%8A%E4%B8%80%E8%81%8AJava%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E6%8B%9B%E8%A1%8C%E4%B8%80%E7%BD%91%E9%80%9A%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/08/19/%E8%81%8A%E4%B8%80%E8%81%8AJava%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E6%8B%9B%E8%A1%8C%E4%B8%80%E7%BD%91%E9%80%9A%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3><span id="1前提条件">1.前提条件</span></h3><p>相比较于支付宝和微信的支付功能接入这一块，银行相对来说更加严格，比如说支付宝，在你签约之前可以进行一些测试。但是银行来说就不是这样了，如果您现在要进行招行的支付功能开发的话，请务必先让相关人员去进行签约</p><h3><span id="2-测试开发必须条件">2. 测试开发必须条件</span></h3><p>进行测试开发之前有几个比较重要的东西是不可避免的，我们来看一下都是有什么：</p><ol><li><p>商户号、商户分行号以及商户秘钥（具体明细请参考：<a href="http://link.cmbchina.com/open2/DOC/ToTest6.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/DOC/ToTest6.aspx</a>）</p></li><li><p>验证码查询地址（测试环境招行所发的验证码都可以在此网站查询到<a href="http://121.15.180.69/GetMsgVerifyCode/Default.aspx" target="_blank" rel="noopener">http://121.15.180.69/GetMsgVerifyCode/Default.aspx</a>）</p></li><li><p>API文档（进行签约时招行一般会给我们一份文档，但是此文档也是很有参考价值的<a href="http://link.cmbchina.com/open2/API/APIdefault.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/APIdefault.aspx</a>）</p></li></ol><h3><span id="3测试开发">3.测试开发</span></h3><blockquote><p>咱们这次一个完整的支付流程为例</p></blockquote><p>进入正式的开发之前咱们先来看一下一个图，这个图呢，简单介绍了一下这个支付的流程，并没有考虑失败的因素。仅供大家参考！</p><p><img src="/2018/08/19/聊一聊Java如何接入招行一网通支付功能/1.png" alt="图片"></p><p>接下来呢，我们就按照上图所示的流程进行开发。</p><ol><li><p>第一个相信不用费心，APP请求时携带一个订单号就行。</p></li><li><p>我们根据订单号查询出此订单关联的订单金额及用户等信息，然后呢参考此链接（<a href="http://link.cmbchina.com/open2/API/PWDPayAPI4.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/PWDPayAPI4.aspx</a>）的请求报文要求的必填字段一一组合起来。<br><br>这里组合的时候有几个小小的问题，因为招行对我们发送的请求报文是有要求的：测试环境回调地址不支持域名，只能是纯IP地址，且端口只能为80、443、8081其中的一个。另外请求报文中的reqData字段里的内容要进行排序。最后，排序完的报文要进行签名。详细要求请看此链接：<a href="http://link.cmbchina.com/open2/API/SigAndCheck2.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/SigAndCheck2.aspx</a><br><br><br>这里进行排序的话我可以提供一种全新的思路，我们可以把待排序的字段使用一个dto封装起来类似于下面这种：</p></li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//客户协议号。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> agrNo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//金额</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> amount;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//银行订单流水号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> bankSerialNo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 商户分行号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> branchNo;</span><br></pre></td></tr></table></figure><p>这样的dto转换成json串的时候是已经有序了的。</p><p>对参数进行签名的话怎可以参考招行为我们提供的代码示例。<a href="http://link.cmbchina.com/open2/API/Appendix16.aspx#jvch2" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/Appendix16.aspx#jvch2</a><br>需要注意的就是上方我们dto转成的是一个json串，但是签名要求的待签名的字符串格式是这样的。agrNo=xxx&amp;amount=88.88&amp;bankSerialNo=1234567&amp;branchNo=xxx</p><p>排序以及签名完毕以后就可以把这个发送给APP了，我们发送给APP的就是下方这个形式的json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>:<span class="string">"1.0"</span>,</span><br><span class="line">  <span class="attr">"charset"</span>:<span class="string">"UTF-8"</span>,</span><br><span class="line">  <span class="attr">"sign"</span>:<span class="string">"见签名处理章节"</span>,</span><br><span class="line">  <span class="attr">"signType"</span>:<span class="string">"SHA-256"</span>,</span><br><span class="line">  <span class="attr">"reqData"</span>:&#123;</span><br><span class="line">       <span class="attr">"dateTime"</span>:<span class="string">"20161209112230"</span>,</span><br><span class="line">       <span class="attr">"branchNo"</span>:<span class="string">"0755"</span>,</span><br><span class="line">       <span class="attr">"merchantNo"</span>:<span class="string">"000054"</span>,</span><br><span class="line">       <span class="attr">"date"</span>:<span class="string">"20161209"</span>,</span><br><span class="line">       <span class="attr">"orderNo"</span>:<span class="string">"9999000001"</span>,</span><br><span class="line">       <span class="attr">"amount"</span>:<span class="string">"0.01"</span>,</span><br><span class="line">       <span class="attr">"expireTimeSpan"</span>:<span class="string">"30"</span>,</span><br><span class="line">       <span class="attr">"payNoticeUrl"</span>:<span class="string">"http://www.merchant.com/path/payNotice.do"</span>,</span><br><span class="line">       <span class="attr">"payNoticePara"</span>:<span class="string">"12345678|ABCDEFG|HIJKLM"</span>,</span><br><span class="line">       <span class="attr">"returnUrl"</span>:<span class="string">"http://www.merchant.com/path/return.do"</span>,</span><br><span class="line">       <span class="attr">"clientIP"</span>:<span class="string">"99.12.38.165"</span>,</span><br><span class="line">       <span class="attr">"cardType"</span>:<span class="string">"A"</span>,</span><br><span class="line">       <span class="attr">"agrNo"</span>:<span class="string">"12345678901234567890"</span>,</span><br><span class="line">       <span class="attr">"merchantSerialNo"</span>:<span class="string">"2016062014308888"</span>,</span><br><span class="line">       <span class="attr">"userID"</span>:<span class="string">"2016062388888"</span></span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>APP收到服务器返回的请求报文，就可以组成如下表单向招行发送请求：</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">form</span> action=<span class="string">"http://121.15.180.66:801/NetPayment/BaseHttp.dll?MB_EUserPay"</span> method=<span class="string">"post"</span> &gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> type=<span class="string">"hidden"</span> name=<span class="string">"jsonRequestData"</span> value=<span class="string">'服务端返回的请求报文'</span> /&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"submit"</span> &gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>这一块呢，也有一个需要注意的地方，因为有的时候我们服务端开发的时候可能APP还没有时间，如果我们每次都让人家帮忙也挺浪费时间的。这里也有一个快速测试的好办法。我们可以把上方的代码拿着自己建一个HTML文件，发送到自己手机上，然后使用手机浏览器打开其实也是可以的。</p><ol start="4"><li><p>此时招行就会返回一个统一的支付页面</p></li><li><p>在这我们填入签约时招行给我们的测试账号等信息，账号支付使用的验证码请参考文章刚开始我们所说的网址</p></li><li><p>假设支付成功，那么招行就会回调我们请求参数所填的回调地址，这里其实是有两个回调地址的，一个是签约成功的回调，一个是支付成功的回调。<br><br><br>关于这些回调的问题一般我们会有两种方式解决，1呢是内网穿透，2呢就是远程Debug，因为招行的测试回调地址只能是ip所以这里我们就是要第二种方式，不熟悉远程Debug的同学可以参考我的另一篇博文<a href="http://shiyujun.cn/2018/08/19/IDEA%E8%BF%9C%E7%A8%8BDebug/">IDEA远程Debug</a><br><br><br>我们就拿支付成功的回调来说。<br>招行会把参数放到一个jsonRequestData的属性里。我们可以通过以下方式来取得：<br><code>JSONObject jsonRequestData=JSONObject.parseObject(request.getParameter(&quot;jsonRequestData&quot;));</code><br>这个json里面的东西我们可以参考一下这个链接<a href="http://link.cmbchina.com/open2/API/PayRltAPI6.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/PayRltAPI6.aspx</a><br>有了这些东西我们就可以准确的知道此次支付的一些相关信息。<br><br>不过呢，这样有个问题呀，这东西要是别人伪造的怎么办呀。所以呢，这里还一个验签的过程，验证此次回调到底是不是招行发来的。<br><br>这个验签还牵扯到一个问题，那就是验签需要招行的公钥，而招行的公钥是会定期更新的，所以我们可以做一个定时任务定期去请求招行的公钥（关于定时任务的相关可以参考我的这篇博客：<a href="http://shiyujun.cn/2018/08/16/ava%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Java定时任务解决方案</a>）<br><br>至于怎么去查询请参考此链接<a href="http://link.cmbchina.com/open2/API/QueryAPI3.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/QueryAPI3.aspx</a>,使用我们上方所说的如何排序请求参数，如何进行签名。不过这个只需要在服务端请求就可以了，至于在服务端如何发送请求大家可以使用一下方式：</p></li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> doPost(<span class="keyword">String</span> jsonParam, <span class="keyword">String</span> url, <span class="keyword">String</span> charset) &#123;</span><br><span class="line">       OutputStreamWriter out = <span class="literal">null</span>;</span><br><span class="line">       BufferedReader <span class="keyword">in</span> = <span class="literal">null</span>;</span><br><span class="line">       StringBuffer result = <span class="keyword">new</span> <span class="type">StringBuffer</span>();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           URL httpUrl = <span class="keyword">new</span> <span class="type">URL</span>(url);</span><br><span class="line">           HttpURLConnection urlCon = (HttpURLConnection) httpUrl.openConnection();</span><br><span class="line">           urlCon.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">           urlCon.setRequestProperty(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">           urlCon.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">           urlCon.setDoInput(<span class="literal">true</span>);</span><br><span class="line">           urlCon.setReadTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">           out = <span class="keyword">new</span> <span class="type">OutputStreamWriter</span>(urlCon.getOutputStream(), charset);</span><br><span class="line">           out.write(<span class="string">"jsonRequestData="</span> + jsonParam);</span><br><span class="line">           log.info(<span class="string">"the request to cmb jsonRequestData is :&#123;&#125;"</span>,jsonParam);</span><br><span class="line">           out.flush();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">in</span> = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(urlCon.getInputStream(), charset));</span><br><span class="line">           <span class="keyword">String</span> str = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">while</span> ((str = <span class="keyword">in</span>.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">               result.append(str);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                   out.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">in</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">in</span>.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><br>既然公钥有了，我们就可以进行验签了。<br>具体验签细节可参看此链接:<a href="http://link.cmbchina.com/open2/API/Appendix16.aspx" target="_blank" rel="noopener">http://link.cmbchina.com/open2/API/Appendix16.aspx</a>。<br><br>如果验签通过的情况下我们就可以happy进行各种操作了。<br><br>不过呢，还有一点。记得给招行返回一个收到的信息<br>`<br>response.setStatus(HttpStatus.SC_OK);</p><p>`<br>你要是不告诉人家你收到了，他是会在间隔一段时间后再次发送通知，直到10个以后。</p><ol start="7"><li>这个大流程终于走到这了，这个时候你是使用APP轮训，或者向APP推送告知支付完成的信息就是看你需求了。</li></ol><h3><span id="结语">结语</span></h3><p>关于招行的支付功能是我上周刚刚亲手撸出来的代码，我想能踩的坑我基本上已经踩过了，如果大家在开发过程中遇到什么问题的话都可以来我的网站，我们一起交流讨论：<a href="http://shiyujun.cn">石玉军的个人博客</a></p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中使用lombok插件</title>
      <link href="/2018/08/16/IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8lombok%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/08/16/IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8lombok%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2><span id="lombok是什么">Lombok是什么？</span></h2><p>lombok是一个可以通过简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 Java 代码的工具，简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立get、set、构造方法、log、toString、hashCode、equals等等，尤其是一个类有几十个属性时，那个长长的get、set方法真的是惨不忍睹。lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p><h2><span id="1下载插件">1.下载插件</span></h2><p>在IDEA中第一次使用的时候是需要去下载一个插件的，下载步骤为：</p><p>File–&gt;Setting–&gt;Plugins–&gt;Browse repositories–&gt;搜索框输入lombok–&gt;Install。<br><img src="/2018/08/16/IDEA中使用lombok插件/1.png" alt="图片"></p><h2><span id="2引用依赖">2.引用依赖</span></h2><p>最新的lombok依赖为1.18.2，我们在pom文件中引入即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="使用">使用</span></h3><p>我所常用的注解其实只有两个，一个是@Data，一个是@Slf4j。<br>下面是我在一个哥们的博客上拷贝的一段比较详细的介绍，大家可以参考一下。<a href="https://blog.csdn.net/qq_40081976/article/details/79139565" target="_blank" rel="noopener">原文链接</a></p><ul><li><p>@Data：注解在类上，相当于同时使用了@ToString、@EqualsAndHashCode、@Getter、@Setter和@RequiredArgsConstrutor这些注解，对于POJO类十分有用</p></li><li><p>val：用在局部变量前面，相当于将变量声明为final</p></li><li><p>@NonNull：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出NPE（NullPointerException）</p></li><li><p>@Cleanup：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码来关闭流</p></li><li><p>@Getter/@Setter：用在属性上，再也不用自己手写setter和getter方法了，还可以指定访问范围</p></li><li><p>@ToString：用在类上，可以自动覆写toString方法，当然还可以加其他参数，例如@ToString(exclude=”id”)排除id属性，或者@ToString(callSuper=true, includeFieldNames=true)调用父类的toString方法，包含所有属性</p></li><li><p>@EqualsAndHashCode：用在类上，自动生成equals方法和hashCode方法</p></li><li><p>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有@NonNull属性作为参数的构造函数，如果指定staticName = “of”参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多</p></li><li><p>@Value：用在类上，是@Data的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法</p></li><li><p>@Builder：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用Person.builder().name(“Adam Savage”).city(“San Francisco”).job(“Mythbusters”).job(“Unchained Reaction”).build();更多说明参考Builder</p></li><li><p>@SneakyThrows：自动抛受检异常，而无需显式在方法上使用throws语句</p></li><li><p>@Synchronized：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性$lock或$LOCK，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误</p></li><li><p>@Getter(lazy=true)：可以替代经典的Double Check Lock样板代码</p></li><li><p>@Log：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类</p></li><li><p>@CommonsLog Creates log = org.apache.commons.logging.LogFactory.getLog(LogExample.class);</p></li><li><p>@Log Creates log = java.util.logging.Logger.getLogger(LogExample.class.getName());</p></li><li><p>@Log4j Creates log = org.apache.log4j.Logger.getLogger(LogExample.class);</p></li><li><p>@Log4j2 Creates log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</p></li><li><p>@Slf4j Creates log = org.slf4j.LoggerFactory.getLogger(LogExample.class);</p></li><li><p>@XSlf4j Creates log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</p></li></ul><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java类加载SpringBoot、SpringCloud配置文件</title>
      <link href="/2018/08/16/%E7%94%A8Java%E7%B1%BB%E5%8A%A0%E8%BD%BDSpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/16/%E7%94%A8Java%E7%B1%BB%E5%8A%A0%E8%BD%BDSpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们都知道平常在使用SpringBoot和SpringCloud的时候，如果需要加载一两个配置文件的话我们通常使用@Value(&quot;${属性名称}&quot;)注解去加载。但是如果配置文件属性特别多的时候使用这种方式就显得特别的不友好了。</p></blockquote><p>比如说，我们要加载下方这个名为application.yml的配置文件。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">kafka:</span></span><br><span class="line">  brokerAddress: 110.35.113.62:9092,123.27.143.72:9095,180.17.133.52:9096</span><br><span class="line"></span><br><span class="line">  <span class="attribute">smsTopic</span>: testTopic</span><br><span class="line">  <span class="attribute">smsCosumeGroup</span>: testTopicGroup</span><br><span class="line"></span><br><span class="line">  <span class="attribute">timerTaskTopic</span>: timerTopic</span><br><span class="line">  <span class="attribute">timerTaskGroup</span>: timerGroup</span><br><span class="line"></span><br><span class="line">  <span class="attribute">jvmNumbers</span>: 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">security:</span></span><br><span class="line">       authentication:</span><br><span class="line">          <span class="attribute">jwt:</span></span><br><span class="line">              secret: 0550224055e1848081dba46d8ad325f503fa141b</span><br><span class="line">              <span class="attribute">tokenValidityInSeconds</span>: 86400</span><br></pre></td></tr></table></figure><p>此时我们有两种方式来简化这个加载方式</p><h3><span id="1">1</span></h3><p>这种方式呢，是同过层层嵌套的方式一层一层的按照配置文件属性的方式来进行注入的。大家只要把这个类跟上方提供的配置文件进行对比就会明白它的方式了。（注意，下方的所有属性因为篇幅问题没有增加get、set方法，实际使用过程中请自行添加）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = <span class="string">"application"</span>, ignoreUnknownFields = <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationProperties1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final Security security = <span class="keyword">new</span> <span class="type">Security</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final Kafka kafka = <span class="keyword">new</span> <span class="type">Kafka</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Kafka</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> brokerAddress;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> smsTopic;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> smsCosumeGroup;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> timerTaskTopic;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> timerTaskGroup;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">String</span> jvmNumbers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Security</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> final Authentication authentication = <span class="keyword">new</span> <span class="type">Authentication</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Authentication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> final Jwt jwt = <span class="keyword">new</span> <span class="type">Jwt</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Jwt</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">String</span> secret;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">private</span> long tokenValidityInSeconds;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="2">2</span></h3><p>这种方式就是以指定的配置前缀为依据去取配置（同上没有写get、set方法）</p><p>例如：kafka的配置可以这样来</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"kafka"</span>,ignoreUnknownFields = false)</span><br><span class="line"><span class="variable">@PropertySource</span>(value = &#123; <span class="string">"classpath:application.yml"</span> &#125;,ignoreResourceNotFound=false)</span><br><span class="line">public class ApplicationProperties &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">brokerAddress</span>;</span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">smsTopic</span>;</span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">smsCosumeGroup</span>;</span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">timerTaskTopic</span>;</span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">timerTaskGroup</span>;</span><br><span class="line">        <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">jvmNumbers</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Security的配置这样来</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"security.authentication.jwt"</span>,ignoreUnknownFields = false)</span><br><span class="line"><span class="variable">@PropertySource</span>(value = &#123; <span class="string">"classpath:application.yml"</span> &#125;,ignoreResourceNotFound=false)</span><br><span class="line">public class ApplicationProperties &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">long</span> <span class="selector-tag">tokenValidityInSeconds</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="补充">补充</span></h3><p>大家可能会注意到我上方的几个类中都没有写get和set方法，因为那个东西其实所占的篇幅实在是太长了。那么，有什么办法可以补救么，其实是有办法的，一个注解就可以全搞定哟。</p><p>什么？你不信，不信来看看呀：<a href="http://shiyujun.cn/2018/08/16/IDEA%E4%B8%AD%E4%BD%BF%E7%94%A8lombok%E6%8F%92%E4%BB%B6/">IDEA中使用lombok插件</a></p><h3><span id="结语">结语</span></h3><p>怎么样，学会这个以后Leader还会担心你的代码臃肿么。</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目启动时执行指定方法的几种方式</title>
      <link href="/2018/08/16/va%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%96%B9%E6%B3%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/08/16/va%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%96%B9%E6%B3%95%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多时候我们都会碰到需要在程序启动时去执行的方法，比如说去读取某个配置，预加载缓存，定时任务的初始化等。这里给出几种解决方案供大家参考。</p></blockquote><h2><span id="1-使用postconstruct注解">1. 使用@PostConstruct注解</span></h2><blockquote><p>这个注解呢，可以在Spring加载这个类的时候执行一次。来看一下下方代码。</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"我最先执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *我第二个执行</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        @Autowired</span><br><span class="line">        <span class="keyword">private</span> T t;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *我第三个个执行</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    @PostConstruct</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//假装有代码</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上方就是@PostConstruct注解的使用方法了，同时也表示了此类被加载时的执行顺序。</p><h2><span id="2-commandlinerunner接口">2. CommandLineRunner接口</span></h2><blockquote><p>使用CommandLineRunner接口类似于Main方法启动，可以接受一个字符串数组的命令行参数，来看一下实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//假装有代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="3-applicationrunner-接口">3. ApplicationRunner 接口</span></h2><blockquote><p>此种方式与实现CommandLineRunner接口的区别就是他的参数是ApplicationArguments</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">@Order</span>(value = <span class="number">1</span>)</span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line">public class MyApplicationRunner implements ApplicationRunner&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void run(ApplicationArguments args) throws Exception&#123;</span><br><span class="line">        <span class="comment">//假装有代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，此类相比较于第二种方式还增加一个@Order注解，这个注解其实第二种方式也是能加的。</p><p>它的作用就是控制类的加载顺序，这个顺序是从小到大的。比如说启动时先去加载Order的value等于1的类，然后去加载等于2的类。</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java定时任务解决方案</title>
      <link href="/2018/08/16/ava%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/08/16/ava%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很多项目中都会遇到需要定时任务的情况，本篇文章就结合了Spring中以及SpringBoot、SpringCloud中定时任务的解决方案。</p></blockquote><h3><span id="在spring中使用定时器">在Spring中使用定时器</span></h3><blockquote><p>用SpringBoot比较多的同学可能都会觉得Spring的xml配置确实比较麻烦，如果想在Spring中使用定时器的话其实是必须使用xml配置文件的。</p></blockquote><ol><li>引入task约束</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>task</span><br><span class="line">                       http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>task<span class="regexp">/spring-task-3.0.xsd</span></span><br></pre></td></tr></table></figure><ol start="2"><li>开启注解</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;task:scheduler <span class="attribute">id</span>=<span class="string">"Scheduler"</span> <span class="attribute">pool-size</span>=<span class="string">"10"</span>/&gt; </span><br><span class="line"> &lt;task:annotation-driven <span class="attribute">scheduler</span>=<span class="string">"Scheduler"</span> <span class="attribute">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>以注解的方式使用</li></ol><p>在项目中使用时定时任务的类必须由Spring来管理，所以我们给这个类加上一个@Component注解</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Task</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *每分钟执行一次</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    @Scheduled(cron = <span class="string">"0 0/1 * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"task定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>@Scheduled注解呢，就是表示启用定时任务，括号里的cron的值呢，其实就是一种表达式，就像上边的例子呢就是表示每分钟执行一次。（文章最后会有cron的详细用法介绍哦）</p><h3><span id="在springboot和springcloud中使用定时器">在SpringBoot和SpringCloud中使用定时器</span></h3><blockquote><p>在SpringBoot中使用的话相比较于Spring中就简单明了多了，一起来看一下吧。</p></blockquote><ol><li><p>引入task<br>灰常简单，启动类增加一个注解@EnableScheduling完事</p></li><li><p>使用<br>和Spring的使用方式一样，这里就不多做介绍了。</p> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Task</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *每分钟执行一次</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    @Scheduled(cron = <span class="string">"0 0/1 * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"task定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="优雅的初始化定时器">优雅的初始化定时器</span></h3><blockquote><p>有的时候我们的定时任务可能几个小时需要执行一次。但是呢，我们可能会需要一些初始值。（假如说我们需要一些缓存，不想每次查询缓存都去判断的话我们就可以先在项目启动时就查询出来，然后定时刷新）如果把这个值的初始化过程放在类的构造方法中感觉岂不是太low了，那么有没有别的办法呢？</p></blockquote><p>@PostConstruct注解，这个注解呢，可以在Spring加载这个类的时候执行一次，完美的解决我们上方所说的问题<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">     </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *每分钟执行一次</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/1 * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"task定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    changeNum();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//假装这是个查询数据库的操作</span></span><br><span class="line">    num=rand.nextInt(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3><span id="cron表达式详解">cron表达式详解</span></h3><blockquote><p>来看一下如何使用cron表达式如何使用的吧</p></blockquote><blockquote><h5><span id="语法">语法</span></h5></blockquote><p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。<br>按顺序依次为</p><p>秒（0~59）</p><p>分钟（0~59）</p><p>小时（0~23）</p><p>天（月）（0~31）</p><p>月（0~11）</p><p>天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）</p><p>年份（1970－2099）</p><p>-区间</p><p>*通配符</p><p>? 你不想设置那个字段</p><blockquote><h5><span id="demo">demo</span></h5><p>注意下方*之间有空格</p></blockquote><p>“0 0 1 ? ** ” 每天凌晨1点触发</p><p>“0 30 1 ? ** ” 每天凌晨1：30触发</p><p>“30 30 1 ? ** ” 每天凌晨1：30：30触发</p><p>“30 30 1 ** ? 2018” 2018年的每天凌晨1：30：30触发</p><p>“0 0/1 *** ?” 每分钟触发 一次</p><p>“0 0 0/1 ** ?” 每小时触发一次</p><p>“0 15 10 ? * MON-FRI” 周一到周五的10：15触发</p><p>如果觉得会用的到的话可以收藏转载哦！</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊如何接入支付宝</title>
      <link href="/2018/08/14/%E4%B8%80%E8%81%8A%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D-1/"/>
      <url>/2018/08/14/%E4%B8%80%E8%81%8A%E5%A6%82%E4%BD%95%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>说起来做一个支付系统最基础的就是支付功能了，对于我们来说除了各大银行以外微信和支付宝也是必选项，毕竟人家这个庞大的用户群在那里摆着呢，你不用那不是想着放弃这些用户么。</p></blockquote><p>今天我们就来看一看对于我们开发者来说如何快速的进行接入。</p><p>首先我们要做的就是先去蚂蚁金服开放平台注册账号<a href="https://open.alipay.com" target="_blank" rel="noopener">https://open.alipay.com</a>。这里需要注意的是如果我们是以个人注册的话，是没有办法投入生产使用的，只能是注册企业支付宝去申请才可以。不过呢，对于我们现在学习来说是已经足够了。</p><h2><span id="创建应用">创建应用</span></h2><p>第一步我们点击导航栏的 开发接入 按钮，找到支付应用。创建一个应用。<br>应用创建完成后就是补充应用的信息了，相信看着页面的描述你可以做到的，这里就不过多的描述了。不过有一点需要注意，就是我们的支付功能的话可以先选择一个当面付来玩一玩商场里的扫码枪是如何做到的。</p><h2><span id="使用沙箱账号进行测试">使用沙箱账号进行测试</span></h2><p>接下来呢，我们要准备测试用的环境了。进入此页面<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a><br>这里面呢，有一些我们一会需要的信息，比如说APPID，支付宝公钥，支付宝网关等信息。页面持续往下拉，会有一个Android版的沙箱支付宝，先下载下来，登陆信息在左侧导航栏沙箱账号里。</p><h2><span id="开始搞">开始搞</span></h2><blockquote><p>前面我们已经把需要准备的东西都准备好了，下面我们就开始开发吧。</p></blockquote><h4><span id="引入依赖">引入依赖</span></h4><p>有很多教程里面都是直接引入的支付宝相关的jar包，个人感觉这种方式对于我们现在maven的时代还是比较不合适的。所以呢，咱们使用支付宝官方提供的maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="配置基础信息">配置基础信息</span></h4><p>创建一个名为 alipay_config.properties的配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加密方式</span></span><br><span class="line">alipay.<span class="attribute">signType</span>=RSA2</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符编码格式</span></span><br><span class="line">alipay.<span class="attribute">charset</span>=utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#appid</span></span><br><span class="line">alipay.appId =xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#商户私钥</span></span><br><span class="line">alipay.appPrivateKey =xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#支付宝公钥</span></span><br><span class="line">alipay.<span class="attribute">appPublicKey</span>=xxx</span><br><span class="line"><span class="comment">#沙箱测试地址</span></span><br><span class="line">alipay.<span class="attribute">aliUrl</span>=https://openapi.alipaydev.com/gateway.do</span><br></pre></td></tr></table></figure><p>上方几个信息详细你在沙箱里面已经看到了，这里我就不做详细解释了哦</p><h4><span id="使用propertysource在java类中读取配置文件">使用@PropertySource在Java类中读取配置文件</span></h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@ConfigurationProperties</span>(prefix = <span class="string">"alipay"</span>,ignoreUnknownFields = false)</span><br><span class="line"><span class="variable">@PropertySource</span>(value = &#123; <span class="string">"classpath:alipay_config.properties"</span> &#125;,ignoreResourceNotFound=false)</span><br><span class="line">public class AlipayConfig &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">appId</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">appPrivateKey</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">appPublicKey</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">aliUrl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">signType</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">String</span> <span class="selector-tag">charset</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="selector-tag">Bean</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">AlipayClient</span> <span class="selector-tag">alipayClient</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">DefaultAlipayClient</span>(aliUrl,</span><br><span class="line">                appId, appPrivateKey, <span class="string">"JSON"</span>, charset, appPublicKey, signType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置方式呢，其实就是一个简单的把配置文件中的属性注入到这个类中的各个属性，然后呢使用一个@Bean的注解把这些配置组合成一个AlipayClient类来放入Spring的容器中进行管理</p><h4><span id="撸代码">撸代码</span></h4><p>接下来的这个时候其实已经不需要我来讲了。API接口文档在这：<a href="https://docs.open.alipay.com/api_1/alipay.trade.pay" target="_blank" rel="noopener">https://docs.open.alipay.com/api_1/alipay.trade.pay</a></p><p>大家可以直接参考着搞起来了。我这里给两个简单的例子</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class AlipayService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AlipayClient alipayClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条码支付，声波支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void tradePay()&#123;</span><br><span class="line"></span><br><span class="line">        AlipayTradePayRequest request = new AlipayTradePayRequest();</span><br><span class="line">        request.setBizContent(<span class="string">"&#123;"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>out_trade_no<span class="subst">\"</span>:<span class="subst">\"</span>20150324450101001<span class="subst">\"</span>,"</span> + <span class="comment">//订单号，全局唯一</span></span><br><span class="line"><span class="string">"<span class="subst">\"</span>scene<span class="subst">\"</span>:<span class="subst">\"</span>bar_code<span class="subst">\"</span>,"</span> +                <span class="comment">//支付方式：条码支付</span></span><br><span class="line"><span class="string">"<span class="subst">\"</span>auth_code<span class="subst">\"</span>:<span class="subst">\"</span>2876323325664394<span class="subst">\"</span>,"</span> +<span class="comment">//登陆沙箱支付宝，打开付款码得到的一串数字</span></span><br><span class="line"><span class="string">"<span class="subst">\"</span>subject<span class="subst">\"</span>:<span class="subst">\"</span>Iphone6 16G<span class="subst">\"</span>,"</span> +            <span class="comment">//订单标题</span></span><br><span class="line"><span class="string">"<span class="subst">\"</span>total_amount<span class="subst">\"</span>:888.88,"</span> +    <span class="comment">//订单金额</span></span><br><span class="line"><span class="string">"<span class="subst">\"</span>body<span class="subst">\"</span>:<span class="subst">\"</span>Iphone6 16G<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"      <span class="subst">\"</span>goods_detail<span class="subst">\"</span>:[&#123;"</span> +</span><br><span class="line"><span class="string">"        <span class="subst">\"</span>goods_id<span class="subst">\"</span>:<span class="subst">\"</span>apple-01<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>goods_name<span class="subst">\"</span>:<span class="subst">\"</span>ipad<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>quantity<span class="subst">\"</span>:1,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>price<span class="subst">\"</span>:2000,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>goods_category<span class="subst">\"</span>:<span class="subst">\"</span>34543238<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>body<span class="subst">\"</span>:<span class="subst">\"</span>特价手机<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>show_url<span class="subst">\"</span>:<span class="subst">\"</span>http://www.alipay.com/xxx.jpg<span class="subst">\"</span>"</span> +</span><br><span class="line"><span class="string">"        &#125;],"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>operator_id<span class="subst">\"</span>:<span class="subst">\"</span>yx_001<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>store_id<span class="subst">\"</span>:<span class="subst">\"</span>NJ_001<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>terminal_id<span class="subst">\"</span>:<span class="subst">\"</span>NJ_T_001<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>extend_params<span class="subst">\"</span>:&#123;"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>sys_service_provider_id<span class="subst">\"</span>:<span class="subst">\"</span>2088511833207846<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>industry_reflux_info<span class="subst">\"</span>:<span class="subst">\"</span>&#123;<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>scene_code<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>:<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>metro_tradeorder<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>,<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>channel<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>:<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>xxxx<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>,<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>scene_data<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>:&#123;<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>asset_name<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>:<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>ALIPAY<span class="subst">\\</span><span class="subst">\\</span><span class="subst">\\</span><span class="subst">\"</span>&#125;&#125;<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>card_type<span class="subst">\"</span>:<span class="subst">\"</span>S0JP0000<span class="subst">\"</span>"</span> +</span><br><span class="line"><span class="string">"    &#125;,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>timeout_express<span class="subst">\"</span>:<span class="subst">\"</span>90m<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>auth_confirm_mode<span class="subst">\"</span>:<span class="subst">\"</span>COMPLETE：转交易支付完成结束预授权;NOT_COMPLETE：转交易支付完成不结束预授权<span class="subst">\"</span>,"</span> +</span><br><span class="line"><span class="string">"<span class="subst">\"</span>terminal_params<span class="subst">\"</span>:<span class="subst">\"</span>&#123;<span class="subst">\\</span><span class="subst">\"</span>key<span class="subst">\\</span><span class="subst">\"</span>:<span class="subst">\\</span><span class="subst">\"</span>value<span class="subst">\\</span><span class="subst">\"</span>&#125;<span class="subst">\"</span>"</span> +</span><br><span class="line"><span class="string">"  &#125;"</span>);</span><br><span class="line">        AlipayTradePayResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">        &#125; catch (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if(response.isSuccess())&#123;</span><br><span class="line">            System.out.println(<span class="string">"调用成功"</span>);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(<span class="string">"调用失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public void queryOrder()&#123;</span><br><span class="line">        AlipayTradeQueryRequest request = new AlipayTradeQueryRequest();</span><br><span class="line">        request.setBizContent(<span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"<span class="subst">\"</span>out_trade_no<span class="subst">\"</span>:<span class="subst">\"</span>20150320010101001<span class="subst">\"</span>,"</span> +   <span class="comment">// 系统订单号</span></span><br><span class="line">                <span class="string">"<span class="subst">\"</span>trade_no<span class="subst">\"</span>:<span class="subst">\"</span>2018081421001004570200746674<span class="subst">\"</span>"</span> + <span class="comment">//支付宝交易订单号</span></span><br><span class="line">                <span class="string">"  &#125;"</span>);</span><br><span class="line">        AlipayTradeQueryResponse response = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">        &#125; catch (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if(response.isSuccess())&#123;</span><br><span class="line">            System.out.println(<span class="string">"调用成功"</span>);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(<span class="string">"调用失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信聪明的你已经可以看着文档开启的你的支付之路了。</p><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（八）：使用Apollo做配置中心</title>
      <link href="/2018/08/12/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Apollo%E5%81%9A%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2018/08/12/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8Apollo%E5%81%9A%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>由于Apollo支持的图形化界面相对于我们更加的友好，所以此次我们使用Apollo来做配置中心</p><p>本篇文章实现了使用Apollo配置了dev和fat两个环境下的属性配置。<br>Apollo官方文档<a href="https://github.com/ctripcorp/apollo/wiki" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki</a></p><h2><span id="1下载依赖">1.下载依赖</span></h2><ol><li>从<a href="https://github.com/ctripcorp/apollo/releases" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/releases</a>页面下载最新版本的apollo-configservice-x.x.x-github.zip、apollo-adminservice-x.x.x-github.zip和apollo-portal-x.x.x-github.zip依赖包（需要翻墙。不能翻墙的同学建议使用第二种方式）。</li><li>从<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a>下载源码后在本地构建。构建步骤为:</li></ol><ol><li>下载项目所需依赖</li><li>使用scripts文件夹下的build.bat或build.sh构建</li><li>分别拷贝出apollo-adminservice、apollo-configservice和apollo-portal三个文件夹下target/apollo-xxx-x.x.x-github.zip文件</li></ol><h2><span id="2-创建数据库">2. 创建数据库</span></h2><ol><li>从<a href="https://github.com/ctripcorp/apollo/tree/master/scripts/sql" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/tree/master/scripts/sql</a>下载apolloconfigdb.sql和apolloportaldb.sql数据库文件。</li><li>使用apolloportaldb.sql文件创建apolloportaldb数据库，此数据库是我们管理各种环境等的通用数据库。</li><li>使用apolloconfigdb.sql文件分别创建apolloconfigdb_dev和apolloconfigdb_fat数据库作为我们两个环境的数据存储。</li></ol><h2><span id="3配置数据库连接信息">3.配置数据库连接信息</span></h2><ol><li>解压第一步下载的三个压缩文件</li><li>apollo-portal-1.0.0-github</li></ol><ol><li>在apollo-portal-1.0.0-github/config下application-github.properties文件中配置apolloportaldb数据库的连接信息。</li><li>打开apollo-env.properties文件修改dev.mate和fat.mate属性值为不同环境对应的Eureka地址。例如在这里我fat环境使用的本地，dev使用的是服务器地址</li><li>复制一份apollo-adminservice-1.0.0-github文件，分别重命名为apollo-adminservice-dev和apollo-adminservice-fat。</li><li>在apollo-adminservice-dev和apollo-adminservice-fat 的config文件夹下的application-github.properties文件中分别配置apolloconfigdb_dev和apolloconfigdb_fat数据库的连接信息。</li><li>按照3.4步骤复制apollo-configservice-1.0.0-github并分别配置数据连接地址</li></ol><p>现在的数据库连接信息如下所示：<br><img src="/2018/08/12/每天学点SpringCloud（八）：使用Apollo做配置中心/3.png" alt="图片"></p><h2><span id="4启动服务">4.启动服务</span></h2><ol><li>使用apollo时portal只需要启动一个来进行管理，在这里我们暂时把它放在本地启动。为了启动方面，使用一个小的脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sh apollo-portal-1.0.0-github/scripts/startup.sh</span><br><span class="line">sh apollo-configservice-fat/scripts/startup.sh</span><br><span class="line">sh apollo-adminservice-fat/scripts/startup.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>将apollo-configservice-dev和apollo-adminservice-dev上传到服务器，使用如下命令启动</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> ./apollo-configservice-dev/scripts/startup.<span class="keyword">sh</span> </span><br><span class="line"><span class="keyword">sh</span> ./apollo-adminservice-dev/scripts/startup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><ol start="3"><li>现在我们访问http://localhost:8080/以及http://10.10.10.10:8080/可以看到以下信息就没问题了<br><img src="/2018/08/12/每天学点SpringCloud（八）：使用Apollo做配置中心/1.png" alt="图片"><img src="/2018/08/12/每天学点SpringCloud（八）：使用Apollo做配置中心/2.png" alt="图片"></li><li>修改数据库apolloconfigdb_dev和apolloconfigdb_fat中的ServerConfig表中的key为eureka.service.url的数据，将value分别置为http://10.10.10.10:8080/eureka/和http://localhost:8080/eureka/</li></ol><h2><span id="5测试">5.测试</span></h2><ol><li>创建一个maven工程，引入apollo的相关依赖</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">apollo.version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">apollo.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ctrip.framework.apollo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apollo-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;apollo.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>在application.yml中指定应用的id，以及apollo配置中心的地址</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">App</span>:</span><br><span class="line">  <span class="attribute">Id</span>: demo</span><br><span class="line"><span class="attribute">apollo</span>:</span><br><span class="line">  <span class="attribute">Meta</span>: <span class="attribute">http</span>:<span class="comment">//10.10.10.10:8080 #指定dev环境</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建ConfigRefresher类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigRefresher</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApolloConfig</span></span><br><span class="line">  <span class="keyword">private</span> Config config;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    refresher(config.getPropertyNames());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApolloConfigChangeListener</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(ConfigChangeEvent changeEvent)</span> </span>&#123;</span><br><span class="line">    refresher(changeEvent.changedKeys());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresher</span><span class="params">(Set&lt;String&gt; changedKeys)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String changedKey : changedKeys) &#123;</span><br><span class="line">      System.out.println(<span class="string">"this key is changed:"</span>+changedKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.applicationContext.publishEvent(<span class="keyword">new</span> EnvironmentChangeEvent(changedKeys));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建启动类并启动</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableApolloConfig</span></span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>修改配置文件中的 apollo.Meta为localhost:8080再次启动</li><li>打开浏览器访问 <a href="http://localhost:8070" target="_blank" rel="noopener">http://localhost:8070</a> Apollo默认的用户名为 apollo，密码为admin。登陆后点击创建项目，<a href="http://xn--idapp-6n1hq8bkc523ao3g5ob210av8tnfl0tm124d82ena31rh91az71aye1geq8a.id" target="_blank" rel="noopener">项目的应用id和名称填写我们配置文件中的app.id</a>。</li><li>进入项目可在dev和fat环境中分别发布不同的配置进行测试</li></ol><blockquote><blockquote><p>本文出自<a href="http://shiyujun.cn">http://shiyujun.cn</a>,转载请保留</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（七）：路由器和过滤器-Zuul</title>
      <link href="/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8-Zuul/"/>
      <url>/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8-Zuul/</url>
      
        <content type="html"><![CDATA[<p>为什么要使用Zuul<br>先来看一下下方这个图<br><img src="/2018/07/26/每天学点SpringCloud（七）：路由器和过滤器-Zuul/1.png" alt="1"></p><p>假如现在我们具有四个微服务，分别是用户、订单、支付、催收微服务，它们的调用方式分别是使用http、restful、thrift、kafka。这个时候如果我们在客户端直接调用的话感觉是不是太费劲了，客户端需要维护这几种调用方式的客户端，如果后期新增微服务或者减少或者更换调用方式等，都需要修改客户端。那么我们来看一下加入Zuul以后是什么样子的呢</p><p><img src="/2018/07/26/每天学点SpringCloud（七）：路由器和过滤器-Zuul/2.png" alt="1"></p><p>Zuul呢就负责了所有的调用，解耦了客户端和微服务。也符合我们设计的单一职责原则。</p><p>使用Zuul</p><p>首先呢，我们在原先的父项目下新增一个cloud-demo-zuul模块，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建包cn.org.zhixiang，在此包下新建启动类CloudDemoZuulApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableZuulProxy</span></span><br><span class="line">public class CloudDemoZuulApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CloudDemoZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableZuulProxy就是开启Zuul的注解</p><p>接下来看一下application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul-demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8093</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:root@localhost:8761/eureka</span></span><br></pre></td></tr></table></figure><p>这个配置其实是跟我们以往的服务消费者的配置是一样的，为什么要这样配置呢，因为在这个之前我们需要先复习一下以往的知识点，没有看过以往博客的小伙伴可以先参考这个：<a href="https://shiyujun.cn">https://shiyujun.cn</a></p><p>首先启动我们的Eureka服务，然后启动一个提供者cloud-demo-provider。我们知道这个时候我们直接访问http://localhost:8078/user/getUser/2是可以获得数据的对吧，那么我的Zuul是怎么使用的呢。我们启动一下我们的Zuul。</p><p>这个时候我们访问http://localhost:8093/provider-demo/user/getUser/2获得的数据是一样的，也就是说我们的Zuul做了一个路由转发。我们可以看到这个url中有一个provider-demo，这个呢是提供者的spring.application.name的值，那么如果我们不想使用这个呢，比如说现在我知道这是user微服务，我就想如果访问user微服务我就使用http://localhost:8093/user/user/getUser/2怎么办呢。</p><p>配置<br>我们需要在yml中加上一个配置。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">zuul:</span></span><br><span class="line"><span class="symbol">  routes:</span></span><br><span class="line">    provider-demo: <span class="meta-keyword">/user/</span>**</span><br></pre></td></tr></table></figure><p>这个配置呢就是把服务id为provider-demo的微服务项目地址映射为/user/<em><em>.注意最后是两个</em>，为什么是两个呢，如果是一个</em>只能匹配/user/a,/user/b这种路径，而匹配不了/user/a/b这种。而我们配两个*的话不仅可以匹配/user/a/b,还能匹配/user/a/b/c/d等。</p><p>这个时候我们访问http://localhost:8093/user/user/getUser/2的时候就可以得到数据了。</p><p>其实还有别的写法。我们来看一下</p><ol><li></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">zuul:</span></span><br><span class="line"><span class="symbol">  routes:</span></span><br><span class="line"><span class="symbol">    demo:</span></span><br><span class="line"><span class="symbol">      path:</span> <span class="meta-keyword">/user/</span>**</span><br><span class="line"><span class="symbol">      serviceId:</span> provider-demo</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">zuul:</span></span><br><span class="line"><span class="symbol">  routes:</span></span><br><span class="line"><span class="symbol">    demo:</span></span><br><span class="line"><span class="symbol">      path:</span> <span class="meta-keyword">/user/</span>**</span><br><span class="line"><span class="symbol">      url:</span> http:<span class="comment">//localhost:8078/</span></span><br></pre></td></tr></table></figure><p>上方这两种方式都是可以的，那个demo呢其实是自定义的，只要不是重复就行。然后path呢就是网页上我们访问的url。这两种方式就是分别将这哥path映射到serviceId或者一个url。</p><p>负载均衡</p><p>刚才我们探讨的一直都是单个服务的情况，那么当我们有多个微服务的时候应该怎么操作呢</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">zuul:</span></span><br><span class="line"><span class="symbol">  routes:</span></span><br><span class="line"><span class="symbol">    demo:</span></span><br><span class="line"><span class="symbol">      path:</span> <span class="meta-keyword">/user/</span>**</span><br><span class="line"><span class="symbol">      serviceId:</span> provider-demo</span><br><span class="line">provider-demo:</span><br><span class="line"><span class="symbol">  ribbon:</span></span><br><span class="line"><span class="symbol">      listOfServers:</span> http:<span class="comment">//localhost:8078,http://localhost:8079</span></span><br></pre></td></tr></table></figure><p>使用这种方式以后，我们再启动一下我们原先的cloud-demo-provider-2项目，然后启动Zuul访问时会发现已经实现了负载均衡</p><p>文件上传</p><p>我们使用zuul做路由的时候可能会碰到上传文件的需求，上传小文件到是没事，但是如果大文件的话是无法上传呢，这儿呢就有一个办法来绕过SpringMVC的DispatchServlet。</p><p>例如我们上传文件的接口为http://localhost:8093/user/user/uploadFile 那么我们在上传的时候就可以访问http://localhost:8093/zuul/user/user/uploadFile来实现上传大文件</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（六）：Hystrix使用</title>
      <link href="/2018/07/26/%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AHystrix%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/07/26/%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9AHystrix%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Hystrix是一个实现断路器模式的库。什么是断路器模式呢？就像我们家庭中的电闸一样，如果有那一处出现意外，那么电闸就会立刻跳闸来防止因为这一处意外而引起更大的事故，直到我们确认处理完那一处意外后才可以再打开电闸。而Hystrix的存在就是为了预防程序中出现这种问题而导致程序不可用的情况。</p><p>比如说我们有三个微服务 A、B、C，其中A依赖于B，B依赖于C，如果这时候C出现了问题，那么就导致B不可用，紧接着A也不可用，更有可能导致整个系统不可用。我们接下来就来看看如何利用Hystrix预防这种情况</p><p>创建项目<br>首先我们复制一份cloud-demo-consumer项目，改名为cloud-demo-consumer-hystrix</p><p>引入Hystrix的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>application.xml不用变</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consumer-demo-hystrix</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8090</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    healthcheck:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://root:root@localhost:8761/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>CloudDemoConsumerApplication改名为CloudDemoConsumerHystrixApplication，并且它的注解应该是</p><p><code>@SpringBootApplication @EnableEurekaClient @EnableCircuitBreake</code><br>上方我们不认识的这个@EnableCircuitBreake注解就是表示开启断路器模式的注解</p><p>然后我们看一下controller</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/getUser/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = <span class="meta-string">"getUserFallback"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> User getUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id)&#123;</span><br><span class="line">         <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://provider-demo/user/getUser/"</span>+id,User.<span class="keyword">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> User getUserFallback(<span class="built_in">Long</span> id) &#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setName(<span class="string">"王五"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它相比较于原先的controller仅仅是多了一个@HystrixCommand(fallbackMethod = “getUserFallback”)注解和一个方法，这个注解呢就是指定Hystrix在此方法超时时调用的方法。</p><p>测试<br>首先启动我们代表Eureka服务的项目，然后启动cloud-demo-provider项目，紧接着启动我们现在的项目。</p><p>项目启动以后我们打开浏览器访问localhost:8088/user/getUser/2的时候发现一切正常，网页上返回了张三这个用户。如果我们没有引入Hystrix的时候如果这时候把服务提供者停掉的话在访问会出现什么情况呢，是不是会报错，或者超时呀。</p><p>但是现在不一样了，我们引入了Hystrix，所以我们现在停掉提供者访问的时候会发现程序走了注解指定的fallbackMethod，也就是方法getUserFallBack，这个时候我们浏览器得到的结果是王五。</p><p>Hystrix默认的超时时间是1秒，也就是说它在等待服务提供者1秒后如果得不到结果的话就会认为提供者挂了，紧接着调用fallbackMethod。</p><p>这个时间其实我们可以控制，只需要在yml文件中配置一个属性就可以自定义这个时间</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hystrix<span class="selector-class">.command</span><span class="selector-class">.default</span><span class="selector-class">.execution</span><span class="selector-class">.isolation</span><span class="selector-class">.thread</span><span class="selector-class">.timeoutInMilliseconds</span>: <span class="number">1000</span> <span class="number">#100</span>0毫秒</span><br></pre></td></tr></table></figure><p>Feign的支持<br>接下来我们看一下Feign是怎么使用Hystrix,</p><p>这次我们改造cloud-demo-consumer-feign项目，项目名称改为cloud-demo-consumer-feign-hystrix，同样向上述 方式一样引入Hystrix的依赖，</p><p>接着 CloudDemoConsumerFeignApplication类名改为 CloudDemoConsumerFeignHystrixApplication，同样的加入@EnableCircuitBreaker注解</p><p>有一点不一样的地方是我们需要在yml文件中配置一下来开启Hystrix</p><p><code>feign.hystrix.enabled: true</code></p><p>这里controller中需要改造的不再是指定单个方法，而是指定接口的实现类</p><p><code>@FeignClient(name = &quot;provider-demo&quot;, fallback = HystrixClientFallback.class)</code><br>来看一下这个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixClientFallback</span> <span class="keyword">implements</span> <span class="title">UserFeignClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"王五"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话如果接口中有多个方法的话我们就不必为每一个方法取指定了。</p><p>现在我们已经解决了服务提供者挂掉的事情了，但是有点不好的是，我们现在还不能知道服务提供者到底是咋挂的，要是能捕获到服务提供者</p><p>抛的异常就好了，其实Hystrix对这个是支持的，我们接下来看一下</p><p>fallbackFactory</p><p>UserFeignClient上方的注解需要变一下</p><p><code>@FeignClient(name = &quot;provider-demo&quot;, fallbackFactory = HystrixClientFactory.class)</code><br>这次使用的是fallbackFactory这个属性，我们看一下它指定的这个类又是怎么实现的呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixClientFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserFeignClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HystrixClientFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserFeignClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        HystrixClientFactory.LOGGER.info(<span class="string">"the provider error is: &#123;&#125;"</span>, cause.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserFeignClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setName(<span class="string">"王五"</span>);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，在这个create的工厂方法中，它的入参就是服务提供者的异常，得到了这个异常以后才会去做实现。这样是不是更加灵活了呢？</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（五）：如何使用高可用的Eureka</title>
      <link href="/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84Eureka/"/>
      <url>/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84Eureka/</url>
      
        <content type="html"><![CDATA[<p>前几篇文章我们讲了一下Eureka的基础使用，但是呢有一个很重要的问题，我们讲的都是单机版的情况，如果这个时候Eureka服务挂了的话，那么我们的服务提供者跟服务消费者岂不是都废了？服务提供者和消费者都废了的话那这个程序还有存在的意义么？</p><p>那么今天咱们就讲一讲如何解决这个问题。相信大家都知道，这个问题是我们提供高可用服务必须经历的问题。解决方案就是加集群，那么我们来看一下Eureka怎么实现集群吧。</p><p>1.首先呢，我们把原先的cloud-demo-eureka项目负责一份命名为cloud-demo-eureka-hign(高可用的服务，哈哈)</p><p>注意没有看过前几篇文章的童鞋可以在文章底部找到GitHub地址先看一下代码。</p><p>为了省事起见，我们先把security的依赖去掉。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.org.zhixiang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo-eureka-high<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--注意此处的依赖是SpringBoot2.0以后专用的，如果您使用的SpringBoot版本低于2.0请使用spring-cloud-starter-eureka-server--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.启动类只需要改一下名字其他的不变</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaServer</span></span><br><span class="line">public class CloudDemoEureHighApplication &#123;</span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">    <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CloudDemoEureHighApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.我们现在要玩点不一样的了，此次项目我们使用了4个配置文件。它们分别是application.yml、application-dev1.yml、application-dev2.yml、application-dev3.yml。这里解释一下为什么会使用4个配置文件，如果我们在生产环境上这里其实应该是有三个程序的，但是我们为了测试方便，就使用这一个程序当成三个使用。</p><p>先看我们的application.yml文件变成什么样子了。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  profiles:</span></span><br><span class="line"><span class="symbol">    active:</span> dev1</span><br><span class="line"><span class="symbol">  application:</span></span><br><span class="line"><span class="symbol">    name:</span> eureka-server-high</span><br><span class="line"><span class="symbol">dev:</span></span><br><span class="line"><span class="symbol">  host:</span> localhost</span><br><span class="line"><span class="symbol">  dev1Port:</span> <span class="number">8761</span></span><br><span class="line"><span class="symbol">  dev2Port:</span> <span class="number">8762</span></span><br><span class="line"><span class="symbol">  dev3Port:</span> <span class="number">8763</span></span><br></pre></td></tr></table></figure><p>我们可以看到位于最上方的就是一个spring.profiles.active属性，这个属性呢，通常适用于我们不同环境下配置的切换。举个例子，我们可能有开发、测试、生产等等不同的环境，这几个环境使用的肯定不是一个数据库，如果我们每次在各个环境都要修改一下配置文件那样岂不是累死了。而spring.profiles.active属性呢，就是指定的我们的项目启动加载的配置文件，例如我们配的值为dev1，那么一会当我们启动项目的时候就会去加载application-dev1.yml文件.</p><p>紧接着就是spring.application.name了，相信大家都知道了，我们此次的应用名称就是eureka-server-high了。</p><p>下面呢其实是我自定义的一个配置，因为此次我们要使用三个Eureka服务来组成一个集群，所以我先在这里指定一下这三个服务的端口号，至于为什么在这指定相信看了下面三个配置文件你就明白了。</p><p>4.先来看一下application-dev1.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;dev.dev1Port&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;dev.host&#125;:$&#123;dev.dev2Port&#125;/eureka,http://$&#123;dev.host&#125;:$&#123;dev.dev3Port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>可以看到首先定义了端口号是上方我们在application.yml文件中定义的一个端口号8761，然后它注册的地址变成两个了，就是端口端口号为8762和8763的程序。</p><p>接着看application-dev2.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;dev.dev2Port&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;dev.host&#125;:$&#123;dev.dev1Port&#125;/eureka,http://$&#123;dev.host&#125;:$&#123;dev.dev3Port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>它注册了8761和8763的程序</p><p>那么现在我想你应该已经猜出来了application-dev3.yml是怎么写的了吧</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">$&#123;dev.dev3Port&#125;</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;dev.host&#125;:$&#123;dev.dev1Port&#125;/eureka,http://$&#123;dev.host&#125;:$&#123;dev.dev2Port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>5.配置文件搞定以后我们可以启动了。</p><p>首先我们到CloudDemoEureHighApplication类中右键run启动程序，这里你会发现两个疑点：</p><p>项目启动报错哎。哈哈，其实不用怕，报错其实是正常的，不报错才奇怪呢。你想到报错的原因了么？我们启动使用的配置文件是dev1，他启动会向端口号为8762和端口号为8763的项目注册，这两个项目都没有，所以肯定会报错。不过没关系，Eureka其实是启动成功了的，现在你打开浏览器访问以下localhost:8671其实是可以看到Eureka已经注册成功了。</p><p>还有一个疑点就是：哎，小编你上边不是说我们用一个程序模拟三个么，可是我这个启动了以后，再启动不是重启了么。我咋启动三个呀。</p><p>其实这个呢因为小编有妙招，现在我们8761已经启动了对吧，接下来跟我一步一步走<br><img src="/2018/07/26/每天学点SpringCloud（五）：如何使用高可用的Eureka/1.png" alt="1"></p><p>先点击这个 Edit Configuration，然后看下图</p><p><img src="/2018/07/26/每天学点SpringCloud（五）：如何使用高可用的Eureka/2.png" alt="1"></p><p>按照图片的标号，先点击加号图标，然后起个与CloudDemoEurekaHighApplication不一样的名字，这里我是加了一个-3，然后在第三个位置就是我们启动类的路径，最后一个位置就是选中要启动的模块。现在一个新的启动方式就做好了，接着我们把application.yml文件中的spring.</p><p>profiles.active改成dev3。<br><img src="/2018/07/26/每天学点SpringCloud（五）：如何使用高可用的Eureka/3.png" alt="1"></p><p>接着按上图顺序选中刚刚定义的启动方式，点击debugger启动。现在是不是发现dev3的程序也启动了。虽然还是保错，我想你应该知道原因了。</p><p>接着如法炮制，我们启动dev2，记住不要忘了修改application.yml。</p><p>现在三个服务都起来了，我们的集群是不是成功了呢</p><p>浏览器访问localhost:8761或者8762或者8763你是不是都看到了下图这样三个节点呢</p><p><img src="/2018/07/26/每天学点SpringCloud（五）：如何使用高可用的Eureka/4.png" alt="1"></p><p>如果你看到的是这样的一个效果，那么就恭喜你Eureka集群已经搭建成功了。</p><p>6.使用：</p><p>既然集群搭建成功了，那么就可以使用了，还记得我们如何把客户端注册的服务器上么，不记得话请抓紧时间复习一下：每天学点SpringCloud（二）：服务注册与发现Eureka</p><p>当时我们注册的时候，因为没有集群所以应该是这样写的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure><p>你要是问我现在还这样写能行么，我告诉你可以，这样没问题，但是我不推荐。为什么呢，虽然我们现在使用的是集群，当我们的服务提供者注册上以后应该是三个节点都会有这个服务提供者，就算8761这个节点挂了也无所谓。但是，如果我们服务提供者在注册的时候8761就已经挂了，那么它是注册不上的，人家8762和8763现在是不认识它的。所以我推荐给你的写法就是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultZone: http:<span class="regexp">//</span>localhost:<span class="number">8761</span><span class="regexp">/eureka,http:/</span><span class="regexp">/localhost:8762/</span>eureka,http:<span class="regexp">//</span>localhost:<span class="number">8763</span><span class="regexp">/eureka</span></span><br></pre></td></tr></table></figure><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（四）：Feign的使用及自定义配置</title>
      <link href="/2018/07/26/%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AFeign%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/07/26/%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AFeign%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Feign：SpringCloud的官网对它的定义是这样的：</p><p>是一个声明式的Web服务客户端。它支持Feign本身的注解、JAX-RS注解以及SpringMVC的注解。Spring Cloud集成Ribbon和Eureka以在使用Feign时提供负载均衡的http客户端。</p><p>Feign的使用</p><p>我们先来看一看如何在项目中使用Feign</p><ol><li>首先呢 ，我们把原先的cloud-demo-consumer项目复制一份，artifactId改为cloud-demo-consumer-feign，然后添加依赖 （温馨提醒，没有看过前几篇文章的朋友，建议先从第一篇文章开始学习效果更佳哦 每天学点SpringCloud（一）：使用SpringBoot2.0.3整合SpringCloud）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--注意此处的依赖是SpringBoot2.0以后专用的，如果您使用的SpringBoot版本低于2.0请使用spring-cloud-starter-feign--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.CloudDemoConsumerApplication启动类改名为CloudDemoConsumerFeignApplication，删除上次使用的RestTemplate，并在类上添加注解@EnableFeignClients，标示此项目为Feign客户端</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaClient</span></span><br><span class="line"><span class="variable">@EnableFeignClients</span></span><br><span class="line">public class CloudDemoConsumerFeignApplication &#123;</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">      <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CloudDemoConsumerFeignApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在cn.org.zhixiang包下增加feign包 然后添加UserFeignClient接口：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@FeignClient</span>(<span class="string">"provider-demo"</span>)</span><br><span class="line">public interface UserFeignClient &#123;</span><br><span class="line"></span><br><span class="line"> <span class="variable">@GetMapping</span> (value = <span class="string">"/user/getUser/&#123;id&#125;"</span>)</span><br><span class="line"> public User getUser(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>)Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口呢，就是我们使用Feign的关键了，我们先来看一下@FeignClient(“provider-demo”)注解，它括号里的内容 看着是不是很熟悉，这不就是我们的服务提供者的名称么，<a href="http://xn--spring-hz8ij7o62cxt9aqiar1b5u617dy9ntid570g8dfca9238gh9ke22d.application.name" target="_blank" rel="noopener">对其实它就是我们需要调用的服务的spring.application.name</a>。</p><p>接着是@RequestMapping(value = “/user/getUser/{id}”, method = RequestMethod.GET)</p><p>@PathVariable(“id”)，这个注解咋还写上value了呢，我记得没写过呀，其实这就是一个坑了，如果不写的话是启动不起来滴。</p><p>4.接着我们看UserController类，刚才我们已经把RestTemple的Bean给干掉了，那么在这断然没有在使用它的道理。</p><p>我们现在要使用的就是我们刚才定义的UserFeignClient 接口</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@Autowired</span></span><br><span class="line">  private UserFeignClient userFeignClient;</span><br><span class="line"></span><br><span class="line">  <span class="variable">@GetMapping</span>(<span class="string">"/getUser/&#123;id&#125;"</span>)</span><br><span class="line">  public User getUser(<span class="variable">@PathVariable</span> Long id)&#123;</span><br><span class="line">     <span class="selector-tag">return</span> <span class="selector-tag">userFeignClient</span><span class="selector-class">.getUser</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5现在我们就可以测试了，先启动Eureka服务，然后随便启动我们定义的两个服务提供者中的其中一个，最后启动我们的这个项目。</p><p>浏览器访问http://localhost:8089/user/getUser/1，不知道你获取到数据了么？</p><p>修改Feign的默认配置</p><p>修改Feign的默认配置其实也存在包扫描的问题，因为上一篇文章（自定义Eureka集群负载均衡策略）已经讲过了，这里就不浪费时间了，没有看过的同学可以先去参考一下。</p><p>这里我们就简单省事，把配置文件放到ComponentScan扫描不到的地方吧：cn.org.config,在这里呢，我们新建了Configuration配置类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">org</span>.<span class="keyword">springframework</span>.<span class="keyword">context</span>.<span class="keyword">annotation</span>.<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class Configuration &#123;</span><br><span class="line">  @<span class="keyword">Bean</span></span><br><span class="line">  public Contract feignContract() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Contract</span><span class="selector-class">.Default</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在UserFeignClient类中指定configuration</p><p><code>@FeignClient(value = &quot;provider-demo&quot;,configuration = Configuration.class)</code><br>注意，我们在此类中修改了Feign的Contract ，那么Contract 是什么呢。它叫做契约。因为Feign一开始使用的契约是SpringMVC，所以刚才我们SpringMVC的注解的时候直接成功了，但是你如果现在启动项目你就会发现已经启动不了了。因为Contract.Default()使用的契约是Feign自己的，也就是说我们要把SpringMVC的注解修改为Feign的注解</p><p>SpringMVC版本</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@GetMapping</span> (value = <span class="string">"/user/getUser/&#123;id&#125;"</span>)</span><br><span class="line">public User getUser(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>)Long id);</span><br><span class="line"><span class="selector-tag">Feign</span>版本</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">RequestLine</span>(<span class="string">"GET /user/getUser/&#123;id&#125;"</span>)</span><br><span class="line"> <span class="selector-tag">public</span> <span class="selector-tag">User</span> <span class="selector-tag">getUser</span>(<span class="variable">@Param</span>(<span class="string">"id"</span>) Long id);</span><br></pre></td></tr></table></figure><p>当你学会修改Feign的契约时修改别的默认同样不在话下了已经。</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（三）：自定义Eureka集群负载均衡策略</title>
      <link href="/2018/07/26/%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89Eureka%E9%9B%86%E7%BE%A4%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/"/>
      <url>/2018/07/26/%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89Eureka%E9%9B%86%E7%BE%A4%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>相信看了 每天学点SpringCloud（一）：简单服务提供者消费者调用，每天学点SpringCloud（二）：服务注册与发现Eureka这两篇的同学都了解到了我的套路，没错，本篇博客同样是为了解决上篇的问题的。</p><p>上篇我们使用Eureka默认的负载均衡解决了消费方调用服务方硬编码的问题，不过呢，因为是使用的默认负载均衡的策略，所以这次我们就搞一搞事情，来自定义一下它的策略。</p><p>搞这个策略呢有两种实现方式</p><p>通过代码自定义<br>通过代码的方式自定义负责均衡策略时需要注意的是，注意避免SpringBoot的包扫描，因为自定义的规则必须在Eureka的规则实例化以后再实例化才会生效，那么这样就有两种方式，</p><p>第一种<br>1.在CloudDemoConsumerApplication类上级新建包config，然后新建LoanBalanced类。使用此类注册一个IRule以达到替换Eureka的目的</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.org.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LoadBalanced</span> &#123;</span></span><br><span class="line">    @Bean</span><br><span class="line">    public IRule ribbonRule() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoundRobinRule();                <span class="regexp">//轮训</span></span><br><span class="line"><span class="regexp">       //</span> <span class="keyword">return</span> <span class="keyword">new</span> WeightedResponseTimeRule();    <span class="regexp">//加权权重</span></span><br><span class="line"><span class="regexp">       //</span><span class="keyword">return</span> <span class="keyword">new</span> RetryRule();                    <span class="regexp">//带有重试机制的轮训</span></span><br><span class="line"><span class="regexp">       //</span><span class="keyword">return</span> <span class="keyword">new</span> RandomRule();                   <span class="regexp">//随机</span></span><br><span class="line"><span class="regexp">       //</span><span class="keyword">return</span> <span class="keyword">new</span> TestRule();                     <span class="regexp">//自定义规则</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>2.注意包名，CloudDemoConsumerApplication的包名是cn.org.zhixiang。</p><p>3.想使用哪种负载均衡策略就new哪一种就ok</p><p>4.TestRule为自定义的规则：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.org.config.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.ILoadBalancer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.Server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRule</span> <span class="keyword">implements</span> <span class="title">IRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILoadBalancer loadBalancer;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Server <span class="title">choose</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     List&lt;Server&gt; servers= loadBalancer.getAllServers();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> servers.<span class="title">get</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer iLoadBalancer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadBalancer=iLoadBalancer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有自定义的需求的话可以参照这个写法，我这只是测试使用，取的服务列表的第一个。</p><p>5.在CloudDemoConsumerApplication类上添加注解<br><code>@RibbonClient(name = &quot;provider-demo&quot;, configuration = cn.org.config.LoadBalanced.class)</code><br>指定provider-demo服务使用的是LoadBalanced类提供的规则</p><p>第二种：<br>依旧把LoadBalanced放到cn.org.zhixiang包下，不过呢通过自定义注解来解决包扫描的问题</p><p>1.自定义一个注解<br><code>public @interface ExcludeFromComponentScan { }</code><br>2.类使用刚才自定义的注解标示</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ExcludeFromComponentScan</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AvoidLoanbalanced</span> &#123;</span></span><br><span class="line">  @Bean</span><br><span class="line">  public IRule ribbonRule() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RoundRobinRule();        <span class="regexp">//轮训</span></span><br><span class="line"><span class="regexp">    //</span> <span class="keyword">return</span> <span class="keyword">new</span> WeightedResponseTimeRule();  <span class="regexp">//加权权重</span></span><br><span class="line"><span class="regexp">    //</span><span class="keyword">return</span> <span class="keyword">new</span> RetryRule();          <span class="regexp">//带有重试机制的轮训</span></span><br><span class="line"><span class="regexp">    //</span><span class="keyword">return</span> <span class="keyword">new</span> RandomRule();          <span class="regexp">//随机</span></span><br><span class="line"><span class="regexp">    //</span><span class="keyword">return</span> <span class="keyword">new</span> TestRule();           <span class="regexp">//自定义规则</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>3.Application中指定包扫描忽略使用上方注解的类，然后注册规则</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RibbonClient</span>(name = <span class="string">"provider-demo"</span>, configuration = AvoidLoanbalanced.class)</span><br><span class="line"><span class="variable">@ComponentScan</span>(excludeFilters = &#123; <span class="variable">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, value = ExcludeFromComponentScan.class) &#125;)</span><br></pre></td></tr></table></figure><p>注意：上方两种方式使用一种就够了。</p><p>使用配置文件自定义</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`#为服务Id名称为provider-demo的项目配置负载均衡规则为com<span class="selector-class">.netflix</span><span class="selector-class">.loadbalancer</span><span class="selector-class">.WeightedResponseTimeRule</span></span><br><span class="line"></span><br><span class="line">provider-demo:</span><br><span class="line">  ribbon:</span><br><span class="line">      NFLoadBalancerRuleClassName: com<span class="selector-class">.netflix</span><span class="selector-class">.loadbalancer</span><span class="selector-class">.WeightedResponseTimeRule</span></span><br></pre></td></tr></table></figure><p>当然，自定义负载均衡策略只需要选择代码或配置文件自定义其中的一种就可以了。毕竟美酒虽好，可不要贪杯哦。</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（二）：服务注册与发现Eureka</title>
      <link href="/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0Eureka/"/>
      <url>/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0Eureka/</url>
      
        <content type="html"><![CDATA[<p>相信看过 每天学点SpringCloud（一）：简单服务提供者消费者调用的同学都发现了，在最后消费者调用提供者的时候把提供者的地址硬编码在了代码中，这样的方式肯定是不行的，今天，我们就是要Eureka来解决这个问题</p><p>创建Eureka服务</p><p>1.我们在原先项目的基础上再新建一个项目cloud-demo-eureka</p><p>此项目的依赖为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.org.zhixiang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意此处的依赖是SpringBoot2.0以后专用的，如果您使用的SpringBoot版本低于2.0请使用spring-cloud-starter-eureka-server--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="comment">#开启权限认证</span></span><br><span class="line"><span class="attr">  security:</span> </span><br><span class="line"><span class="attr">    basic:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#此项目不作为客户端注册</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment">#开启权限验证后Eureka地址为 用户名：密码@地址：端口号，如未开启权限验证则直接使用 地址：端口号</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;spring.security.user.name&#125;:$&#123;spring.security.user.password&#125;@$&#123;server.host&#125;:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>3.创建cn.org.zhixiang包，在此包下创建CloudDemoEureApplication启动类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.org.zhixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudDemoEureApplication</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CloudDemoEureApplication.<span class="keyword">class</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.如果您开启了权限验证并且SpringBoot版本为2.0以上的话还需要一个操作，如果不是此布可以忽略</p><p>因为2.0默认开启了csrf，如果我们现在直接启动Eureka服务的话客户端是注册不上的，所以需要把csrf关闭</p><p>在cn.org.zhixiang包下新建security包，新建WebSecurityConfigurer类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void configure(<span class="type">HttpSecurity</span> http) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.在CloudDemoEureApplication启动类中启动Eureka服务，浏览器访问http://localhost:8761/eureka，输入用户名root和密码root登陆Eureka后Eureka服务创建成功。</p><p>修改服务提供者</p><p>1.在原先的cloud-demo-provider项目中添加Eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.修改application.yml，增加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eurekaServer:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#将此项目注册到Eureka服务</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eurekaServer.user&#125;:$&#123;eurekaServer.password&#125;@$&#123;eurekaServer.host&#125;:$&#123;eurekaServer.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>3.在CloudDemoProviderApplication启动类中增加一个注解：@EnableEurekaClient标示此项目是Eureka客户端</p><p>4.紧接着先启动刚才创建的Eureka服务再启动此项目，当我们再次访问Eureka的时候可以发现我们的项目已经注册上了Eureka<br><img src="/2018/07/26/每天学点SpringCloud（二）：服务注册与发现Eureka/1.png" alt="1"></p><p>5.因为我们此次需要玩点高大上的了，所以只有一个服务提供者肯定是不行的，我们copy一下上方的cloud-demo-provider项目,新项目命名为cloud-demo-provider-2，这个新项目需要修改的地方只有三个:</p><p>第一是pom文件中的项目id注意不要与上个项目一样，推荐直接叫做cloud-demo-provider-2.</p><p>第二是yml文件中spring.application.name应该是与上个项目都一样的，名字叫做：provider-demo。这个不做修改，只需要修改server.port，保证端口不会冲突，比如我改成了8079</p><p>第三是UserController,可以看到上个项目返回的User是硬编码的叫做张三的，这次这个项目我们把这个张三修改成李四，来区分这两个项目</p><p>修改完毕以后启动项目Eureka中应该是这样的<br><img src="/2018/07/26/每天学点SpringCloud（二）：服务注册与发现Eureka/2.png" alt="1"></p><p>就是这个provider-demo的服务有两个提供者的意思</p><p>修改消费者</p><p>现在我们已经开始修改上次服务地址硬编码的问题了</p><p>1.cloud-demo-consumer项目增加Eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.启动类中增加了两个注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaClient</span></span><br><span class="line">public class CloudDemoConsumerApplication &#123;</span><br><span class="line">   <span class="variable">@Bean</span></span><br><span class="line">   <span class="variable">@LoadBalanced</span><span class="comment">//开启负载均衡</span></span><br><span class="line">   public RestTemplate restTemplate()&#123;</span><br><span class="line">      <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">RestTemplate</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">      <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(CloudDemoConsumerApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在UserController中做一下改变</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/getUser/&#123;id&#125;"</span>)</span><br><span class="line">    public User getUser(<span class="variable">@PathVariable</span> Long id)&#123;</span><br><span class="line">         <span class="selector-tag">return</span> <span class="selector-tag">restTemplate</span><span class="selector-class">.getForObject</span>(<span class="string">"http://provider-demo/user/getUser/"</span>+id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们上次使用的localhost:8078/user/getUser已经换成了provider-demo/user/getUser了。不知道大家还记不记得这个provider-demo么？它呢，是两个项目中spring.application.name的属性值，在Eureka中呢，就对应着一个服务的id，也就是说在Eureka中，我们可以不使用ip+端口而是使用Ip去访问服务。</p><p>大家将这四个项目都启动起来以后，访问http://localhost:8088/user/getUser/5，是不是发现一会会返回张三，一会会返回李四呢。这个就是我们一开始加的@LoadBalanced注解，也就是开启了Eureka的负载均衡。这样的话我们是不是已经完美的完成了昨天遗留的问题呢？</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天学点SpringCloud（一）：使用SpringBoot2.0.3整合SpringCloud</title>
      <link href="/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8SpringBoot2-0-3%E6%95%B4%E5%90%88SpringCloud/"/>
      <url>/2018/07/26/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E7%82%B9SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BD%BF%E7%94%A8SpringBoot2-0-3%E6%95%B4%E5%90%88SpringCloud/</url>
      
        <content type="html"><![CDATA[<p>最近开始学习SpringCloud，在此把我学习的过程记录起来，跟大家分享一下，一起学习。想学习SpringCloud的同学赶快上车吧。</p><p>本次学习使用得SpringBoot版本为2.0.3.RELEASE，SpringCloud版本为Finchley.RELEASE</p><p>创建父Maven工程<br>首先我们创建一个Maven项目</p><p><img src="/2018/07/26/每天学点SpringCloud（一）：使用SpringBoot2-0-3整合SpringCloud/1.png" alt="1"></p><p>我们把此项目当做我们项目的父项目，以后我们所有的子项目都应该继承这个项目，来看一下此项目的pom.xml文件都是依赖了什么</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.org.zhixiang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建服务提供者</p><p>右键项目名称：spring-cloud-demo，选择New–&gt;Module,选择Maven，然后点击next，然后呢artifactId给项目取名为cloud-demo-provider，现在服务提供者项目就创建好了。因为接下来我们测试需要访问程序，所以接着我们引入所需的web依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在resources文件夹下新建application.properties或者application.yml（二者任选其一），添加如下配置:</p><p>properties文件这样写</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.<span class="attribute">name</span>=provider-demo</span><br><span class="line">server.<span class="attribute">port</span>=8078</span><br></pre></td></tr></table></figure><p>yml这样写</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  application:</span></span><br><span class="line"><span class="symbol">    name:</span> provider-demo</span><br><span class="line"><span class="symbol">server:</span></span><br><span class="line"><span class="symbol">  port:</span> <span class="number">8078</span></span><br></pre></td></tr></table></figure><p>spring.application.name呢，意思是给给项目起个名字叫做provider-demo</p><p>server.port呢，指定项目启动时的端口为8078</p><p>3.在Java文件夹下创建包cn.org.zhixiang（这个包名是我的网站域名的反转，大家可以自行定义）,在此包下新建CloudDemoProviderApplication类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.org.zhixiang;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudDemoProviderApplication</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(CloudDemoProviderApplication.<span class="keyword">class</span>, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@SpringBootApplication注解呢是SpringBoot的一个组合注解，主要注解为@Configuration、@EnableAutoConfiguration、@ComponentScan</p><p>我们使用SpringBoot启动项目时一般都会使用此注解，一会启动项目的时候我们在这个类中右键选择run CloudDemoProviderApplication 就可以启动了</p><p><img src="/2018/07/26/每天学点SpringCloud（一）：使用SpringBoot2-0-3整合SpringCloud/2.png" alt="1"></p><p>4.在cn.org.zhxiang包下新建包domain,在domain包中创建一个User实体类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.在cn.org.zhxiang包下新建包controller,在controller包中创建一个类UserController</p><p>`</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = <span class="meta-string">"/getUser/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> User getUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id)&#123;</span><br><span class="line">        User user=new User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"张三"</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = <span class="meta-string">"/getName"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"张三"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController注解呢，其实就是@ResponseBody ＋ @Controller的组合注解，@GetMapping呢，相当于<br><code>@RequestMapping(value=&quot;&quot;, method = RequestMethod.GET)</code></p><p>现在我们这个Provider的项目的目录结构应该是这样的：</p><p><img src="/2018/07/26/每天学点SpringCloud（一）：使用SpringBoot2-0-3整合SpringCloud/3.png" alt="1"></p><p>6.安装刚才所说的启动项目，打开浏览器访问http://localhost:8078/user/getUser/3 。如果浏览器返回一个json {“id”:3,“name”:“张三”,“age”:18}，那么就代表我们的服务提供者写好了。</p><p>创建服务消费者<br>1.同服务提供者的套路，我们创建一个名为cloud-demo-consumer的工程，他也只需要依赖web模块，在application.properties或者application.yml配置端口为8088，应用名称为consumer-demo。</p><p>2.创建cn.org.zhixiang包，创建CloudDemoConsumerApplication类。不同于提供者的是，这次启动类中需要增加一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudDemoConsumerApplication</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      SpringApplication.run(CloudDemoConsumerApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestTemplate类呢，是一个对于HTTP请求封装的一个类，相信大家都知道我们使用原生API访问一个URL需要的代码是很多的，这个呢，就是一个封装简化的版本。</p><p>@Bean注解呢，其实就等同于以前在xml中配置的如下代码</p><p>`</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"restTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.client.RestTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的，在此项目中增加一个User类，与提供者一样。</p><p>而UserController就不一样了</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/getUser/&#123;id&#125;"</span>)</span><br><span class="line">    public User getUser(<span class="variable">@PathVariable</span> Long id)&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">restTemplate</span><span class="selector-class">.getForObject</span>(<span class="string">"http://localhost:8078/user/getUser/"</span>+id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的getUser方法没有自己实现，而是调用的服务提供者的getUser方法。</p><p>接着呢，我们首先启动服务提供者，然后再启动消费者，当我们访问http://localhost:8088/user/getUser/3 时同样也能取得结果，这样一个简单的SpringCloud项目的服务提供者和消费者就已经完成了。</p><p>GitHub：<a href="https://github.com/shiyujun/spring-cloud-demo" target="_blank" rel="noopener">https://github.com/shiyujun/spring-cloud-demo</a></p><p>码云：<a href="https://gitee.com/zhixiang_blog/spring-cloud-demo" target="_blank" rel="noopener">https://gitee.com/zhixiang_blog/spring-cloud-demo</a></p><p>如果对您有所帮助，请记得帮忙点一个star哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/2018/07/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>状态模式：允许一个对象在其内部状态改变时改变其行为。</p><p>举一个简单的小例子，我们在对一个小姐姐搭讪的时候，根据小姐姐的心情如何我们可能会得到不同的回复。</p><p>看一下类图</p><p><img src="/2018/07/26/状态模式/1.png" alt="1"></p><p>Girl：抽象状态接口：用于封装男孩对象搭讪小姐姐获得回复的接口<br>AngryGirl、HappyGirl:两个状态实现类。不同的状态就对应了男孩在不同时刻获得的回复。<br>Boy：持有一个状态实例。</p><p>看一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AngryGirl</span> <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"滚"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HappyGirl</span> <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好哦，小哥哥"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Girl girl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGirl</span><span class="params">(Girl girl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl=girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，Boy持有不同状态的Girl对象时获取的回复是不同的，这样就实现了一个简单的状态模式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2018/07/26/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>备忘录模式：在不破坏封装的条件下，将一个对象的状态捕捉住，并在外部化存储起来，从而可以在将来合适的时候把这个对象还原到存储时的状态。</p><p>通常的备忘录模式包含3个角色：</p><p>发起人角色：这个角色就是需要被保存状态的角色<br>备忘录角色：负责保存发起人角色的状态的对象<br>负责人角色：负责保存备忘录对象，且它不能看到备忘录的内容</p><p>我们通过一个简单的例子来描述一下这几个角色：</p><p>我们知道现在有很多小姐姐喜欢自拍，而已有的是很火辣的那种不能为外人道哉的。这些小姐姐通常把这类照片存在手机的私密相册中。</p><p>看一下这句话，能不能看出来备忘录3个角色分别对应的什么呢？</p><p>我知道厉害的你已经懂了，就算不懂也没关系，我们接着往下看：</p><p><img src="/2018/07/26/备忘录模式/1.png" alt="1"></p><p>Client:客户端，负责调用发起人和负责人<br>Girl：这个就是发起人了，她拍个每一个照片可以都看做是一种状态<br>Phone：负责人，顾明思议，这个是手机，它负责存储照片<br>Album：相册接口</p><p>看了类图你可能会感觉迷糊了，哎你不是说负责人不能看到备忘录的东西么，你这里面负责人可以直接持有了备忘录对象呀，它看不到啥呀，你这样搞小姐姐们的照片不就被公开了么？其实接着再往下看代码你就明白了</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">public interface Album &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Girl &#123;</span><br><span class="line">    private String <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">    public Album getPrivateAlbum()&#123;</span><br><span class="line">        return new PrivateAlbum(this.<span class="keyword">state</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public void restore(Album album)&#123;</span><br><span class="line">        PrivateAlbum privateAlbum =(PrivateAlbum)album;</span><br><span class="line">       this.<span class="built_in">set</span>State(privateAlbum.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getState() &#123;</span><br><span class="line">        return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="built_in">set</span>State(String <span class="keyword">state</span>) &#123;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class PrivateAlbum implements Album&#123;</span><br><span class="line">        private String <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">        private PrivateAlbum(String <span class="keyword">state</span>)&#123;</span><br><span class="line">            this.<span class="keyword">state</span>=<span class="keyword">state</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private String getState() &#123;</span><br><span class="line">            return <span class="keyword">state</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void <span class="built_in">set</span>State(String <span class="keyword">state</span>) &#123;</span><br><span class="line">            this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Phone &#123;</span><br><span class="line"></span><br><span class="line">    private  Album album;</span><br><span class="line"></span><br><span class="line">    public Album reductionAlbum() &#123;</span><br><span class="line">        return album;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void saveAlbum(Album album) &#123;</span><br><span class="line">        this.album = album;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    private static Girl xiaoWang=new Girl();</span><br><span class="line">    private static Phone phone =new Phone();</span><br><span class="line"></span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        xiaoWang.<span class="built_in">set</span>State(<span class="string">"三点式"</span>);</span><br><span class="line">        phone.saveAlbum(xiaoWang.getPrivateAlbum());</span><br><span class="line">        System.<span class="keyword">out</span>.println(xiaoWang.getState());</span><br><span class="line">        xiaoWang.<span class="built_in">set</span>State(<span class="string">"丝袜制服式"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(xiaoWang.getState());</span><br><span class="line">        xiaoWang.restore(phone.reductionAlbum());</span><br><span class="line">        System.<span class="keyword">out</span>.println(xiaoWang.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>告诉我你看到了什么？相册接口仅仅作为标示接口存在的，它的实现是Girl里面的一个私有内部类PrivateAlbum 类，这个类啊，是一个加密相册，在其余任何地方都是看不到的，只有小姐姐自己可以看见，妥妥的安全。</p><p>现在，你get到备忘录模式了么？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的web攻击手段</title>
      <link href="/2018/07/26/%E5%B8%B8%E8%A7%81%E7%9A%84web%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/"/>
      <url>/2018/07/26/%E5%B8%B8%E8%A7%81%E7%9A%84web%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2><span id="xss跨站脚本攻击">XSS：跨站脚本攻击</span></h2><h3><span id="-典型实例为">-典型实例为：</span></h3><p>当用户在表达输入一段数据后，提交给服务端进行持久化。如果此用户输入的是一段脚本语言，而服务端</p><p>用户输入的数据没有经过转码、校验等就存入了数据库，在其他页面需要展示此数据时，就会执行此用户输入的语言。简单来说，JS的强大不用我来解释吧</p><h3><span id="-推荐防御措施">-推荐防御措施：</span></h3><p>对用户输入的信息进行转义，例如&lt;&gt;'等等特殊字符。当然，其实很多前端框架也支持这么做，快查一查你使用的框架支持么。</p><h2><span id="crsf跨站请求伪造">CRSF：跨站请求伪造</span></h2><h3><span id="-典型实例为">-典型实例为：</span></h3><p>如果A银行存在CRSF漏洞，有用户在登陆完A银行后没有退出，A银行的cookie信息保存在浏览器。然后呢，用户不小心进入了恶意网站，</p><p>此网站识别出了用户客户端存在A银行的信息，那么恶意网站就可以根据此cookie去请求A银行的转账接口，那么A银行会误认为是用户进行操作从而使恶意网站得逞。</p><h3><span id="-推荐防御措施">-推荐防御措施：</span></h3><p>假如我们的网站是A银行，为了防止用户信息泄露，我们应该做这三件事：</p><p>将cookie设置为HttpOnly，让恶意网站无法通过脚本获取到cookie<br>所有增删改以及需要验证权限的请求都应该携带token<br>Http头中有一个Referer属性，此属性表示请求Url地址，验证每一个请求的Referer是不是由自己系统发起的</p><h2><span id="sql注入">SQL注入</span></h2><h3><span id="-典型实例为">-典型实例为：</span></h3><p>用户输入的信息带有 delete 、drop等危害性十足的sql，就像用户登录时输入了用户名 “aaa;drop table user”,那么在我们没有任何防御措施的情况下就会变为“select * from user where username=‘aaa’;drop table user”。然后呢，表就没了，你说尴不尴尬？</p><h3><span id="-推荐防御措施">-推荐防御措施：</span></h3><p>使用原生jdbc时要使用PreparedStatement 而不要使用Statement，<br>使用orm框架，像MyBatis、Hibernate等框架都对sql注入进行了很好的预防<br>密码任何时候都不要使用明文存放，避免攻击者直接获取用户信息<br>后台发生错误时不要直接返回异常信息，避免对服务器信息的泄露。建议对异常进行封装，返回可控的异常信息。</p><h2><span id="文件上传漏洞">文件上传漏洞</span></h2><h3><span id="-典型实例为">-典型实例为：</span></h3><p>没有对用户上传的文件做校验，恶意用户长时间上传超大文件占用系统资源，上传可执行脚本获取获取服务器信息</p><h3><span id="-推荐防御措施">-推荐防御措施：</span></h3><p>对用户上传做限流，每个用户每天最多上传多少内容。<br>对文件类型进行判断，不能通过后缀名判断，而要通过判断魔数（文件起始的几个字节）来判断，很多文件类型的魔数是不变的。</p><h2><span id="ddos分布式拒绝服务攻击">DDOS：分布式拒绝服务攻击</span></h2><h3><span id="-典型实例为">-典型实例为：</span></h3><p>1.攻击者提前控制大量计算机，并在某一时刻指挥大量计算机同时对某一服务器进行访问来达到瘫痪主机的目的。</p><p>2.相信大家都知道TCP三次握手的机制，（如不了解请参考文章底部补充）攻击者利用此机制对服务器返回的ACK确认包不回应，这样服务器就会存在大量的等待列表，不断重试，等待队列满了以后不再接受TCP连接，从而阻挡了正常用户的使用</p><p>3.攻击者向DNS服务器发送海量的域名解析请求，DNS首先查缓存，如果缓存不存在的话会去递归调用上级服务器查询，直到查询到全球13台根服务器为止，当解析请求过多时正常用户访问就会出现DNS解析超时问题</p><h3><span id="-推荐防御措施">-推荐防御措施：</span></h3><p>使用缓存，当缓存中存在时就直接取出，不要频繁的连接数据库。</p><p>缩短SYN Timeout时间，即缩短从接受到SYN报文到确定这个报文无效并丢弃该连接的时间。</p><p>限制源ip每秒发起的DNS请求等</p><h2><span id="补充tcp三次握手机制">补充：TCP三次握手机制</span></h2><p>首先，请求端（客户端）发送一个包含SYN标志的TCP报文，SYN即同步（Synchronize），同步报文会指明客户端使用的端口以及TCP连接的初始序号；</p><p>第二步，服务器在收到客户端的SYN报文，将返回一个SYN+ACK的报文，表示客户端的请求被接受，同时TCP序号被加一，ACK即确认（Acknowledgment）。</p><p>第三步，客户端也返回一个确认报文ACK给服务器端，同样TCP序列号被加一，到此一个TCP连接完成。</p><h2><span id="结语">结语</span></h2><p>写这篇文章的目的呢，其实不是说让大家通过这篇文章成为一个安全高手或者怎么的，只是想让大家了解一下这些常见的攻击手段。当你知道了这些攻击手段后看一下你手中的项目是否需要预防一下，毕竟未雨绸缪总是比临阵磨枪好的多，不是吗？</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2018/07/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>命令模式：把命令包装成对象，将命令发送者和命令接受者的耦合降低</p><p>举个例子，皇帝发圣旨招一个大臣入宫。</p><p>这里的皇帝就是客户端，而圣旨就是命令，大臣就是命令接受者。那么命令发送者通常都是某个公公对吧。这里就是一个命令模式的实践，为什么这样说呢？平常我们写代码都是一个方法直接调用另一个方法，这样耦合性太高了，你总不能让皇帝跑到大臣家告诉他找他有点事吧，要是都这样皇帝不就累死了。皇帝要做的就是指定命令交个哪一个公公，让公公这个命令发送者带着这个命令去找命令接受者，皇帝就在皇宫等着大臣来就行了，而不用关心这从命令交给发送者到命令接受者接收到命令的时候发生了什么。</p><p>我们看一下这个类图：<br><img src="/2018/07/26/命令模式/1.png" alt="1"><br>Client：皇帝，也就是客户端角色。他指定了圣旨的内容，谁是命令发送人，谁是命令接受者。<br>Request：公公，也就是命令发送者，他负责带着命令去找接受者<br>Command：命令接口，例如说所有的圣旨都要有奉天承运，皇帝诏曰等等。<br>Command：具体命令，在这里就是宣这个大臣进宫的圣旨<br>Reception：命令接受者,命令接受者，也就是大臣了。</p><p>下面来看一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Reception reception=<span class="keyword">new</span> Reception();</span><br><span class="line">        Command command=<span class="keyword">new</span> CommandImpl(reception);</span><br><span class="line">        Request request=<span class="keyword">new</span> Request(command);</span><br><span class="line">        request.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command=command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.excute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandImpl</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reception reception;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandImpl</span><span class="params">(Reception reception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reception=reception;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reception.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"臣接旨..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的一个简单的例子就是入门命令模式的demo了，你get到了么？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2018/07/26/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>责任链模式：很多对象由每一个对象对其下家的引用而连接起来行成的一条链。</p><p>其实责任链模式一直在我们的身边。某一天，董事长有个想法，他吩咐给了经理，经理吩咐给了组长，组长分配给了你我。这时候我们发现，我们没有下级了呀，咋办，那就干呗。</p><p>上方这个任务分配的过程就是责任链模式，一个事件会一直向下层传递，董事长并不关心是谁解决的这个问题，对他来说只要问题解决了就行。</p><p><img src="/2018/07/26/责任链模式/1.png" alt="1"></p><p>Handle：抽象处理者，可理解为抽象的员工（经理组长普通程序员等都是继承了员工）<br>Handle：具体处理者：具体做事的人（具体某一个经理组长普通程序员等）<br>Client：客户端</p><p>来看一下代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handle next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handle next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleImpl</span> <span class="keyword">extends</span> <span class="title">Handle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"调用下级处理"</span>);</span><br><span class="line">            next.handleRequest();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"请求处理中。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">            Handle handle1=<span class="keyword">new</span> HandleImpl();</span><br><span class="line">            Handle handle2=<span class="keyword">new</span> HandleImpl();</span><br><span class="line">            Handle handle3=<span class="keyword">new</span> HandleImpl();</span><br><span class="line">            handle1.setNext(handle2);</span><br><span class="line">            handle2.setNext(handle3);</span><br><span class="line">            handle1.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方代码运行过程就像文章开始时我们所举得例子，只要它存在下级就会把请求交给下级去处理，这就是典型的责任链模式</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式：多个观察者对象同时观察一个主题对象，当这个主题对象发生变化时，会通知所有的观察者</p><p>来看一下下方类图</p><p><img src="/2018/07/26/观察者模式/1.png" alt="1"></p><p>Subject：主题类，所有主题的父类，负责对观察者的管理，有添加观察者，删除观察者，通知所有的方法<br>SubjectImpl：主题子类，拥有状态属性，当状态改变时会调用父类的notifyObserver方法通知所有观察者<br>Observe：观察者，定义了接受主题变化通知的方法<br>ObserveImpl：观察者实现类，实现了update（）方法用于接受通知</p><p>下面给出代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        list.forEach((observer)-&gt;observer.update());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectImpl</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state=<span class="string">"new"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state=<span class="string">"old"</span>;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverImpl</span> <span class="keyword">implements</span>  <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象更新了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2018/07/26/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>模板方法：在一个抽象类中定义一部分的实现，其余的定义抽象方法迫使子类实现</p><p>相信看了上方的定义以后大家已经理解了模板模式，我们来看一下类图</p><p><img src="/2018/07/26/模板模式/1.png" alt="1"></p><p>抽象类定义了4个方法，其中operation是私有的，在这个方法里调用了其他三个方法，而方法3是自己实现的。方法1和2是强迫子类实现的。</p><p>ClassImpl1，ClassImpl2都继承了抽象类，并分别对方法1和2进行了不同的实现</p><p>我们来看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        operation1();</span><br><span class="line">        operation2();</span><br><span class="line">        operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassImpl1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassImpl2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/07/26/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>策略模式：使算法在不影响客户端的情况下发生变化。</p><p>例如某宝上的一件商品，有时候8折并返现3元、有时候7折返现1元、有时候9折不返现、有时候不打折返现2元等等，我们可以看到这个商品不同时刻要计算利润或者什么的时候是不一样的，现在就可以用到策略模式了。</p><p><img src="/2018/07/26/策略模式/1.png" alt="1"></p><p>代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Algorithm</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">abstract</span> void method();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Algorithm1</span> <span class="keyword">extends</span> <span class="title">Algorithm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void method() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Algorithm2</span> <span class="keyword">extends</span> <span class="title">Algorithm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void method() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Algorithm3</span> <span class="keyword">extends</span> <span class="title">Algorithm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void method() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Algorithm</span> algorithm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要更换算法实现的时候我们只需要更换Client对象持有的Algorithm的实现就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥梁模式</title>
      <link href="/2018/07/26/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>桥梁模式：将抽象化与实现化脱藕，使二者可以独立的变化</p><p>大家应该对日志记录比较熟悉，不知道有没有自己写过一个日志处理的程序，你又是如何实现的呢？</p><p>今天的桥梁模式就根据一下需求来分析一下：</p><p>支持2个以上平台<br>支持2个以上格式<br>大家可以看一下这个需求哈，2个以上，那我就实现2个呗，一般人可能都会这样想。然后开始写，比如Windows存Txt格式、Windows存Xml格式、Linux存Txt格式的、Linux存Xml格式的，刷刷刷分分钟的就写好了。</p><p>但是如果了解过设计模式的童鞋肯定不会这样想，2个，骗鬼吧，以后可能得20个吧。我们看一下上方的写法，2个平台2个格式那就是4个方法，4个平台4个格式可就是16个，这个实现恐怕帮你review的同事会鄙视死你吧。</p><p>下面咱们就看看用桥接模式是如何实现的吧</p><p><img src="/2018/07/26/桥梁模式/1.png" alt="1"></p><p>大家可以看到，桥梁模式把平台相关的和日志格式相关的分离开来，当增加新平台或者新格式时只需要添加各自的类就行了，完全不用更改其余的代码。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">   public <span class="keyword">abstract</span> void write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TxtLog</span> <span class="keyword">extends</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void write() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">XmlLog</span> <span class="keyword">extends</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void write() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Log</span> log;</span><br><span class="line">    <span class="type">LogMaker</span>(<span class="type">Log</span> log)&#123;</span><br><span class="line">        <span class="keyword">this</span>.log=log;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">abstract</span> void maker();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WindowsMaker</span> <span class="keyword">extends</span> <span class="title">LogMaker</span> </span>&#123;</span><br><span class="line">    <span class="type">WindowsMaker</span>(<span class="type">Log</span> log) &#123;</span><br><span class="line">        <span class="keyword">super</span>(log);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void maker() &#123;</span><br><span class="line">        log.write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinuxMaker</span> <span class="keyword">extends</span> <span class="title">LogMaker</span> </span>&#123;</span><br><span class="line">    <span class="type">LinuxMaker</span>(<span class="type">Log</span> log) &#123;</span><br><span class="line">        <span class="keyword">super</span>(log);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void maker() &#123;</span><br><span class="line">        log.write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2018/07/26/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>外观模式：外部系统与子系统的通信必须通过一个统一的对象进行</p><p>举个例子，现在结婚是不是都找婚庆公司啊，为什么呢？因为如果不找婚庆公司自己筹备的话，我们可能得自己跑去订酒店，自己去找主持人，自己去找摄像，自己去找车队。是不是太麻烦了点，而有了婚庆公司就不一样了，我可以吩咐他去找酒店，找主持人等等。。。</p><p>来看一下类图：</p><p><img src="/2018/07/26/外观模式/1.png" alt="1"></p><p>在这里Facade就相当于婚庆公司的角色，我们作为client直接调用Facade的方法，而不关心车队、酒店、主持人等是如何找到的。<br>代码实现：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Car</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Host</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">married</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hotel</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">party</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Facade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Host host =<span class="keyword">new</span> Host();</span><br><span class="line">    <span class="keyword">private</span> Hotel hotel =<span class="keyword">new</span> Hotel();</span><br><span class="line">    <span class="keyword">private</span> Car car=<span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">married</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        host.married();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        car.carList();</span><br><span class="line">    &#125; <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">party</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        hotel.party();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2018/07/26/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>享元模式：以共享的方式高效的支持大量的细粒度对象</p><p>我们以咖啡为例，一家咖啡店一天卖出几千杯咖啡其实这几千杯也不过是几十种口味。在Java中你觉得是new几千次咖啡好还是new几十次口味好呢？享元模式就是利用的这个原理来共享的变量了。</p><p>来看一下类图：</p><p><img src="/2018/07/26/享元模式/1.png" alt="t"></p><p>FlavorFactory：口味工厂，根据客户所需口味生产咖啡<br>Client：售货员，负责通知工厂生产咖啡，以及出售咖啡和统计销售情况<br>Coffee：咖啡接口<br>Flavor：咖啡口味，实现了咖啡接口，并且持有一个口味属性，记录此咖啡的口味。<br>来看一下代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Coffee</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlavor</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Flavor</span> <span class="title">implements</span> <span class="title">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String flavor;</span><br><span class="line">    Flavor(String flavor)&#123;</span><br><span class="line">        <span class="keyword">this</span>.flavor=flavor;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFlavor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.flavor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FlavorFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Coffee&gt; flavorMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">getCoffee</span>(<span class="params">String flavor</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flavorMap.<span class="keyword">get</span>(flavor)!=<span class="literal">null</span>)&#123;</span><br><span class="line">            flavorMap.put(flavor,<span class="keyword">new</span> Flavor(flavor));</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> flavorMap.<span class="keyword">get</span>(flavor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">flavorNum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flavorMap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> coffeeNum;</span><br><span class="line">    <span class="keyword">private</span> FlavorFactory flavorFactory;</span><br><span class="line">    Client(FlavorFactory flavorFactory)&#123;</span><br><span class="line">        <span class="keyword">this</span>.flavorFactory=flavorFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span>(<span class="params">String flavor</span>)</span>&#123;</span><br><span class="line">        flavorFactory.getCoffee(flavor);</span><br><span class="line">        coffeeNum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">statistics</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"共卖出咖啡"</span>+coffeeNum+<span class="string">"杯"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"共卖出风味"</span>+flavorFactory.flavorNum()+<span class="string">"种"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实大家看了代码就明白了享元模式的核心思想，那就是重复利用以及存在的对象</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合成模式</title>
      <link href="/2018/07/26/%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>合成模式的职责是将对象组织到树结构中</p><p><img src="/2018/07/26/模式/1.png" alt="图片"></p><p>观察上方类图：</p><p>interface，一个接口定义了一个获得当前对象名字的方法<br>leaf：树中的叶子节点，实现了interface<br>Branch：树枝节点，不仅实现了getName方法，同样它本身具有添加节点删除节点的方法且本身可以包含多个树枝节点以及叶子节点<br>通过上述结论我们可以发现其实合成模式就是树的结构的实现</p><p>来看一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Compent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Branch</span> <span class="keyword">implements</span> <span class="title">Compent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Compent&gt; compent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this name"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//内部实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//内部实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Compent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this name"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式</title>
      <link href="/2018/07/26/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>装饰模式：以对客户端透明的方式扩展对象的功能</p><p>装饰模式类图如下：</p><p><img src="/2018/07/26/装饰者模式/1.png" alt="图片"></p><p>我们分析一下类图：</p><p>Girl：女孩接口，定义了一个getName（）方法<br>XiaoWang：女孩的实现类，她实现了getName方法，<br>Decorator：装饰类，当我们想要扩展小王的方法时，又不能改变她的代码，也不推荐使用继承，那么这个时候装饰类就上场了。此装饰类对小王进行了包装，由他来提供小王的方法<br>Decorator1，Decorator2：当我们想要对小王装饰的时候就可以使用此装饰类<br>让我们来看一下代码实现吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoWang</span> <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小王"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Girl girl;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Girl girl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl=girl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator1</span> <span class="keyword">extends</span> <span class="title">Decorator</span>  </span>&#123;</span><br><span class="line">    Decorator1()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Decorator1(Girl girl)&#123;</span><br><span class="line">        <span class="keyword">super</span>(girl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小王1"</span>);</span><br><span class="line">         <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator2</span> <span class="keyword">extends</span> <span class="title">Decorator</span>  </span>&#123;</span><br><span class="line">    Decorator2()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Decorator2(Girl girl)&#123;</span><br><span class="line">        <span class="keyword">super</span>(girl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小王2"</span>);</span><br><span class="line">         <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要对小王装饰的时候只需要下面如此调用就行了</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">  Girl girl=  <span class="keyword">new</span> <span class="type">Decorator1</span>(<span class="keyword">new</span> <span class="type">Decorator2</span>(<span class="keyword">new</span> <span class="type">XiaoWang</span>()));</span><br><span class="line">  girl.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2018/07/26/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适配器模式：把一个类的接口转换为客户端需要的另一个接口</p><p>比如说，我们去相亲，目标中的女孩是会唱歌会跳舞的女孩，但是介绍人说这个女孩只会唱歌，不会跳舞，那你肯定不会满意呀。不过介绍人说，没关系，我有办法。哦？那我们来看看他有什么办法呢</p><p><img src="/2018/07/26/适配器模式/1.png" alt="图片"></p><p>上方Girl接口就是我们希望女孩的样子，也就是女孩接口，会唱歌会跳舞。<br>这个SimpleGirl就是介绍人一开始说的只会唱歌的女孩<br>下方Adapter就是介绍人的方法了，它就是通过这个类让我们实现了梦想中的女孩，来看一下实现吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleGirl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>  <span class="keyword">implements</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">    SimpleGirl girl;</span><br><span class="line"></span><br><span class="line">    Adapter(SimpleGirl girl)&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl=girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        girl.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现的原理呢其实就是在女孩类的外面包装了一层，使她学会了跳舞的方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2018/07/26/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>简单工厂：</p><p>入门级的设计模式之一，也是学习工厂模式的的基础。</p><p>需求：假如我们需要去相亲，介绍人跟你说了，我这次给你找了很多个小姑娘，随便挑哦。</p><p>听到这句话你就好奇了，哎呦，你好厉害呀，怎么做到的呢，下面我们就来看看介绍人是怎么做到吧。</p><p>注：不熟悉UML的同学请参考此文章:几分钟几张图教你学会如何使用UML<br><img src="/2018/07/26/工厂模式/1.png" alt="图片"></p><p>首先最上方就是所有女孩必须要实现的接口，它定义了一个自我介绍的方法，所有的女孩都要实现它。<br>下面给出的两个实现类分别为一个温柔的女孩还有一个彪悍的女孩<br>而工厂类型提供了一个getGirl方法，根据客户的要求，提供对应的女孩。<br>来看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SimpleInterface</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenderGirl</span> <span class="keyword">implements</span>  <span class="title">SimpleInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人家是一个淡淡的女子。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToughGirl</span> <span class="keyword">implements</span>  <span class="title">SimpleInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你瞅啥。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleInterface <span class="title">getGirl</span><span class="params">(String type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SimpleInterface girl=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;        <span class="comment">//注意此处jdk1.8以后才支持此写法</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"温柔"</span>:</span><br><span class="line">                girl=<span class="keyword">new</span> TenderGirl();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"彪悍"</span>:</span><br><span class="line">                girl=<span class="keyword">new</span> ToughGirl();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Not Girl"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方给出了一个简单工厂的简单实现，但是仔细一想，不对呀，那要是再来个例如高冷类型的女孩子怎么办呀，难道我们要去修改getGirl方法么，这样可不符合我们的开闭原则呀。那要不我们就看工厂模式有没有解决这个问题吧</p><p>工厂模式：</p><p><img src="/2018/07/26/工厂模式/2.png" alt="图片"></p><p>工厂模式与简单工厂的区别就是把原先的工厂类抽象出来了，这个时候每当增加一个女孩的时候我们不需要修改代码，只需要增加一个工厂就够了。来看一下实现吧（注：女孩的接口和实现类请参考上方的简单工厂，这里就不给出了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">getGirl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenderGirlFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">getGirl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TenderGirl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToughGirlFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">getGirl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ToughGirl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂：</p><p>抽象工厂的出现目的是为了解决产品族的问题，什么是产品族呢？</p><p>举一个离我们最近的例子：我们在开发中使用最多的是什么，电脑。我们有的人电脑是Windows的有的是Linux的当我们开发的时候需要很多的软件，JDK和Tomcat等，不同的系统安装不同格式的软件，这里不同格式的软件就是产品族了。先来看一下类图</p><p><img src="/2018/07/26/工厂模式/3.png" alt="图片"></p><p>这个类图初看可能比较复杂，但是我想它还是很好理解的</p><p>我们看一下工厂类，抽象工厂定义接口，Linux工厂和Windows分别生成试用自己系统的软件<br>JDK类和Tomcat类就负责了自己的职责，分别提供支持两种系统的软件<br>如果后期增加Unix系统也不会对原有的系统进行更改，完全符合开闭原则。</p><p>那么，你get到了工厂模式了么？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找法</title>
      <link href="/2018/07/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/"/>
      <url>/2018/07/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>二分查找又称折半算法，此算法作为一个经典的查找算法是我们不得不掌握的算法<br>这个算法查找的前提是查找的数据是有序的，我们以数组为例，使用二分查找法进行查找的时候我们应该先定义三个字段：</p><p>1.left指向数组第一个数据</p><p>2.right指向数组最后一个元素</p><p>3.mid呢指向（left+right）/2位置的元素，就是他们中间的位置。</p><p>当我们要在一个数组中查找一条数据a时，有这么几个步骤：</p><p>首先我们拿a与mid比较，如果a与mid相等那么我们就成功找到了这个数据，程序停止。<br>如果a比mid小进行第3步,如果a比mid大进行第4步<br>既然a小于mid，那么mid与right之间的数肯定比a大，所以我们忽略它们，紧接着把right指向mid的前一个位置。（你可能会问为啥指向前一个位置不指向mid呀，因为我们已经确定了mid不等于a，那么我们就不需要在比较他了）<br>既然a大于mid，那么mid与left之间的数肯定比a小，所以我们忽略它们，紧接着把left指向mid的后一个位置。（不明白可以参考3哦）<br>如果left不大于right那么我们就还没有查找完毕，继续进行第一步。如果left已经大于了right，那么就代表在这个数组里我们没有找到想要的数据。<br>建议对二分查找不太熟悉的同学可以先在草稿纸上、电脑上或者脑海里定义一个0-16的有序数组跟着上边的步骤来查找一下数据5。</p><p>下面这个图是我画的图，来看一下跟你画的步骤或者想象的步骤一样么<br><img src="/2018/07/26/二分查找法/1.png" alt="图片"></p><p>如果上图你已经看明白了的话那么接下来我们就上代码吧，</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static void <span class="keyword">select</span>(<span class="built_in">int</span>[]num,<span class="built_in">int</span> a)&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">right</span>=num.length<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">int</span> m=(<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">left</span>&lt;=<span class="built_in">right</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[m]==a)&#123;</span><br><span class="line">            System.out.println(<span class="string">"在"</span>+m+<span class="string">"位置找到"</span>);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num[m]&gt;a)&#123;</span><br><span class="line">            <span class="built_in">right</span>=m<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">left</span>=m+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m=(<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"没找到"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法使用了一个普通的循环的方式，二分还存在一种递归的写法，这里也分享出来</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static void <span class="keyword">select</span>(<span class="built_in">int</span>[]num,<span class="built_in">int</span> a,<span class="built_in">int</span> <span class="built_in">left</span>,<span class="built_in">int</span> <span class="built_in">right</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">left</span>&gt;<span class="built_in">right</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"没找到"</span>);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> m=(<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(num[m]==a)&#123;</span><br><span class="line">            System.out.println(<span class="string">"在"</span>+m+<span class="string">"位置找到"</span>);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num[m]&gt;a)&#123;</span><br><span class="line">            <span class="built_in">right</span>=m<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">select</span>(num, a,<span class="built_in">left</span>,<span class="built_in">right</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">left</span>=m+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">select</span>(num, a,<span class="built_in">left</span>,<span class="built_in">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分查找法讲到这里已经讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用原生JS加CSS样式实现图片点击放大缩小功能 </title>
      <link href="/2018/07/26/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%8A%A0CSS%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/07/26/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%8A%A0CSS%E6%A0%B7%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E7%BC%A9%E5%B0%8F%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>前几天网站测试的时候发现了博客中的图片的有的太小了看不清楚，随想到了使用一个图片放大的插件，不过度娘了好几分钟以后实在没有找到比较优雅的。然后就自己写了一个，在这里分享给大家。</p><p>对比我度娘的结果，此功能实现没有基于任何框架，原生js、css和html就可以实现,相信聪明的你看了就明白了。</p><p>因为我的网站不是博客么，当我的一篇博客从后台查询出来的时候，有一个字段会记录博客的正文。我们需要放大的图片就在这个正文里了。</p><p>首先我先调用了一个方法为我的正文做了一下转换：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imgHander(context) &#123;</span><br><span class="line">    <span class="keyword">var</span> subStr=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'&lt;img'</span>,<span class="string">'ig'</span>);</span><br><span class="line">    <span class="keyword">return</span> context.replace(subStr, <span class="string">"&lt;img onclick='picBig(this)' "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我给正文中所有的img标签都添加了一个picBig函数,这个参数传递的是这个图片本身，那么这个函数又是怎么实现的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">picBig</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i=img.currentSrc;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'divCenter'</span>);</span><br><span class="line">    <span class="keyword">var</span> bigImg = <span class="built_in">document</span>.getElementById(<span class="string">'bigImg'</span>);</span><br><span class="line">    bigImg.src=i;</span><br><span class="line">    v.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致上呢，这个函数获取了调用者的图片地址，然后给了一个id为bigImg的img标签，然后呢又把一个di为divCenter的东西给设置了display</p><p>为显示。那么这两个东西又是什么呢，接着忘下看：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"divCenter"</span> align=<span class="string">"center"</span></span><br><span class="line">     style=<span class="string">"position: absolute; display: none;  width: 100%; height: 100%; overflow:auto;  position:fixed;z-index:9999;margin-top: 30px;"</span>&gt;</span><br><span class="line">    &lt;img <span class="built_in">id</span>=<span class="string">"bigImg"</span> <span class="built_in">class</span>=<span class="string">"bigImg"</span> onclick=<span class="string">"picClose();"</span></span><br><span class="line">            src=<span class="string">""</span> style=<span class="string">"width:90%;"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>看到这里相信你已经明白了，这个div会显示出来，并且我们刚才点击的图片大小会变成宽度为90%，其实我们的图片放大功能已经实现了不是么。接着图片缩小，是不是very easy，隐藏这个div就是了，点击图片时调用picClose函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">picClose</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="built_in">document</span>.getElementById(<span class="string">'divCenter'</span>);</span><br><span class="line">    v.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能已经完全实现了，如果你不着急走的话就在附送你两个小样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`<span class="selector-class">.blog</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>:<span class="built_in">url</span>(img/big.png),auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bigImg</span>  &#123;</span><br><span class="line">    <span class="attribute">cursor</span>:<span class="built_in">url</span>(img/small.png),auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方两个样式呢，第一个是当我们鼠标放在需要放大的图片上时会显示一个放大镜，第二个就是图片放大以后鼠标放上就会显示一个缩小的样式，在这里顺便把这两个icon附上。<img src="/2018/07/26/使用原生JS加CSS样式实现图片点击放大缩小功能/1.png" alt="图片"><img src="/2018/07/26/使用原生JS加CSS样式实现图片点击放大缩小功能/2.png" alt="图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ、新浪微博、码云和百度的第三方登录</title>
      <link href="/2018/07/26/%E3%80%81%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E3%80%81%E7%A0%81%E4%BA%91%E5%92%8C%E7%99%BE%E5%BA%A6%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2018/07/26/%E3%80%81%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E3%80%81%E7%A0%81%E4%BA%91%E5%92%8C%E7%99%BE%E5%BA%A6%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>很多网站在刚刚起步的时候都会使用第三方登录来吸引流量。当然，其中也包括我。我的网站上现在是接入了QQ、新浪微博、码云和百度的第三方登录功能.接入这些功能时我发现了一些规律，在这里分享给大家，大家需要接入的话看这一篇文章就可以了。<br>首先，第一步，也是不得不做的，进入你要接入的开放平台申请账号、填写资料等待审核等。填写资料的时候需要注意的地方是回调地址，这个回调地址就是用户在第三方平台登陆成功以后返回到你的程序的页面。以我的网站为例，我的回调地址就是个人中心，也就是说用户登陆后会进入个人中心页面。（在这里小小的吐槽一下wx，想要接入还得进行开发者认证，人民币300元，不知道为了啥）。</p><p>审核通过以后平台会给我们分配一个client_id和一个client_secret,请妥善保管，非常重要。接下来我们进入正题，先放一张图：</p><p>不了解UML的同学请先参照这篇文章 ：<a href="shiyujun.cn/2018/07/26/%E5%87%A0%E5%88%86%E9%92%9F%E5%87%A0%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%AD%A6%E4%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8UML">几分钟几张图教你学会如何使用UML</a><br><img src="/2018/07/26/、新浪微博、码云和百度的第三方登录/1.png" alt="图片"></p><p>上面这张我所精心绘画的流程图呢就是本篇博客的所有内容的核心了，所有的第三方登录几乎都是围绕着这么一个套路来进行的。</p><p>咱们来按着上方流程图来一步一步的入坑吧（我会同时附上四种登录方式）</p><p>在页面上放置登录按钮，类似于这种：<img src="/2018/07/26/、新浪微博、码云和百度的第三方登录/2.png" alt="图片">点击按钮的时候分别调用下列方法打开第三方登录地址</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.open(<span class="string">"https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=101453375&amp;redirect_uri=http://shiyujun.cn/%23/qqLogin&amp;state=1"</span>, <span class="string">'_self'</span>);</span><br><span class="line"></span><br><span class="line">window.open(<span class="string">"https://api.weibo.com/oauth2/authorize?client_id=3191489564&amp;response_type=code&amp;redirect_uri=http://shiyujun.cn/%23/login"</span>, <span class="string">'_self'</span>);</span><br><span class="line"></span><br><span class="line">window.open(<span class="string">"https://gitee.com/oauth/authorize?client_id=d69717952196dad2c1f2930e014230f75c1326bc98b3cb90e6dd36d4fb5d00ba&amp;redirect_uri=http%3A%2F%2Fshiyujun.cn%2F%23%2FgiteeLogin&amp;response_type=code"</span>, <span class="string">'_self'</span>);</span><br><span class="line"></span><br><span class="line">window.open(<span class="string">"http://openapi.baidu.com/oauth/2.0/authorize?client_id=rwjHEoVuPyxrgGOBwuyLEs5G&amp;redirect_uri=http%3A%2F%2Fshiyujun.cn%2F%23%2FbaiduLogin&amp;response_type=code"</span>, <span class="string">'_self'</span>);</span><br></pre></td></tr></table></figure><p>相信聪明的你看域名的话就可以看出来上方分别调用的是什么了。这里主要讲一下上方url中的几个参数。response_type=code:这个是固定值，不用管。client_id：这个值就是你审核通过以后获得的client_id，是第三方用来区分你的应用程序的唯一标示，redirect_uri：这个就是回调地址了，用户在第三方登录以后会携带着登录结果值访问回调地址。</p><p>2.用户登录成功第三方调用回调地址，回调我们的url大概为这种（<a href="http://qq.com?code=*****%EF%BC%89%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%9B%9E%E8%B0%83%E6%88%91%E4%BB%AC%E6%97%B6%E8%8E%B7%E5%8F%96%E8%BF%99%E4%B8%AAcode%E7%9A%84%E5%8F%82%E6%95%B0%E3%80%82%E6%8E%A5%E4%B8%8B%E6%9D%A5%E4%BD%BF%E7%94%A8code%E5%8F%82%E6%95%B0%E6%9D%A5%E8%AE%BF%E9%97%AE%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8E%BB%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7token,%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%88%86%E5%88%AB%E6%8B%BC%E6%8E%A5%E5%87%BA%E4%BB%A5%E4%B8%8Burl%EF%BC%9A" target="_blank" rel="noopener">http://qq.com?code=*****），我们在第三方回调我们时获取这个code的参数。接下来使用code参数来访问第三方去获取用户token,我们需要分别拼接出以下url：</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://api.weibo.com/oauth2/access<span class="emphasis">_token?client_</span>id=<span class="strong">****&amp;client_secret=**</span><span class="strong">***&amp;grant_type=authorization_code&amp;redirect_uri=**</span><span class="strong">****&amp;code=**</span><span class="strong">*****</span></span><br><span class="line">https://gitee.com/oauth/token?grant<span class="emphasis">_type=authorization_</span>code&amp;code=<span class="strong">*****</span><span class="strong">**client_id=**</span><span class="strong">**&amp;redirect_uri=**</span><span class="strong">*****</span><span class="emphasis">*&amp;client_secret=*</span><span class="emphasis">***</span>*</span><br><span class="line">https://graph.qq.com/oauth2.0/token?client<span class="emphasis">_id=****&amp;client_</span>secret=<span class="strong">*****</span>&amp;grant<span class="emphasis">_type=authorization_</span>code&amp;redirect_uri=<span class="strong">*****</span><span class="emphasis">*&amp;code=*</span><span class="strong">*****</span>*</span><br><span class="line">https://openapi.baidu.com/oauth/2.0/token?client<span class="emphasis">_id=****&amp;client_</span>secret=<span class="strong">*****</span>&amp;grant<span class="emphasis">_type=authorization_</span>code&amp;redirect_uri=<span class="strong">*****</span><span class="emphasis">*&amp;code=*</span><span class="strong">*****</span>*</span><br></pre></td></tr></table></figure><p>看了上方的url是不是已经发现了我说的为什么这些第三方登录都是一个套路了吧，这里所有的grant_type都是固定值，clien_id不用说，client_secret同样也是第三方给我们的，相信你不会陌生，redirect也不用说。紧接着就是发送Http请求了。这里码云的会有一个坑，在发送请求时必须携带一个header `（User-Agent：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36</p><p>）`不信的话可以试一试哦，如何在服务器发送http请求可以参考我的另一篇文章：Java工具类之在服务器发送HTTP请求</p><p>3.上述请求发送以后我们可以把返回结果转换为json对象，紧接着如果你在此json对象中获取一个key为access_token的值（同时，新浪微博要多获取一个uid字段）那么就代表你离成功又近了一步。你问我要是没有怎么办，没有请debug返回结果并参考各平台错误码确认。现在我认为你已经成功取到了token。</p><p>4.如果你是使用的第三方登录不是QQ的话请忽略这一步，QQ请先使用access_token访问下面这个地址获取一个openId</p><p><code>https://graph.qq.com/oauth2.0/me?access_token=*********</code><br>5.现在已经走到了最后一步了。继续http请求：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://api.weibo.com/2/users/show.json?access_token=<span class="strong">*****</span><span class="strong">**&amp;uid=**</span><span class="strong">*****</span>*</span><br><span class="line">https://gitee.com/api/v5/user?access_token=<span class="strong">*****</span>**</span><br><span class="line">https://openapi.baidu.com/rest/2.0/passport/users/getInfo?access_token=<span class="strong">*****</span>**</span><br><span class="line">https://graph.qq.com/user/get<span class="emphasis">_user_</span>info?access<span class="emphasis">_token=*******&amp;oauth_</span>consumer_key=<span class="strong">*****</span><span class="strong">****&amp;openid=**</span><span class="strong">*****</span></span><br></pre></td></tr></table></figure><p>上方我们唯一陌生的可能是QQ的oauth_consumer_key字段了，其实不陌生，他就是你的client_id.请求发送完毕以后就可以得到用户信息了，</p><p>参照平台的字段对应的意义我们选取需要的就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础命令</title>
      <link href="/2018/07/26/Redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/07/26/Redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1.安装配置<br>1.tar xzvf xxx.tar.gz</p><p>2.make,make install</p><p>3.cp -r xxx xx</p><p>启动服务：./redis-server</p><p>netstat -anp | grep 6379</p><p>. 启动客户端：/redis-cli</p><p>退出：quit</p><p>2.基础命令<br>exits、del、type、randomkey、rename、expire、ttl、select db-index、move key db-index、flushdb、keys *</p><p>String：<br><img src="/2018/07/26/Redis基础命令/1.png" alt="图片"></p><p>setex、setrange、mget、incr、decr、incrby、decrby、append、strlen。</p><p>hash：</p><p><img src="/2018/07/26/Redis基础命令/2.png" alt="图片"><br><img src="/2018/07/26/Redis基础命令/3.png" alt="图片"></p><p>list：<br><img src="/2018/07/26/Redis基础命令/4.png" alt="图片"></p><p>rpoplpush、lindex</p><p>set<br><img src="/2018/07/26/Redis基础命令/5.png" alt="图片"></p><p>zset</p><p><img src="/2018/07/26/Redis基础命令/6.png" alt="图片"><br><img src="/2018/07/26/Redis基础命令/7.png" alt="图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2018/07/26/%E5%BA%8F/"/>
      <url>/2018/07/26/%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>堆排序主要是运用了二叉树的性质来进行的排序。</p><p>在进行堆排序之前我们先了解一下二叉树的几个性质：</p><p>1.在排序使用二叉树的时候我们要排序的数组的第0个位置其实是不可以用的，这个时候如果我们要排序的数组为[3,1,0,2,8,4,2]时，我们首先要把它变为[0,3,1,0,2,8,4,2],我们把他转换为二叉树的时候是这样的<img src="/2018/07/26/序/1.png" alt="图片"></p><p>2.观察此二叉树我们可以发现几个公式：</p><p>父节点个数：（数组长度-1）/2<br>父节点索引为1到父节点个数<br>子节点的索引：左儿子为父节点索引*2，右儿子为左儿子索引+1<br>3.我们进行堆排序的时候一般先从最后的节点开始，先比较最后的子节点，找出较大的子节点与父节点比较，如果子节点大于父节点则子节点与父节点交换。此流程大概是这样的<br><img src="/2018/07/26/序/2.png" alt="图片"><br>明白了上方的概念以后我们可以就可以进行简单的操作了：</p><p>由公式所知，我们父节点的索引个数等于父节点个数（等于（数组长度8-1）/2）3个，那么最后一个父节点的索引就是3.<br>有了父节点索引我们就可以得到他的左孩子和右孩子的索引分别为6和7<br>我们先假设左孩子是子节点最大的，然后判断一下右孩子是否存在，如果存在再比较左右孩子得出最小的孩子。<br>比较最小孩子和父节点。如果孩子节点大于父节点则交换。<br>索引为3的父节点比较完了接着比较索引为2的父节点。。然后是为1的。<br>现在整个树上最大的元素已经在跟节点了，那么我们就把跟节点与最后一个节点交换一下位置。<br>再次回到1开始比较，不过需要注意的这次我们要把数组最后一个忽略。<br>接下来上代码</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="built_in">sort</span>(<span class="built_in">int</span> []arr,<span class="built_in">int</span> length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(length==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="built_in">int</span> i=(length<span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">       <span class="built_in">int</span> <span class="built_in">max</span>=i*<span class="number">2</span>;<span class="comment">//先假设最大的子节点为左儿子</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">max</span>+<span class="number">1</span>&lt;length&amp;&amp;arr[<span class="built_in">max</span>+<span class="number">1</span>]&gt;arr[<span class="built_in">max</span>])&#123;<span class="comment">//如果右儿子不超出数组下标且比左儿子大</span></span><br><span class="line">           <span class="built_in">max</span>++;<span class="comment">//最大的子节点为右儿子</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(arr[i]&lt;arr[<span class="built_in">max</span>])&#123; <span class="comment">//如果子节点大于父节点</span></span><br><span class="line">           swap(arr,i,<span class="built_in">max</span>);<span class="comment">//交换方法</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    swap(arr,<span class="number">1</span>,length<span class="number">-1</span>);<span class="comment">//将跟节点与数组最后一个节点交换</span></span><br><span class="line">    <span class="built_in">sort</span>(arr,length<span class="number">-1</span>);<span class="comment">//递归调用此方法，不过排序好的就不需要再次比较了，所以忽略它</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> swap(<span class="built_in">int</span> []arr,<span class="built_in">int</span> a ,<span class="built_in">int</span> b)&#123;</span><br><span class="line">    <span class="built_in">int</span> temp=arr[a];</span><br><span class="line">    arr[a] = arr[b];</span><br><span class="line">    arr[b] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> []args)&#123;</span><br><span class="line">    <span class="built_in">int</span> []arr = &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr,arr.length);</span><br><span class="line">    System.out.<span class="built_in">println</span>(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生JS获取表单得所有值</title>
      <link href="/2018/07/26/%E7%94%9FJS%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%BE%97%E6%89%80%E6%9C%89%E5%80%BC/"/>
      <url>/2018/07/26/%E7%94%9FJS%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%BE%97%E6%89%80%E6%9C%89%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>今天碰到了一个没有使用任何框架的表单，大概包含20多个属性，简单抽取几个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">id</span>=<span class="string">"auditFrom"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>房龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"houseAge"</span> <span class="attr">type</span>=<span class="string">"number"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>权属情况：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"houseOwner"</span> <span class="attr">type</span>=<span class="string">"text"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>是否抵贷不一：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"mortgageLoan"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>是<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>否<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>抵押情况：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"mortgage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>一抵<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>二抵<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>多抵<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>有无备用房信息：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"spareHouse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>有<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>无<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>放款金额：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fkAmount"</span> <span class="attr">type</span>=<span class="string">"text"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>备注：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"remark"</span> <span class="attr">type</span>=<span class="string">"textarea"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我要获取它的值时发现如果我要是写上20多个document.getElementById也太low了吧，所以就自己动手封装了一个小方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">formId</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">from</span>=<span class="built_in">document</span>.getElementById(formId);</span><br><span class="line"><span class="keyword">var</span> tagElements=<span class="keyword">from</span>.getElementsByClassName(<span class="string">'el-input'</span>);<span class="comment">//这里我把所有我要获取值得属性都使用了同一个类来标识；</span></span><br><span class="line"><span class="keyword">var</span> json=&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tagElements.length; j++)&#123;  </span><br><span class="line"><span class="keyword">var</span> name=tagElements[j].name;<span class="comment">//这里就是要获取得name属性，将此name属性作为json对象得key；</span></span><br><span class="line"><span class="keyword">var</span> value=tagElements[j].value;</span><br><span class="line">  json[name] = value; <span class="comment">//注意这里必须要使用这种方式给json赋值。如果使用json.name=value得话你会发现你所有的key都是一个字符串name，而不是name代表的值</span></span><br><span class="line">  &#125;  </span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法最后返回的json就是整个表单里的值了</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让你的网站免费使用阿里云的Https服务</title>
      <link href="/2018/07/26/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84Https%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/07/26/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84Https%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>刚刚给智享加上了Https,在这个过程中遇到了一些坑，特此记录一下</p><p>首先就是购买的时候第一个坑如下图所示<br><img src="/2018/07/26/如何让你的网站免费使用阿里云的Https服务/1.png" alt="图片"></p><p>进入了购买页面以后发现，what？怎么没有免费版。其实这个真的是它隐藏的太深了，我们按照下图所示，首先选择品牌为Symantec然后选择保护类型为1个域名以后就会出现</p><p>免费型的了<br><img src="/2018/07/26/如何让你的网站免费使用阿里云的Https服务/2.png" alt="图片"></p><p>接着就是证书购买以后进入我的控制台按照提示进行补全信息提交审核就可以了，个人感觉审核特别快，我的审核1分钟就搞定了。</p><p>审核结束就可以开始进行配置了，回到证书控制台点击下载按钮进入页面选择Tomcat标签点击下载</p><p><img src="/2018/07/26/如何让你的网站免费使用阿里云的Https服务/3.png" alt="图片"></p><p>下载完毕以后解压文件重点关注*.pfx和pfx-password.txt这两个文件，在我们的服务器上新建名为cert的文件夹，把这两个文件copy进来。紧接着，打开tomcat的server.xml文件</p><p>修改几处配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"443"</span></span><br><span class="line"> <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line"> <span class="attribute">SSLEnabled</span>=<span class="string">"true"</span></span><br><span class="line"> <span class="attribute">scheme</span>=<span class="string">"https"</span></span><br><span class="line"> <span class="attribute">secure</span>=<span class="string">"true"</span></span><br><span class="line"> <span class="attribute">keystoreFile</span>=<span class="string">"/usr/local/apache-tomcat-8.5.24/conf/cert/214750658330953.pfx"</span></span><br><span class="line"> <span class="attribute">keystoreType</span>=<span class="string">"PKCS12"</span></span><br><span class="line"> <span class="attribute">keystorePass</span>=<span class="string">"密码"</span></span><br><span class="line"> <span class="attribute">clientAuth</span>=<span class="string">"false"</span></span><br><span class="line"> <span class="attribute">SSLProtocol</span>=<span class="string">"TLSv1+TLSv1.1+TLSv1.2"</span></span><br><span class="line"> <span class="attribute">ciphers</span>=<span class="string">"TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256"</span>/&gt;</span><br></pre></td></tr></table></figure><p>注意上方keystorePass属性改为你pfx-password.txt文件中的密码，keystoreFile属性改为存放*.pfx文件的绝对路径。</p><p>注意如果使用的是阿里云服务器 port属性的端口号记得要在安全组配置。</p><p>如果你需要http和https双协议都支持的话，那么 完成以上操作就可以了，如果你想默认浏览器使用http也会重定向到htpps的话请继续忘下看。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"80"</span> <span class="attribute">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line">             <span class="attribute">connectionTimeout</span>=<span class="string">"20000"</span></span><br><span class="line">             <span class="attribute">redirectPort</span>=<span class="string">"443"</span></span><br><span class="line">  <span class="attribute">compression</span>=<span class="string">"on"</span>  </span><br><span class="line">  <span class="attribute">compressionMinSize</span>=<span class="string">"2048"</span></span><br><span class="line">  <span class="attribute">noCompressionUserAgents</span>=<span class="string">"gozilla, traviata"</span>  </span><br><span class="line">  <span class="attribute">compressableMimeType</span>=<span class="string">"text/html,text/xml,text/plain,text/css,application/javascript"</span> </span><br><span class="line">  <span class="attribute">useSendfile</span>=<span class="string">"false"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Connector <span class="attribute">port</span>=<span class="string">"8009"</span> <span class="attribute">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attribute">redirectPort</span>=<span class="string">"443"</span> /&gt;</span><br></pre></td></tr></table></figure><p>此处需要修改的属性为redirectPort，将所有的重定向端口改为443，当然，这些操作还不够，:wq保存退出，打开web.xml 在文件最下方加入下方配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">web-resource-collection</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">web-resource-name</span> &gt;</span>SSL<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<span class="name">transport-guarantee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user-data-constraint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，大公告成，:wq保存退出重启tomcat服务器访问一下试试看吧</p><p>完成以后部分人可能会出现一下情况<img src="/2018/07/26/如何让你的网站免费使用阿里云的Https服务/4.png" alt="图片"> 为啥没有安全锁🔒的标志呢，这个其实是因为你的程序发送的请求中包含了http情况，去检查一下程序的请求吧,如果你懒得去看的话那么就在你的程序起点head标签中增加一个标签</p><p><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code><br>强制转换所有的http请求为https请求。(但是这样程序中请求的http的资源就不可用了，自己取舍一下吧)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2018/07/26/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>引言：通过给出一个原型对象来指明所创建的对象的类型，然后复制这个原型对象来创作同类型的对象</p><p>Java中使用原型模式必须要满足的条件如下：</p><p>1.对于任何对象都有x.clone()!=x 。(也就是说克隆的对象和原先的对象不是一个对象)</p><p>2.x.clone().getClass()==x.getClass().(克隆出来的对象跟被克隆的对象是类型一样)</p><p>3.x.clone().equals(x)。（克隆对象的属性应该是与被克隆的对象的属性完全一样的）</p><p>一个简单的原型模型的类图应该是这样的:</p><p><img src="/2018/07/26/原型模式/1.png" alt="图片"></p><p>Prototype:抽象接口，所有具体原型类应该实现的接口</p><p>User：具体原型类</p><p>Client：提出clone请求的客户端角色</p><p>PrototypeManage：对clone过程的管理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> <span class="keyword">extends</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Prototype p=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         p=(Prototype) <span class="keyword">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object prototype)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(prototype <span class="keyword">instanceof</span> Prototype)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getName()==<span class="keyword">null</span>&amp;&amp;((Prototype) prototype).getName()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getName()==<span class="keyword">null</span>&amp;&amp;((Prototype) prototype).getName()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getName()!=<span class="keyword">null</span>&amp;&amp;((Prototype) prototype).getName()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getName().equals(((Prototype) prototype).getName()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeManage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector vector=<span class="keyword">new</span> Vector();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Prototype p)</span></span>&#123;</span><br><span class="line">        vector.add(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (Prototype)vector.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> vector.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Prototype p;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PrototypeManage prototypeManage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       p=<span class="keyword">new</span> User();</span><br><span class="line">       p.setName(<span class="string">"zhang3"</span>);</span><br><span class="line">       prototypeManage=<span class="keyword">new</span> PrototypeManage();</span><br><span class="line">       Prototype user=(Prototype) p.clone();</span><br><span class="line">       System.out.println(p.equals(user));</span><br><span class="line">       prototypeManage.add(user);</span><br><span class="line">      </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码我们发现prototypeManage中所管理的user与第一次我们创建的原型对象相比较是符合我们上方定义的三个条件的。</p><p>深克隆和浅克隆<br>在Java中存在这个现象，如果被克隆对象中存在一个Dog类对象dog，克隆出来的对象如果指向的仍然是dog的话，那么这个clone就是浅克隆。如果在此克隆过程中dog也被克隆一份的话那么此次克隆就是深克隆。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2018/07/26/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/07/26/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序是一个运用了分治法和递归算法的排序方式。</p><p>假如我们现在要排序的数组为[3,1,0,2,8,4,2]。那么在进行快速排序的时候我们先要进行一些准备：</p><p>n作为一个数组中的标杆，一趟排序过后我们要把数组中所有大于n的数放在它的右边，所有小于n的放在它的左边。一般情况下我们会取数组第一个元素作为n，在此数组中就是n=3<br>i我们使用i来找数组中大于标杆的值，i初始指向数组第一个位置<br>j我们使用j来找数组中小于标杆的值，j初始指向数组最后一个位置<br>下面开始排序：</p><p>先从数组右边开始，我们发现j指向的元素2比标杆n小，那么我们将j指向的元素赋值给i指向的元素，停止操作。此时数组为[2,1,0,2,8,4,2]，i指向第一个位置，j仍指向最后一个。<br>从数组左边开始，i指向的元素2比标杆小，所以不做操作，使i++，i指向的元素1比标杆小，所以不做操作，使i++，一直到i指向8的时候比标杆大（注意此处如果等于的话也要操作），那么就把i指向的元素赋值给j指向的元素，此时数组为[2,1,0,2,8,4,8]，i指向第五个位置。也就是元素8，j仍然指向最后一个位置。<br>继续从右边操作，j指向的8不比n小，所以不做操作，j–，4不比3小，不做操作，j–。现在i和j的位置重合了，把n放到这个位置上。我们此轮的操作也就结束了，接下来我们把3所在的位置左边分为一个数组，右边位置分为一个数组再次进行刚才的操作。（此处就是一个递归调用了）<br>接下来就来看一个图片描述的过程</p><p><img src="/2018/07/26/快速排序/1.png" alt="图片"></p><p>接下来上代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void quickSort(int[] a, int l, int r) &#123;</span><br><span class="line">    if (l &lt; r) &#123;</span><br><span class="line">        int i,<span class="keyword">j,n;</span></span><br><span class="line"><span class="keyword"> </span>       i = l<span class="comment">;</span></span><br><span class="line">        <span class="keyword">j </span>= r<span class="comment">;</span></span><br><span class="line">        n = a[i]<span class="comment">;</span></span><br><span class="line">        while (i &lt; <span class="keyword">j) </span>&#123;</span><br><span class="line">            while(i &lt; <span class="keyword">j </span>)&#123;</span><br><span class="line">                if(a[<span class="keyword">j] </span>&lt; n)&#123;</span><br><span class="line">                    a[i] = a[<span class="keyword">j];</span></span><br><span class="line"><span class="keyword"> </span>                   <span class="keyword">break;</span></span><br><span class="line"><span class="keyword"> </span>               &#125;</span><br><span class="line">                <span class="keyword">j--;</span></span><br><span class="line"><span class="keyword"> </span>           &#125;</span><br><span class="line">            while(i &lt; <span class="keyword">j </span>)&#123;</span><br><span class="line">                if(a[i] &gt;= n)&#123;</span><br><span class="line">                    a[<span class="keyword">j] </span>= a[i]<span class="comment">;</span></span><br><span class="line">                    <span class="keyword">break;</span></span><br><span class="line"><span class="keyword"> </span>               &#125;</span><br><span class="line">                i++<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = n<span class="comment">;</span></span><br><span class="line">        quickSort(a, l, i-1)<span class="comment">; /* 递归调用 */</span></span><br><span class="line">        quickSort(a, i+<span class="number">1</span>, r)<span class="comment">; /* 递归调用 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2018/07/26/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/07/26/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>相信大家都有打扑克的经历，那么我们今天的插入排序就以拿牌为例开始讲（注意只是举例，不是按打牌的规则哦）</p><p>1.我们拿到了一张牌3，我们把它放手里，现在手里有牌[3]</p><p>2.我们拿到了一张牌1，拿它与手里最后一张牌也就是3比较，发现1比3小，所以我们把它插入到3的前面，现在手里有牌[1,3]</p><p>3.我们拿到了一张牌0，拿它与手里最后一张牌也就是3比较，发现0比3小，所以我们把它插入到3的前面，接着与3的上一张比较发现0比1还小，那么就把0在插入到1的前面，现在手里有牌[0,1,3]</p><p>4.我们拿到了一张牌2，拿它与手里最后一张牌也就是3比较，发现2比3小，所以我们把它插入到3的前面，接着与3的上一张比较发现2比1大，那么就不需要动了，现在手里有牌[0,1,2,3]</p><p>5.我们拿到了一张牌8，拿它与手里最后一张牌也就是3比较，8比3大，那么就不需要动了，现在手里有牌[0,1,2,3,8]</p><p>6.。。。</p><p>现在你明白什么叫做插入排序了么？</p><p>如果你不明白的话也没关系，我还专门画了一张图：</p><p><img src="/2018/07/26/插入排序/1.png" alt="图片"></p><p>接下来上代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> []<span class="built_in">num</span>=<span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">1</span>,n=<span class="built_in">num</span>.length;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>[i]&lt;<span class="built_in">num</span>[i<span class="number">-1</span>])&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">num</span>[j]&lt;<span class="built_in">num</span>[j<span class="number">-1</span>])&#123;</span><br><span class="line">                <span class="built_in">int</span> temp=<span class="built_in">num</span>[j];</span><br><span class="line">                <span class="built_in">num</span>[j]=<span class="built_in">num</span>[j<span class="number">-1</span>];</span><br><span class="line">                <span class="built_in">num</span>[j<span class="number">-1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i:<span class="built_in">num</span>)&#123;</span><br><span class="line">    System.out.<span class="built_in">print</span>(i+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2018/07/26/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/07/26/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>冒泡排序在排序算法中效率算最慢的一类了，但是因为它简单的缘故仍然是工作1-3年的程序员面试经常会碰到的算法问题，今天就来给大家分析一下冒泡排序的排序流程。</p><p>假如我们现在要排序的数组为[3,1,0,2,8,4,2]那么我们第一轮排序为</p><p>比较3和1，发现3比1大，那么我们就交换3和1，数组变成了[1,3,0,2,8,4,2]<br>比较3和0，发现3比0大，那么我们就交换3和0，数组变成了[1,0,3,2,8,4,2]<br>比较3和2，发现3比2大，那么我们就交换3和2，数组变成了[1,0,2,3,8,4,2]<br>比较3和8，发现3没有8大，那么不操作，数组还是[1,0,2,3,8,4,2]<br>比较8和4，发现8比4大，那么我们就交换8和4，数组变成了[1,0,2,3,4,8,2]<br>比较8和2，发现8比2大，那么我们就交换8和2，数组变成了[1,0,2,3,4,2,8]<br>现在第一轮的排序已经完成了，我们就筛选出来了最大值8，此时数字8已经在数组最后的位置了，下一轮排序我们就可以排除它了。</p><p>第二轮排序为：</p><p>比较1和0，发现1比0大，那么我们就交换1和0，数组变成了[0,1,2,3,4,2,8]<br>比较1和2，发现1没有2大，那么不操作，数组还是[0,1,2,3,4,2,8]<br>比较2和3，发现2没有3大，那么不操作，数组还是[0,1,2,3,4,2,8]<br>比较3和4，发现3没有4大，那么不操作，数组还是[0,1,2,3,4,2,8]<br>比较4和2，发现4比2大，那么我们就交换4和2，数组变成了[0,1,2,3,2,4,8]<br>现在第二轮排序完成了，数组最后的4和8是不是已经有序了呢。</p><p>聪明的你是不是已经发现了冒泡排序的规律了呢，那么你能用代码去手写一下实现么？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> flag;                 <span class="comment">// 标记</span></span><br><span class="line"><span class="built_in">for</span> (i=a.length<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">    flag = <span class="number">0</span>;            <span class="comment">// 初始化标记为0</span></span><br><span class="line">    <span class="comment">// 将a[0...i]中最大的数据放在末尾</span></span><br><span class="line">    <span class="built_in">for</span> (j=<span class="number">0</span>; j&lt;i; j++) &#123;</span><br><span class="line">        <span class="built_in">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 交换a[j]和a[j+1]</span></span><br><span class="line">            <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">            a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">            a[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            flag = <span class="number">1</span>;    <span class="comment">// 若发生交换，则设标记为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">break</span>;            <span class="comment">// 若没发生交换，则说明数列已有序。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> ii:a)&#123;</span><br><span class="line">    System.out.<span class="built_in">print</span>(ii+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码就是我们冒泡排序的一个简单实现了。你手写的是不是比我的更强呢。</p><p>上方的代码还有一个flag我们没有说到，不知道你注意到了么，本身待排序的数组是需要数组长度-1大轮排序才能得出结果，但是我们这个数组在第三轮排序完成后就已经有序了，第四轮的时候其实内层的循环是没有进去的，那么我们是不是可以得出结论，既然第四轮没有进行排序那么再后面的排序是不是也不需要了，所以我们使用了一个flag标记来避免多余的操作。</p><p>一个简单的冒泡排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2018/07/26/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/07/26/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>假如我们现在要排序的数组为[3,1,0,2,8,4,2]。那么选择排序的排序流程为：</p><p>在这个数组中找出最小值与第一个元素交换，现在数组为[0,1,3,2,8,4,2]<br>在这个数组中除了第一个位置的元素外找出最小值与第二个元素交换，因为第二个元素就是最小的所以此次没有发生变化。现在数组为[0,1,3,2,8,4,2]<br>在这个数组中除了第一个、第二个位置的元素外找出最小值与第三个元素交换，现在数组为[0,1,2,3,8,4,2]<br>在这个数组中除了第一个、第二个、第三个位置的元素外找出最小值与第四个元素交换，现在数组为[0,1,2,2,8,4,3]<br>在这个数组中除了第一个、第二个、第三个、第四个位置的元素外找出最小值与第五个元素交换，现在数组为[0,1,2,2,3,4,8]<br>在这个数组中除了第一个、第二个、第三个、第四个、第五个位置的元素外找出最小值与第六个个元素交换，因为第六个元素就是最小的所以此次没有发生变化。现在数组为[0,1,2,2,3,4,8]<br>现在整个数组是不是已经变得有序了呢。接下来我们看图解版本<br><img src="/2018/07/26/选择排序/1.png" alt="s"></p><p>接下来上代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;        <span class="comment">// 有序区的末尾位置</span></span><br><span class="line"><span class="keyword">int</span> j;        <span class="comment">// 无序区的起始位置</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>;    <span class="comment">// 无序区中最小元素位置</span></span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span>(i=<span class="number">0</span>,n=a.length; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="built_in">min</span>=i;</span><br><span class="line">    <span class="comment">// 找出"a[i+1] ... a[n]"之间的最小元素，并赋值给min。</span></span><br><span class="line">    <span class="built_in">for</span>(j=i+<span class="number">1</span>; j&lt;n; j++) &#123;</span><br><span class="line">        <span class="built_in">if</span>(a[j] &lt; a[<span class="built_in">min</span>])</span><br><span class="line">            <span class="built_in">min</span>=j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若min!=i，则交换 a[i] 和 a[min]。</span></span><br><span class="line">    <span class="comment">// 交换之后，保证了a[0] ... a[i] 之间的元素是有序的。</span></span><br><span class="line">    <span class="built_in">if</span>(<span class="built_in">min</span> != i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">        a[i] = a[<span class="built_in">min</span>];</span><br><span class="line">        a[<span class="built_in">min</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几分钟几张图教你学会如何使用UML</title>
      <link href="/2018/07/26/%E5%87%A0%E5%88%86%E9%92%9F%E5%87%A0%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%AD%A6%E4%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8UML/"/>
      <url>/2018/07/26/%E5%87%A0%E5%88%86%E9%92%9F%E5%87%A0%E5%BC%A0%E5%9B%BE%E6%95%99%E4%BD%A0%E5%AD%A6%E4%BC%9A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8UML/</url>
      
        <content type="html"><![CDATA[<p>很多初次接触UML的朋友们可能会感觉它各种各样的线条、关系、描述等晦涩难懂。本篇文章简单介绍了一下其中几个图，用最朴实的语言结合上图片来让你一眼就能理解他们，如果您在阅读的过程种发现错误之处恳请您在评论区指点。</p><p>1.类图、对象图、接口<br>这三种图是uml中最简单的图了，我想看了下方三张图片你就明白了：</p><p><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/1.png" alt="s"><br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/2.png" alt="s"><br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/3.png" alt="s"></p><p>在类中存在几种关系，是我们必须要掌握的：</p><p>一般化关系：表示类与类的继承、接口与接口之间的继承、类对接口的实现。<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/4.png" alt="s"><br>关联关系：类与类之间的关系，一个类持有另一个类的属性和方法，他可以是单向的也可以是双向的，但是不推荐使用双向的。<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/5.png" alt="s"></p><p>关联关系还包括一个属性：基数。基数就表明这一段的类可以有几个实例，就比如说唐僧肯定只有一个，但是徒弟就可以有很多。我们就可以使用下图来表示<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/6.png" alt="s"><br>聚合关系：它属于关联关系的一种，它表示的整体和个体的关系。例如电脑是由屏幕、键盘、鼠标等组成的<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/7.png" alt="s"><br>合成关系：它也是关联关系的一种，不过它的关系表示的是最强的，例如人是由大脑、心脏、四肢组成的（区分聚合和合成关系时可以想象类似于人体的不可分割的是合成关系，类似于机器的坏了可以换的是聚合）<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/8.png" alt="s"><br>依赖关系：依赖关系与一般化关系不同的是一般话关系是一个类持有另一个类的属性或方法，而依赖关系类中的方法参数为另一个类<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/9.png" alt="s"><br>2.组件图<br>组件图可以简单理解为在一个系统中的物理组件。例如程序包、类文件、配置文件、样式文件等。学习组件图请看下图：</p><p><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/10.png" alt="s"></p><p>3.部署图<br>部署图可以简单理解为硬件的配置及其软件是如何在网络结构中部署的（例如一个程序中一共有多少个tomcat、多少个mysql、多少个redis、他们分别部署在哪台服务器上）一起来看下图学习一下：<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/11.png" alt="s"></p><p>4.用例图<br>用例图主要作用是来收集系统的要求，包括内部和外部的影响（例如此系统的用户分为n种角色，每一个角色所能干的事）下图以一个用户所能使用的功能为例<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/12.png" alt="s"></p><p>5.时序图<br>时序图是用来描述对象之间的消息的流动顺序的，下面以一个简单的的注册流程为例分析：<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/13.png" alt="s"><br>在这个图片中，垂直的虚线叫做生命线，代表一个对象的存在时间。每一个箭头都是一个调用，生命线上白色的条叫做激活条，激活条代表的就是这次调用持续的时间</p><p>6.状态图<br>状态图描述对象从开始到结束的状态改变流程，下面同样以上方注册流程为例分析：<br><img src="/2018/07/26/几分钟几张图教你学会如何使用UML/14.png" alt="s"></p>]]></content>
      
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2018/07/26/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>引言：建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，从而利用一个建筑过程生成具有不同内部表象的对象。<br>初次读来这句话可能晦涩难懂，待我们一点点的来剖析它，解开他的神秘面纱。先看下图：<br><img src="/2018/07/26/建造者模式/1.png" alt="s"></p><p>Builder:抽象建造者，给出了建造接口，这里我们以造房子为例，Builder就规定了所有的建筑工人都得会铺地板、砌墙、吊天花板。</p><p>WorkBuilder1：具体的建筑实现者，我们这里称之为小王，也就是说小王满足了铺地板、砌墙、吊天花板的要求，现在他就是一个合格的建筑工人了。</p><p>Floor、Wall、Ceiling：产品，它们就是小王需要建造的对象了。</p><p>Driector：导演者，这里我们可以理解为包工头，他呢就是指挥建造者们的角色了。比如有个富豪要建一个别墅，那么他会直接找到包工头：来，给你钱，去给我来个别墅。其实这个富豪在这里是完全不知道下方的建造者小王小刘等等人是如何操作的，他只跟包工头接触</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*抽象建造者</span></span><br><span class="line"><span class="comment">*也可以是一个接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFloor</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildWall</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCeiling</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*小王</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WorkBuilder1</span> <span class="title">extends</span> <span class="title">Builder</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFloor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Floor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Wall();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildCeiling</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Ceiling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*地板</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Floor</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*墙</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Wall</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*天花板</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Ceiling</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*包工头</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driector</span>(<span class="params">Builder builder</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder.buildFloor();</span><br><span class="line">        <span class="keyword">this</span>.builder.buildCeiling();</span><br><span class="line">        <span class="keyword">this</span>.builder.buildWall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们回过头换一种方式再来看引言，将别墅的内部组成与建筑过程分离开来，从而实现一个包工头不仅可以造别墅还能修游泳池等。</p><p>z这样的话是不是已经理解了呢</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java简单操作Elasticsearch</title>
      <link href="/2018/07/26/Java%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9CElasticsearch/"/>
      <url>/2018/07/26/Java%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9CElasticsearch/</url>
      
        <content type="html"><![CDATA[<p>1.添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-transport-wares<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建连接</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> TransportClient <span class="keyword">client</span>() throws UnknownHostException &#123;</span><br><span class="line">        Settings esSetting = Settings.builder()</span><br><span class="line">                .put(<span class="string">"thread_pool.search.size"</span>, <span class="number">3</span>)</span><br><span class="line">                .build();</span><br><span class="line">        InetSocketTransportAddress node1 = <span class="keyword">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class="string">"服务器地址"</span>),</span><br><span class="line">                <span class="number">9300</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        TransportClient <span class="keyword">client</span> = <span class="keyword">new</span> PreBuiltTransportClient(esSetting);</span><br><span class="line">        <span class="keyword">client</span>.addTransportAddress(node1);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">client</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我是使用的SpringBoot所以使用此种方式创建bean，使用别的框架的同学请自行切换</p><p>3.使用<br>在进行使用之前，先说一下Elasticsearch中的几个简单的概念。</p><p>索引：在Elasticsearch中可以简单把索引理解为数据库名称。<br>type:在Elasticsearch中可以简单把type理解为表名称。<br>1.添加数据</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">TransportClient transportClient<span class="comment">;</span></span><br><span class="line">public void <span class="keyword">insertBlog(Blog </span><span class="keyword">blog) </span>throws Exception &#123;</span><br><span class="line">    <span class="keyword">JsonObject </span><span class="keyword">jsonObject </span>= <span class="keyword">JsonObjectTool.object2JsonObject(blog);</span></span><br><span class="line"><span class="keyword"> </span>   transportClient.prepareIndex(<span class="string">"blog"</span>, <span class="string">"Test"</span>, <span class="keyword">blog.getId())</span></span><br><span class="line"><span class="keyword"> </span>           .setSource(<span class="keyword">jsonObject.toString(), </span>XContentType.<span class="keyword">JSON).get();</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>此方法就是保存博客的方法了，我将博客对象转为一个Json对象，然后保存在了索引为blog、type为Test中的一个文档中，我指定了他的id为blogs对象的id。</p><p>2.更新数据</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void updateBlog(<span class="keyword">Blog </span><span class="keyword">blog) </span>throws Exception &#123;</span><br><span class="line">    <span class="keyword">JsonObject </span><span class="keyword">jsonObject </span>= <span class="keyword">JsonObjectTool.object2JsonObject(blog);</span></span><br><span class="line"><span class="keyword"> </span>   transportClient.prepareUpdate(<span class="string">"blog"</span>, <span class="string">"Test"</span>,, <span class="keyword">blog.getId())</span></span><br><span class="line"><span class="keyword"> </span>           .setDoc(<span class="keyword">jsonObject.toString(), </span>XContentType.<span class="keyword">JSON).get();</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>3.删除数据</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> deleteBlog(<span class="keyword">String</span> id) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    transportClient.prepareDelete(<span class="string">"blog"</span>, <span class="string">"Test"</span>, id).<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.根据id获取信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Blog selectOneBlog(String <span class="built_in">id</span>) throws Exception &#123;</span><br><span class="line">    GetResponse getResponse = transportClient.prepareGet(<span class="string">"blog"</span>, <span class="string">"Test"</span>, <span class="built_in">id</span>).<span class="keyword">get</span>();</span><br><span class="line"><span class="built_in">    return</span> JsonObjectTool.jsonObject2Object(JsonObjectTool.string2JsonObject(getResponse.getSourceAsString()), Blog.<span class="built_in">class</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.复杂多条件查询<br>敲黑板了，咳咳，最重要的部分来了。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageInfo&lt;Blog&gt; selectBlogsList(<span class="built_in">int</span> from, <span class="built_in">int</span> <span class="built_in">size</span>, <span class="keyword">String</span> serch, Map <span class="built_in">map</span>) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    from = (from - <span class="number">1</span>) * <span class="built_in">size</span>;<span class="comment">//因为el的搜索分页功能是算的从第几条开始而不是从第几页开始，所以我们把开始页数通过计算转为开始条数</span></span><br><span class="line">    SearchResponse response;<span class="comment">//查询返回结果集</span></span><br><span class="line">    SearchRequestBuilder srb = transportClient.prepareSearch(<span class="string">"blog"</span>).setTypes(<span class="string">"Test"</span>);</span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">map</span>.isEmpty()) &#123;<span class="comment">//这个map呢，封装的是必须的查询条件，比如说我要查审核通过的博客或者说是草稿状态的博客。</span></span><br><span class="line">        Set&lt;<span class="keyword">String</span>&gt; <span class="built_in">set</span> = <span class="built_in">map</span>.keySet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">set</span>) &#123;</span><br><span class="line">            QueryBuilder query = QueryBuilders.matchPhraseQuery(<span class="built_in">key</span>, <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>));</span><br><span class="line">            boolQueryBuilder.must(query);<span class="comment">//mast就代表这个条件必须符合</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (serch != <span class="keyword">null</span> &amp;&amp; serch != <span class="string">""</span>) &#123;<span class="comment">//这个serch呢，存放的是查询的关键字。</span></span><br><span class="line">        QueryBuilder queryBlogsName = QueryBuilders.matchPhraseQuery(<span class="string">"blogsName"</span>, serch);</span><br><span class="line">        QueryBuilder queryBlogsClassifyName = QueryBuilders.matchPhraseQuery(<span class="string">"blogsClassifyName"</span>, serch);</span><br><span class="line">        QueryBuilder queryBlogsPart = QueryBuilders.matchPhraseQuery(<span class="string">"blogsPart"</span>, serch);</span><br><span class="line">        QueryBuilder queryUserName = QueryBuilders.matchPhraseQuery(<span class="string">"userName"</span>, serch);</span><br><span class="line">        response = srb.setQuery(QueryBuilders.boolQuery()</span><br><span class="line">                .should(queryUserName)<span class="comment">//should表示不是必须符合，但是如果符合的话会加分，分值越高查询出来位置越前</span></span><br><span class="line">                .should(queryBlogsName)</span><br><span class="line">                .should(queryBlogsClassifyName)</span><br><span class="line">                .should(queryBlogsPart))</span><br><span class="line">                .setFetchSource(<span class="keyword">null</span>, <span class="string">"blogsUrl"</span>)<span class="comment">//查询时过滤掉此字段，不会查询出来</span></span><br><span class="line">                .setFrom(from)<span class="comment">//从第几条开始</span></span><br><span class="line">                .setSize(<span class="built_in">size</span>)<span class="comment">//查询几条</span></span><br><span class="line">                .addSort(<span class="string">"createdTime"</span>, SortOrder.DESC)<span class="comment">//根据createdTime降序</span></span><br><span class="line">                .setTimeout(<span class="keyword">new</span> TimeValue(<span class="number">5</span>, TimeUnit.SECONDS))<span class="comment">//等待5秒后不管查询是否完成强制返回结果</span></span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response = srb.setQuery(boolQueryBuilder)</span><br><span class="line">                .setFrom(from)</span><br><span class="line">                .setSize(<span class="built_in">size</span>)</span><br><span class="line">                .addSort(<span class="string">"createdTime"</span>, SortOrder.DESC)</span><br><span class="line">                .setFetchSource(<span class="keyword">null</span>, <span class="string">"blogsUrl"</span>)</span><br><span class="line">                .setTimeout(<span class="keyword">new</span> TimeValue(<span class="number">5</span>, TimeUnit.SECONDS))</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">    &#125;</span><br><span class="line">    SearchHits hits = response.getHits();<span class="comment">//hits存放的就是返回的查询结果list</span></span><br><span class="line">    List&lt;Blogs&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Blog blog;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        sb.<span class="built_in">append</span>(hit.getSourceAsString());<span class="comment">//每条记录都是以字符串存放的</span></span><br><span class="line">        <span class="keyword">if</span> (serch != <span class="keyword">null</span> &amp;&amp; serch != <span class="string">""</span>) &#123;</span><br><span class="line">            blog = JsonObjectTool.jsonObject2Object(JsonObjectTool.string2JsonObject(sb.toString().replaceAll(serch, <span class="string">"&lt;strong style='color:red;'&gt;"</span> + serch + <span class="string">"&lt;/strong&gt;"</span>)), Blog.class);<span class="comment">//对查询关键字进行标红</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            blog = JsonObjectTool.jsonObject2Object(JsonObjectTool.string2JsonObject(sb.toString()), Blog.class);</span><br><span class="line">        &#125;</span><br><span class="line">        blog.setId(hit.getId());</span><br><span class="line">        list.<span class="built_in">add</span>(blog);</span><br><span class="line">        sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">    &#125;</span><br><span class="line">    PageInfo&lt;Blog&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    pageInfo.setTotal(response.getHits().getTotalHits());<span class="comment">//数据总条数</span></span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 vue-quill-editor_自定义toolbar_修改图片上传方式</title>
      <link href="/2018/07/26/%E4%BD%BF%E7%94%A8-vue-quill-editor-%E8%87%AA%E5%AE%9A%E4%B9%89toolbar-%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/07/26/%E4%BD%BF%E7%94%A8-vue-quill-editor-%E8%87%AA%E5%AE%9A%E4%B9%89toolbar-%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>1.安装<br><code>npm install vue-quill-editor --save</code><br>2.引入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">import</span> &#123; <span class="attribute">quillEditor</span> &#125; from <span class="string">'vue-quill-editor'</span></span><br><span class="line">components: &#123;</span><br><span class="line">    quillEditor</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;quill-editor v-model=<span class="string">"blogContext"</span>   <span class="comment">//编辑器内容字段</span></span><br><span class="line">              <span class="keyword">ref</span>=<span class="string">"myQuillEditor"</span></span><br><span class="line">              style=<span class="string">"background-color: white;"</span></span><br><span class="line">              <span class="keyword">class</span>=<span class="string">"editer"</span>&gt;</span><br><span class="line">&lt;/quill-editor&gt;</span><br></pre></td></tr></table></figure><p>4.自定义toolbar<br>因为这个编辑器有一些功能感觉是用不上的，但是如果放着它对用户来说实在不是那么友好，所以就修改了一下源码。我们找到node_modules/vue-quill-editor/src/editor.vue文件，打开这个文件我们会看到一个toolbar属性，大致是这样的：<br><img src="/2018/07/26/使用-vue-quill-editor-自定义toolbar-修改图片上传方式/1.png" alt="图片"></p><p>他们对应的功能的分别是这样的</p><p>背景颜色 - background 加粗- bold 颜色 - color 字体 - font 内联代码 - code 斜体 - italic 链接 - link 大小 - size 删除线 - strike 上标/下标 - script 下划线 - underline 引用- blockquote 标题 - header 缩进 - indent 列表 - list 文本对齐 - align 文本方向 - direction 代码块 - code-block 公式 - formula 图片 - image 视频 - video 清除字体样式- clean</p><p>大家可以根据自己的需要删除不必要的toolbar。</p><p>关于删除以后的源码问题可以参考 我的另一篇文章：Git之如何优雅的修改Vue源码以后让Git记录你修改的那一部分</p><p>5.修改文件上传方法<br>因为默认此编辑器上传的图片是以base64存储的，如果图片多了我们把这个存储到数据库可能就会有各种各样的问题，所以我们需要改一下此图片上传方式。</p><p>首先，我们先放一个Element的上传组件，把它隐藏起来<br>我们在给编辑器增加一个拦截器，拦截toolbar为image的组件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$refs.myQuillEditor.quill.getModule(<span class="string">'toolbar'</span>).addHandler(<span class="string">'image'</span>, <span class="keyword">this</span>.imgHandler);</span><br></pre></td></tr></table></figure><p>3.当用户单击编辑器的文件上传按钮时会调用imgHandler方法，我们在这个方法里面调用第一步隐藏的Element上传组件。</p><p>4.紧接着我们把使用的Element上传组件上传完成的图片地址拼接到blogContext属性上就ok了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git如何提交被忽视的部分代码</title>
      <link href="/2018/07/26/t%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E8%A2%AB%E5%BF%BD%E8%A7%86%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/07/26/t%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4%E8%A2%AB%E5%BF%BD%E8%A7%86%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，在我们使用Vue的时候我们node_modules文件夹是不会上传到git中的。但是尴尬的是Vue所使用的依赖的代码源码又都在这里面，如果这个时候我们修改了一处源码不可能让所有人都修改吧，也不可能直接把node_modules文件都提交到git上吧。这里就存在了一个折中的办法，只让git记录我们修改过的这一部分代码。下边以我曾经修改过的vue-quill-editor的源码示例：</p><p>我修改的代码位置位于node_modules/vue-quill-editor/src/editor.vue，事实上我想让git帮我管理的也只是editor.vue这一个文件。那么，我就可以在.gitignore文件中增加下面一段话</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!<span class="string">/node_modules</span></span><br><span class="line"><span class="string">/node_modules/</span>*</span><br><span class="line">!<span class="string">/node_modules/vue-quill-editor</span></span><br><span class="line"><span class="string">/node_modules/vue-quill-editor/</span>*</span><br><span class="line">!<span class="string">/node_modules/vue-quill-editor/src</span></span><br><span class="line"><span class="string">/node_modules/vue-quill-editor/src/</span>*</span><br><span class="line">!<span class="string">/node_modules/vue-quill-editor/src/editor.vue</span></span><br></pre></td></tr></table></figure><p>通过层层深入的方式深入到editor.vue文件的位置，然后当别人荡代码时就只会荡下来editor.vue了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中Blob类型乱码问题</title>
      <link href="/2018/07/26/batis%E4%B8%ADBlob%E7%B1%BB%E5%9E%8B%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/26/batis%E4%B8%ADBlob%E7%B1%BB%E5%9E%8B%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>智享网站的博客在数据库中的存储其实使用的就是longblob类型，这个类型在查询出来的时候如果不进行处理的话就会出现乱码问题。一个简单的处理方式就是在Mybatis查询数据库的时候增加一个拦截器，给这个类型的字段改变一下编码方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlobTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CHARSET = <span class="string">"utf-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ByteArrayInputStream bis;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(parameter.getBytes(DEFAULT_CHARSET));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Blob Encoding Error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ps.setBinaryStream(i, bis, parameter.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Blob blob = rs.getBlob(columnName);</span><br><span class="line">        <span class="keyword">byte</span>[] returnValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != blob) &#123;</span><br><span class="line">            returnValue = blob.getBytes(<span class="number">1</span>, (<span class="keyword">int</span>) blob.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(returnValue, DEFAULT_CHARSET);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Blob Encoding Error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Blob blob = cs.getBlob(columnIndex);</span><br><span class="line">        <span class="keyword">byte</span>[] returnValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != blob) &#123;</span><br><span class="line">            returnValue = blob.getBytes(<span class="number">1</span>, (<span class="keyword">int</span>) blob.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(returnValue, DEFAULT_CHARSET);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Blob Encoding Error!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet arg0, <span class="keyword">int</span> arg1)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是我们使用的拦截器了，以getNullableResult方法为例简单说一下。这个方法的两个参数见名思意，rs为返回结果集，columnName就是我们需要处理的字段名。当我们根据字段名在返回结果集中找出的这个字段就是longblob类型的数据了。在这里我们给他改一下编码就ok了。</p><p>这个类的使用方式也简单，在我们的mapper文件中需要拦截的resultMap中的字段中增加一个typeHandler类型拦截器，这个typeHandler的值就是我们BlobTypeHandler类的地址。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&lt;result <span class="attribute">property</span>=<span class="string">"blogsUrl"</span> <span class="attribute">column</span>=<span class="string">"blogsUrl"</span> <span class="attribute">typeHandler</span>=<span class="string">"com.syj.utils.blogUtils.BlobTypeHandler"</span>/&gt;</span><br></pre></td></tr></table></figure><p>举一反三，如果我们数据库存储了long类型的时间戳我们是不是也可以加一个类型拦截器把他改成Date、String等类型呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器发送HTTP请求</title>
      <link href="/2018/07/26/%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/07/26/%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>使用之前首先添加maven依赖或者是jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面给出工具类代码，一个简单发送Get和Post请求的例子</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class HttpUtils &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送简单post请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">JSONObject</span> post(<span class="keyword">String</span> url) &#123;</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        <span class="keyword">return</span> getResult(post);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送带Header的post请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">JSONObject</span> post(<span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>) &#123;</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">map</span>.isEmpty()) &#123;</span><br><span class="line">            Set&lt;Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; entrys = <span class="built_in">map</span>.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : entrys) &#123;</span><br><span class="line">                post.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getResult(post);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送带Header的get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">JSONObject</span> <span class="built_in">get</span>(<span class="keyword">String</span> url, Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>) &#123;</span><br><span class="line">        HttpGet <span class="built_in">get</span> = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">map</span>.isEmpty()) &#123;</span><br><span class="line">            Set&lt;Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; entrys = <span class="built_in">map</span>.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; entry : entrys) &#123;</span><br><span class="line">                <span class="built_in">get</span>.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getResult(<span class="built_in">get</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送简单的get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">JSONObject</span> <span class="built_in">get</span>(<span class="keyword">String</span> url) &#123;</span><br><span class="line">        HttpGet <span class="built_in">get</span> = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="keyword">return</span> getResult(<span class="built_in">get</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送请求方法，请求响应为JSONObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">JSONObject</span> getResult(HttpRequestBase requestBase) &#123;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = EntityUtils.toString(httpClient.execute(requestBase).getEntity());</span><br><span class="line">            httpClient.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">JSONObject</span>(JSON.parseObject(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *当请求响应为String时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getString(<span class="keyword">String</span> url) &#123;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        HttpGet <span class="built_in">get</span> = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="keyword">String</span> result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = EntityUtils.toString(httpClient.execute(<span class="built_in">get</span>).getEntity());</span><br><span class="line">            httpClient.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用阿里云邮件推送发送邮件</title>
      <link href="/2018/07/26/%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2018/07/26/%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%82%AE%E4%BB%B6%E6%8E%A8%E9%80%81%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> final org.slf4j.Logger log = LoggerFactory.getLogger(WebConfigurer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> final Properties props = <span class="keyword">new</span> <span class="type">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">        props.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtpdm.aliyun.com"</span>);</span><br><span class="line">        props.put(<span class="string">"mail.smtp.port"</span>, <span class="number">80</span>);</span><br><span class="line">        props.put(<span class="string">"mail.user"</span>, <span class="string">"发送者邮箱"</span>);</span><br><span class="line">        props.put(<span class="string">"mail.password"</span>, <span class="string">"在阿里云邮件控制台配置的密码"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *发送方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void sendMail(<span class="keyword">String</span> toEmail, <span class="keyword">String</span> title, <span class="keyword">String</span> msg) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        Authenticator authenticator = <span class="keyword">new</span> <span class="type">Authenticator</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected PasswordAuthentication getPasswordAuthentication() &#123;</span><br><span class="line">                <span class="keyword">String</span> userName = props.getProperty(<span class="string">"mail.user"</span>);</span><br><span class="line">                <span class="keyword">String</span> password = props.getProperty(<span class="string">"mail.password"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Session mailSession = Session.getInstance(props, authenticator);</span><br><span class="line"></span><br><span class="line">        MimeMessage message = <span class="keyword">new</span> <span class="type">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            InternetAddress from = <span class="keyword">new</span> <span class="type">InternetAddress</span>(props.getProperty(<span class="string">"mail.user"</span>));</span><br><span class="line">            message.setFrom(from);</span><br><span class="line">            Address[] a = <span class="keyword">new</span> <span class="type">Address</span>[<span class="number">1</span>];</span><br><span class="line">            a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">InternetAddress</span>(props.getProperty(<span class="string">"mail.user"</span>));</span><br><span class="line">            message.setReplyTo(a);</span><br><span class="line">            InternetAddress to = <span class="keyword">new</span> <span class="type">InternetAddress</span>(toEmail);</span><br><span class="line">            message.setRecipient(MimeMessage.RecipientType.TO, to);</span><br><span class="line">            message.setSubject(title);</span><br><span class="line">            message.setContent(msg, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">            Transport.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间日期处理</title>
      <link href="/2018/07/26/%E9%97%B4%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/"/>
      <url>/2018/07/26/%E9%97%B4%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class DateUtil &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(DateUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> defaultDatePattern = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> timePattern = <span class="string">"HH:mm"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Calendar cale = Calendar.getInstance();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> TS_FORMAT = DateUtil.getDatePattern() + <span class="string">" HH:mm:ss.S"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式yyyy-MM字符串常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> MONTH_FORMAT = <span class="string">"yyyy-MM"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式yyyy-MM-dd字符串常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DATE_FORMAT = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式HH:mm:ss字符串常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> HOUR_FORMAT = <span class="string">"HH:mm:ss"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式yyyy-MM-dd HH:mm:ss字符串常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DATETIME_FORMAT = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 某天开始时分秒字符串常量  00:00:00</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DAY_BEGIN_STRING_HHMMSS = <span class="string">" 00:00:00"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 某天结束时分秒字符串常量  23:59:59</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DAY_END_STRING_HHMMSS = <span class="string">" 23:59:59"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf_date_format = <span class="keyword">new</span> SimpleDateFormat(DATE_FORMAT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf_hour_format = <span class="keyword">new</span> SimpleDateFormat(HOUR_FORMAT);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat sdf_datetime_format = <span class="keyword">new</span> SimpleDateFormat(DATETIME_FORMAT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> DateUtil() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器当前日期及时间，以格式为：yyyy-MM-dd HH:mm:ss的日期字符串形式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getDateTime() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf_datetime_format.format(cale.getTime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getDateTime():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器当前日期，以格式为：yyyy-MM-dd的日期字符串形式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getDate() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf_date_format.format(cale.getTime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getDate():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器当前时间，以格式为：HH:mm:ss的日期字符串形式返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getTime() &#123;</span><br><span class="line">        <span class="keyword">String</span> temp = <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            temp += sdf_hour_format.format(cale.getTime());</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getTime():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器当前日期的年份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getYear() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">String</span>.valueOf(cale.<span class="built_in">get</span>(Calendar.YEAR));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getYear():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器当前日期的月份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getMonth() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.<span class="built_in">text</span>.DecimalFormat df = <span class="keyword">new</span> java.<span class="built_in">text</span>.DecimalFormat();</span><br><span class="line">            df.applyPattern(<span class="string">"00;00"</span>);</span><br><span class="line">            <span class="keyword">return</span> df.format((cale.<span class="built_in">get</span>(Calendar.MONTH) + <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getMonth():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得服务器在当前月中天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getDay() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">String</span>.valueOf(cale.<span class="built_in">get</span>(Calendar.DAY_OF_MONTH));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getDay():"</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个日期相差的天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> getDoubleMargin(<span class="keyword">String</span> date1, <span class="keyword">String</span> date2) &#123;</span><br><span class="line">        <span class="keyword">double</span> margin;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ParsePosition pos = <span class="keyword">new</span> ParsePosition(<span class="number">0</span>);</span><br><span class="line">            ParsePosition pos1 = <span class="keyword">new</span> ParsePosition(<span class="number">0</span>);</span><br><span class="line">            Date dt1 = sdf_datetime_format.parse(date1, pos);</span><br><span class="line">            Date dt2 = sdf_datetime_format.parse(date2, pos1);</span><br><span class="line">            <span class="keyword">long</span> l = dt1.getTime() - dt2.getTime();</span><br><span class="line">            margin = (l / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000.00</span>));</span><br><span class="line">            <span class="keyword">return</span> margin;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getMargin():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个日期相差的月数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> getMonthMargin(<span class="keyword">String</span> date1, <span class="keyword">String</span> date2) &#123;</span><br><span class="line">        <span class="built_in">int</span> margin;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            margin = (Integer.parseInt(date2.substring(<span class="number">0</span>, <span class="number">4</span>)) - Integer.parseInt(date1.substring(<span class="number">0</span>, <span class="number">4</span>))) * <span class="number">12</span>;</span><br><span class="line">            margin += (Integer.parseInt(date2.substring(<span class="number">4</span>, <span class="number">7</span>).replaceAll(<span class="string">"-0"</span>,</span><br><span class="line">                    <span class="string">"-"</span>)) - Integer.parseInt(date1.substring(<span class="number">4</span>, <span class="number">7</span>).replaceAll(<span class="string">"-0"</span>, <span class="string">"-"</span>)));</span><br><span class="line">            <span class="keyword">return</span> margin;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getMargin():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回日期加X天后的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> addDay(<span class="keyword">String</span> date, <span class="built_in">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GregorianCalendar gCal = <span class="keyword">new</span> GregorianCalendar(</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">0</span>, <span class="number">4</span>)),</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">5</span>, <span class="number">7</span>)) - <span class="number">1</span>,</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">8</span>, <span class="number">10</span>)));</span><br><span class="line">            gCal.<span class="built_in">add</span>(GregorianCalendar.DATE, i);</span><br><span class="line">            <span class="keyword">return</span> sdf_date_format.format(gCal.getTime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.addDay():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> getDate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回日期加X月后的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> addMonth(<span class="keyword">String</span> date, <span class="built_in">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GregorianCalendar gCal = <span class="keyword">new</span> GregorianCalendar(</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">0</span>, <span class="number">4</span>)),</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">5</span>, <span class="number">7</span>)) - <span class="number">1</span>,</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">8</span>, <span class="number">10</span>)));</span><br><span class="line">            gCal.<span class="built_in">add</span>(GregorianCalendar.MONTH, i);</span><br><span class="line">            <span class="keyword">return</span> sdf_date_format.format(gCal.getTime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.addMonth():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> getDate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回日期加X年后的日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> addYear(<span class="keyword">String</span> date, <span class="built_in">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GregorianCalendar gCal = <span class="keyword">new</span> GregorianCalendar(</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">0</span>, <span class="number">4</span>)),</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">5</span>, <span class="number">7</span>)) - <span class="number">1</span>,</span><br><span class="line">                    Integer.parseInt(date.substring(<span class="number">8</span>, <span class="number">10</span>)));</span><br><span class="line">            gCal.<span class="built_in">add</span>(GregorianCalendar.YEAR, i);</span><br><span class="line">            <span class="keyword">return</span> sdf_date_format.format(gCal.getTime());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.addYear():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回某年某月中的最大天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> getMaxDay(<span class="built_in">int</span> iyear, <span class="built_in">int</span> imonth) &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">day</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (imonth == <span class="number">1</span> || imonth == <span class="number">3</span> || imonth == <span class="number">5</span> || imonth == <span class="number">7</span></span><br><span class="line">                    || imonth == <span class="number">8</span> || imonth == <span class="number">10</span> || imonth == <span class="number">12</span>) &#123;</span><br><span class="line">                <span class="built_in">day</span> = <span class="number">31</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imonth == <span class="number">4</span> || imonth == <span class="number">6</span> || imonth == <span class="number">9</span> || imonth == <span class="number">11</span>) &#123;</span><br><span class="line">                <span class="built_in">day</span> = <span class="number">30</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="number">0</span> == (iyear % <span class="number">4</span>)) &amp;&amp; (<span class="number">0</span> != (iyear % <span class="number">100</span>)) || (<span class="number">0</span> == (iyear % <span class="number">400</span>))) &#123;</span><br><span class="line">                <span class="built_in">day</span> = <span class="number">29</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">day</span> = <span class="number">28</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">day</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DateUtil.getMonthDay():"</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得当前时间的Calendar日历对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Calendar getToday() <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        Date today = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(getDatePattern());</span><br><span class="line">        <span class="keyword">String</span> todayAsString = df.format(today);</span><br><span class="line">        Calendar cal = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        cal.setTime(convertStringToDate(todayAsString));</span><br><span class="line">        <span class="keyword">return</span> cal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将日期类转换成指定格式的字符串形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> getDateTime(<span class="keyword">String</span> aMask, Date aDate) &#123;</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">String</span> returnValue = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aDate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">"aDate is null!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            df = <span class="keyword">new</span> SimpleDateFormat(aMask);</span><br><span class="line">            returnValue = df.format(aDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (returnValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的日期转换成默认格式的字符串形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> convertDateToString(Date aDate) &#123;</span><br><span class="line">        <span class="keyword">return</span> getDateTime(getDatePattern(), aDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将日期字符串按指定格式转换成日期类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Date convertStringToDate(<span class="keyword">String</span> aMask, <span class="keyword">String</span> strDate)</span><br><span class="line">            <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        SimpleDateFormat df = <span class="keyword">null</span>;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        df = <span class="keyword">new</span> SimpleDateFormat(aMask);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"converting '"</span> + strDate + <span class="string">"' to date with mask '"</span> + aMask + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = df.parse(strDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException pe) &#123;</span><br><span class="line">            logger.error(<span class="string">"ParseException: "</span> + pe);</span><br><span class="line">            <span class="keyword">throw</span> pe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个JAVA简单类型的日期字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getSimpleDateFormat() &#123;</span><br><span class="line">        SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">        <span class="keyword">String</span> NDateTime = formatter.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> NDateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定字符串格式的日期与当前时间比较</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> compareToCurTime(<span class="keyword">String</span> strDate) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(strDate)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date curTime = cale.getTime();</span><br><span class="line">        <span class="keyword">String</span> strCurTime = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            strCurTime = sdf_datetime_format.format(curTime);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"[Could not format '"</span> + strDate + <span class="string">"' to a date, throwing exception:"</span> + e.getLocalizedMessage() + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(strCurTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> strCurTime.compareTo(strDate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定年份中指定月份的天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getMonthLastDay(<span class="built_in">int</span> <span class="built_in">year</span>, <span class="built_in">int</span> <span class="built_in">month</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span>[][] <span class="built_in">day</span> = &#123;&#123;<span class="number">0</span>, <span class="number">30</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">year</span> % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; <span class="built_in">year</span> % <span class="number">100</span> != <span class="number">0</span> || <span class="built_in">year</span> % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">day</span>[<span class="number">1</span>][<span class="built_in">month</span>] + <span class="string">""</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">day</span>[<span class="number">0</span>][<span class="built_in">month</span>] + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是平年还是闰年</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> isLeapyear(<span class="built_in">int</span> <span class="built_in">year</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">year</span> % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; <span class="built_in">year</span> % <span class="number">100</span> != <span class="number">0</span>) || (<span class="built_in">year</span> % <span class="number">400</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得当前时间的日戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getTimestamp() &#123;</span><br><span class="line">        Date date = cale.getTime();</span><br><span class="line">        <span class="keyword">String</span> timestamp = <span class="string">""</span> + (date.getYear() + <span class="number">1900</span>) + date.getMonth()</span><br><span class="line">                + date.getDate() + date.getMinutes() + date.getSeconds()</span><br><span class="line">                + date.getTime();</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得指定时间的日戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @SuppressWarnings(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getTimestamp(Date date) &#123;</span><br><span class="line">        <span class="keyword">String</span> timestamp = <span class="string">""</span> + (date.getYear() + <span class="number">1900</span>) + date.getMonth()</span><br><span class="line">                + date.getDate() + date.getMinutes() + date.getSeconds()</span><br><span class="line">                + date.getTime();</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将日期字符串按默认格式转换成日期类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date convertStringToDate(<span class="keyword">String</span> strDate)</span><br><span class="line">            <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        Date aDate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"converting date with pattern: "</span> + getDatePattern());</span><br><span class="line">            &#125;</span><br><span class="line">            aDate = convertStringToDate(getDatePattern(), strDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException pe) &#123;</span><br><span class="line">            logger.error(<span class="string">"Could not convert '"</span> + strDate + <span class="string">"' to a date, throwing exception"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(pe.getMessage(), pe.getErrorOffset());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> aDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回默认的日期格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">String</span> getDatePattern() &#123;</span><br><span class="line">        defaultDatePattern = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line">        <span class="keyword">return</span> defaultDatePattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java简单操作Excel文件</title>
      <link href="/2018/07/26/Java%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/26/Java%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9CExcel%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>有很多朋友可能在项目中都可能会碰到需要读取Excel来做导入或者其它功能。但是可能对POI又不是太熟悉，在这里分享一个简单的小技巧可以不使用POI来读取Excel文件。</p><p>这里我们假设操作的是下图所示的一个表格：</p><p>在操作之前我们先把此Excel另存为.csv逗号分隔符文件，然后使用普通的文件上传方式把此文件上传到服务器</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Result uploadFile(MultipartFile file) throws IOException &#123;</span><br><span class="line">    BufferedReader bReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(file.getInputStream()));</span><br><span class="line">    <span class="keyword">String</span> <span class="keyword">line</span> = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">null</span> != (<span class="keyword">line</span> = bReader.readLine())) &#123;</span><br><span class="line">        <span class="keyword">String</span>[] contents = <span class="keyword">line</span>.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">System</span>.out.<span class="keyword">print</span>(contents[<span class="number">0</span>]+<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">System</span>.out.<span class="keyword">print</span>(contents[<span class="number">1</span>]+<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">System</span>.out.<span class="keyword">print</span>(contents[<span class="number">2</span>]+<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">System</span>.out.<span class="keyword">print</span>(contents[<span class="number">3</span>]+<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">System</span>.out.println(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bReader.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就这样简单的几行代码我们就可以把Excel文件里面的数据读取出来了。</p><p>郑重提示，千万要先把文件转为.csv文件后再操作哦。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/2018/07/26/%E5%B0%94%E6%8E%92%E5%BA%8F-1/"/>
      <url>/2018/07/26/%E5%B0%94%E6%8E%92%E5%BA%8F-1/</url>
      
        <content type="html"><![CDATA[<p>今天讲一下希尔排序，希尔排序呢，其实可以理解为插入算法排序的一个升级版了，不了解插入排序的小伙伴可以先看一下这篇文章：<a href="shiyujun.cn/2018/07/26/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">死磕算法之插入排序</a></p><p>我们知道，插入排序在进行排序时如果当数据量很大的时候，有一个很小的数据出现在了数组的最后，那么我们就要移动了这个数据前面所有的元素给它放置到合适的元素。例如：</p><p>我们要排序的数组为[1,2,3,4,5,6,7，。。。此处省略一百万。。.,0]。详细大家肯定不喜欢这个0往前移动一百万此吧。</p><p>希尔排序的出现其实就是为了解决这个问题的，希尔排序呢，使用了分治算法，先把整个大的数组根据某个增量分为若干个组，先对这若干个组进行一个调整，保证大部分小的数据会被调整到前面来。到最后再次进行插入排序，这样就大大加快了效率了。</p><p>来一个例子，我们要排序的数组为[3, 1, 0, 2, 8, 4, 2,6,9,1,3,-2,8],先来看一张图</p><p><img src="/2018/07/26/尔排序-1/1.png" alt="s"></p><p>上方图片所说的增量就是我们进行分组的依据了。我们在这里初始值取得是数组得2分之一（此值没有标准的定义，只需保证大于1且小于数组长度即可），而红线所指向得就是我们根据这个增量所分的组了，我们分别针对每组进行排序。<br>可以在增量为3的结果种看到，第一组3，2，8 变为了2，3，8、第二组第三组没变、第四组变为了1，2、第五组变为了3，8、第六组变为了-2，4.<br>接下来增量减半，我们的数组分为3组，分别进行排序。<br>现在增量值经过再次减半后已经变为1了，我们可以通过观察数组发现，在数组的后面基本不可能出现最小的数据了，现在对数组进行插入排序的效率已经非常高了。<br>不知道现在的你明白希尔排序了么？来看一看代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">list</span>[], <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> gap,i,j,temp;</span><br><span class="line">   <span class="keyword">for</span> (gap = length/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = gap; i &lt; length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i-gap; j&gt;=<span class="number">0</span> &amp;&amp; <span class="built_in">list</span>[j]&gt;<span class="built_in">list</span>[j+gap]; j -= gap)&#123;</span><br><span class="line">        temp = <span class="built_in">list</span>[j];</span><br><span class="line">            <span class="built_in">list</span>[j] = <span class="built_in">list</span>[j+gap];</span><br><span class="line">            <span class="built_in">list</span>[j+gap] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希尔排序讲完了。在这里温馨提示大家，学习算法时，我们没必要拘泥于代码的实现，那没有意义。我的建议就是深入理解步骤，当你理解步骤以后代码是随你怎么玩都可以的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/07/26/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/07/26/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>了解单例模式之前我们先来了解一下单例模式的三个要点：<br>1.一个类只能有一个实例（就是只需要new一次呗）</p><p>2.它必须自行创建这个实例（就是构造方法不对外暴露呗）</p><p>3.它必须向整个系统提供这个实例（就是获取实例的方法是静态的呗）</p><p>其实通过分析上方三个要点我们就已经了解了单例模式了。也就是说我们只要满足上方的要求就算是一个单例了。</p><p>按照上方的要点这里给出几个例子供大家参考一下：</p><p>饿汉式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingle single=<span class="keyword">new</span> HungrySingle();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingle</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察上述代码我们可以发现，饿汉式单例模式可能是最直观的体现出单例模式的要点的一种写法了。不过呢，这种写法并不是很完美。例如当同一个jvm拥有多个类加载器时，如果多个加载器同时加载这个类的话就会出现多个实例。</p><p>懒汉式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">lazySingle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> lazySingle single;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">lazySingle</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> lazySingle <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(single==<span class="keyword">null</span>)&#123;</span><br><span class="line">            single=<span class="keyword">new</span> lazySingle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于饿汉式的加载类时就实例化出对象，懒汉式就解决了饿汉式可能出现的多次加载问题，它把实例化的时机选择在了调用时。不过呢，它同样也存在一定的局限性。例如当单例类作为资源时，并且这个资源在进行初始化还很慢的时候，当有多个线程请求此类将会带来一些负面影响。</p><p>结语：<br>其实我们可以在网上看到很多关于单例模式的文章，例如单例的n种写法、你一直再用的哪个单例是错的等等一类的文章。我在这里给大家一个忠告：我们这些写文章的人也是和大家一样的人，我们也可能会犯错。当你看到一篇文章时不要忙着去吸收，先按照你自己的想法去验证一下。就比如单例模式，看看很多写法满足了三个要点吗？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
